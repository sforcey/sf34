%!PS-Adobe-2.0
%%Creator: dvips(k) 5.90a Copyright 2002 Radical Eye Software
%%Title: cvnew.dvi
%%CreationDate: Thu Oct 19 16:57:09 2017
%%Pages: 6
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips.exe cvnew.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2017.10.19:1657
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
%% Version 97 patch 1, 99/12/16
%% Modified by Etienne Riga <etienne.riga@skynet.be> - Dec. 16, 1999
%% to add /Diamond, /SolidDiamond and /BoldDiamond
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
% DG/SR modification end
  /Metrics 13 dict def
  Metrics begin
    /Bullet        1000   def
    /Circle        1000   def
    /BoldCircle    1000   def
    /SolidTriangle 1344   def
    /Triangle      1344   def
    /BoldTriangle  1344   def
    /SolidSquare    886   def
    /Square         886   def
    /BoldSquare     886   def
    /SolidPentagon 1093.2 def
    /Pentagon      1093.2 def
    /BoldPentagon  1093.2 def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /SolidDiamond  1008   def
    /Diamond       1008   def
    /BoldDiamond   1008   def
% DG/SR modification end
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle        { -550 -550 550 550 } def
    /BoldCircle    /Circle load def
    /Bullet        /Circle load def
    /Triangle      { -571.5 -330 571.5 660 } def
    /BoldTriangle  /Triangle load def
    /SolidTriangle /Triangle load def
    /Square        { -450 -450 450 450 } def
    /BoldSquare    /Square load def
    /SolidSquare   /Square load def
    /Pentagon      { -546.6 -465 546.6 574.7 } def
    /BoldPentagon  /Pentagon load def
    /SolidPentagon /Pentagon load def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /Diamond       { -428.5 -742.5 428.5 742.5 } def
    /BoldDiamond   /Diamond load def
    /SolidDiamond  /Diamond load def
% DG/SR modification end
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath    { 0 0 500 0 360 arc closepath } def
    /Bullet        { 500 500 Adjust CirclePath fill } def
    /Circle        { 500 500 Adjust CirclePath .9 .9 scale CirclePath
                     eofill } def
    /BoldCircle    { 500 500 Adjust CirclePath .8 .8 scale CirclePath
                     eofill } def
    /BoldCircle    { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath  { 0  660 moveto -571.5 -330 lineto 571.5 -330 lineto
                     closepath } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle      { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle  { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath    { -450 450 moveto 450 450 lineto 450 -450 lineto
                     -450 -450 lineto closepath } def
    /SolidSquare   { SquarePath fill } def
    /Square        { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare    { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath  {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon      { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon  { PentagonPath .78 .78 scale PentagonPath eofill } def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /DiamondPath   { 0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto
                     428.5 0 lineto closepath } def
    /SolidDiamond  { DiamondPath fill } def
    /Diamond       { DiamondPath .85 .85 scale DiamondPath eofill } def
    /BoldDiamond   { DiamondPath .7 .7 scale DiamondPath eofill } def
% DG/SR modification end
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%END pst-dots.pro

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin 39158280 55380996 1000 600 600 (cvnew.dvi)
@start
%DVIPSBitmapFont: Fa cmcsc10 7 17
/Fa 17 122 df<91387F8008903907FFE01890391FC0783890383E000C01F8EB06784848
EB03F8484813014848130048481478A248C812385A123E127E1618127CA200FC1500A812
7C1618127EA2123E003F15307E6C7E16606C7E6C6C14C06C6CEB01806C6CEB0300013E13
0E90381FC03C903807FFF09038007F80252A7CA82E>67 D<B7FCA23907E0003F0003EC0F
8015071503A21501A3ED00C0A214031600A45C5C90B5FCA2EBE00F8080A591C8FCA9487E
B512C0A222287DA729>70 D<01FF1380000313C1380780F3381E003B48131F0038130F00
7813070070130312F0A21401A27E91C7FC127C127EEA3FC013FC381FFFC06C13F800037F
C67FEB1FFF01001380EC1FC0140F1407EC03E0A200C01301A46C14C0A26C1303158000FC
EB070000EE130E38E7C03C38C1FFF838803FC01B2A7CA824>83 D<D8FFFE903803FFC0A2
D807E0903800FE00163800031530A26C6C5CA26D14E000005DA2017C495AA36D49C7FCA2
013F5B6D1306A26D6C5AA2ECC01C01071318A26D6C5AA214F001015BA2ECF8E001005BA2
EC7D80A2147F6EC8FCA2141EA3140C2A297EA72F>86 D<497E497EA3497EA3EB0CF0A2EB
1CF8EB1878A2497EA3497EA2EBE01F497E90B5FC481480EB8007A239030003C0A24814E0
00061301120E001F14F039FFC00FFFA2201F7F9E24>97 D<90380FE01090387FF8309038
F80E703803E00339078001F048C7FC121E15705A127C1530127812F81500A70078143012
7CA2123C6C1460A26C14C039078001803903E003003800F80EEB7FFCEB0FE01C207E9E22
>99 D<B61280A2380F000F1403140115C0A2140014C0A21500A2130113FFA213011300A2
1560A2140015C0A31401A21403EC0F80B6FCA21B1E7E9D20>101
D<B6FCA2380F001F1407801580A21401A214C1ECC000A3130113FFA213011300A491C7FC
A7EAFFF8A2191E7E9D1F>I<EAFFF0A2EA0F00B3A8EAFFF0A20C1E7E9D12>105
D<EAFFF8A2000FC7FCB01403A41407A21406140E141E147EB512FEA2181E7E9D1E>108
D<B4EC0FF86D131F000F1580A2D80DC01337A3D80CE01367A2017013C7A39038380187A2
90381C0307A3EB0E06A3EB070CA2EB0398A3EB01F0A2381E00E0D8FFC0EB7FF8A2251E7E
9D2B>I<B4EB0FFC1380000FEB01E09038C000C0EA0DE07F120C13787FA27F7FA2EB0780
EB03C0A2EB01E0EB00F0A21478143C143E141E140F1407A21403001E1301EAFFC014001E
1E7E9D24>I<EB0FE0EB7FFC3801F01F3903C0078039078003C0390F0001E0001EEB00F0
003E14F8003C1478007C147CA20078143C00F8143EA80078143C007C147CA2003C147800
3E14F86CEB01F06C14E039078003C03903E00F803901F83F0038007FFCEB0FE01F207E9E
25>I<B512C014F0380F007C141E141F801580A415005C141E147CEBFFF014C0EB00E014
7080143CA4143EA21506143F141F39FFF00F8CEC07FCC7EA01F01F1F7E9D23>114
D<007FB512E0A238780F01007013000060146000E0147000C01430A400001400B1497E38
03FFFCA21C1E7E9D22>116 D<39FFF00FFCA2390F0001E0EC00C0B3A26CEB0180138012
039038C003003801E0063800F81CEB3FF8EB0FE01E1F7E9D24>I<39FFE001FFA2390F80
00FC15706C6C13E0000314C0EBE0013901F00380000014006D5AEB7C0EEB3C0CEB3E1C6D
5AEB0F3014F06D5A6D5AABEB3FFCA2201E7F9D24>121 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb cmr7 7 5
/Fb 5 55 df<13FF000313E0380E03F0381800F848137C48137E00787F12FC6CEB1F80A4
127CC7FC15005C143E147E147C5C495A495A5C495A010EC7FC5B5B903870018013E0EA01
80390300030012065A001FB5FC5A485BB5FCA219267DA521>50 D<13FF000313E0380F01
F8381C007C0030137E003C133E007E133FA4123CC7123E147E147C5C495AEB07E03801FF
8091C7FC380001E06D7E147C80143F801580A21238127C12FEA21500485B0078133E0070
5B6C5B381F01F03807FFC0C690C7FC19277DA521>I<1438A2147814F81301A213031307
1306130C131C131813301370136013C012011380EA03005A120E120C121C5A12305A12E0
B612E0A2C7EAF800A7497E90383FFFE0A21B277EA621>I<0018130C001F137CEBFFF85C
5C1480D819FCC7FC0018C8FCA7137F3819FFE0381F81F0381E0078001C7F0018133EC7FC
80A21580A21230127C12FCA3150012F00060133E127000305B001C5B380F03E03803FFC0
C648C7FC19277DA521>I<EB0FE0EB3FF8EBF81C3801E0063803C01F48485AEA0F005A12
1E003E131E91C7FC5AA21304EB3FC038FCFFF038FDC078B4C67E143E48131E141FA24814
80A4127CA4003C1400123E001E131E143E6C133C6C6C5A3803C1F03801FFC06C6CC7FC19
277DA521>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc cmmi7 7 3
/Fc 3 117 df<3907801FC0390FE07FF03918F0E0F83930F1807CEBFB00D860FE133C5B
5B00C1147C5B1201A248485BA34A5AEA07C01660EC03E0A23A0F8007C0C0A2EDC1809138
03C300D81F0013C7EC01FE000EEB00F8231B7D9929>110 D<EB0FE0EB7FF8EBF03C3801
C00E0003131E3807803EA2143C000F1318EBE0006CB4FC14C06C13E06C13F06C13F81307
1301EA3C00007E1378A24813F05A387001E0EB03C0383C0F80381FFE00EA07F8171B7C99
1F>115 D<131C133EA25BA45BA4485AB512E0A23801F000485AA4485AA4485AA448C7FC
1460A214C0123EEB0180EB0300EA1E06EA1F1CEA0FF8EA03E013267EA419>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd cmmi10 10 4
/Fd 4 111 df<121C127FEAFF80A5EA7F00121C0909798817>58
D<1760177017F01601A21603A21607160FA24C7EA216331673166316C3A2ED0183A2ED03
03150683150C160115181530A21560A215C014011580DA03007FA202061300140E140C5C
021FB5FC5CA20260C7FC5C83495A8349C8FC1306A25BA25B13385B01F01680487E000716
FFB56C013F13FF5EA2383C7DBB3E>65 D<902603FFF893383FFF80496081D900079438FF
80000206DC01BFC7FCA2020E4C5A1A7E020C1606190CDA1C7E16FE4F5A02181630A20238
166162023016C1F00181DA703F158395380303F002601506A202E0ED0C076202C0151818
3001016D6C140F06605B028015C0A20103923801801FDD03005B140092380FC00649173F
4D91C8FC01065DA2010E4B5B4D137E130C6F6C5A011C17FEDCE1805B011802E3C7FCA201
3802E6130104EC5C1330ED03F8017016034C5C01F05CD807FC4C7EB500E0D9C007B512F0
1680150151397CB851>77 D<D803E0137F3A07F801FFE03A0E3C0781F03A1C3E1E00F826
383F387F00305B4A137C00705B00605BA200E090C712FC485A137EA20000140101FE5C5B
A2150300015D5B15075E120349010F133016C0031F13700007ED80605B17E0EE00C0000F
15014915801603EE0700001FEC0F0E49EB07FC0007C7EA01F02C267EA432>110
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe cmsy10 10 1
/Fe 1 15 df<EB0FE0EB7FFC497E0003EBFF803907F83FC0390FC007E0391F8003F0393F
0001F8003E130048147CA20078143C00F8143EA248141EA46C143EA20078143C007C147C
A26C14F8003F1301391F8003F0390FC007E03907F83FC06CB51280C6EBFE006D5AEB0FE0
1F207BA42A>14 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff cmti10 10 65
/Ff 65 124 df<EE3FFC4BB51280923907E007C092391F8001E0DB3F0013F0037E13034B
1307A24A5A18E04A48EB038094C7FCA314075DA4140F5DA3010FB7FCA25F903A001F8000
7EA217FE023F5C92C7FCA216015F5C147E16035FA214FE4A13075FA30101140F5F4AECC1
C0A2161F1783010316805CA2EF870013074A5CEE0F8EEE079EEE03FC010FEC00F04A91C7
FCA35C131FA2001C90CAFC127E5BEAFE3E133C137CEAF878EA78F0EA3FE0EA0F80344C82
BA2F>12 D<EA01E0EA07F0120F13F8121FA3120FEA07B0EA0030A21370136013E013C012
0113801203EA0700120E5A5A5A5A5A0D196EB919>39 D<150C151C153815F0EC01E0EC03
C0EC0780EC0F00141E5C147C5C5C495A1303495A5C130F49C7FCA2133EA25BA25BA2485A
A212035B12075BA2120F5BA2121FA290C8FCA25AA2123EA2127EA2127CA412FC5AAD1278
A57EA3121C121EA2120E7EA26C7E6C7EA212001E5274BD22>I<140C140E80EC0380A2EC
01C015E0A2140015F0A21578A4157C153CAB157CA715FCA215F8A21401A215F0A21403A2
15E0A21407A215C0140F1580A2141F1500A2143EA25CA25CA2495AA2495A5C1307495A91
C7FC5B133E133C5B5B485A12035B48C8FC120E5A12785A12C01E527FBD22>I<EA03C0EA
07F0120F121F13F8A313F0EA07B0EA003013701360A213E013C01201EA038013005A120E
5A5A5A5A5A0D197A8819>44 D<387FFFF8A2B5FCA214F0150579941E>I<120EEA3F8012
7F12FFA31300127E123C0909778819>I<EC03F8EC1FFEEC7C1F9138F80780D901E013C0
903903C003E0EB0780010F1301D91F0013F0A2133E137E017C130313FCA2485AA2000314
075BA2120716E049130F120FA34848EB1FC0A44848EB3F80A448C7EA7F00A3157E007E14
FEA25D00FE13015DA248495AA25D007C13075D4A5AA24AC7FC6C133E5C6C5B380F83E038
07FF80C648C8FC243A77B72A>48 D<15181538157815F0140114031407EC0FE0141F147F
EB03FF90383FEFC0148FEB1C1F13001580A2143FA21500A25CA2147EA214FEA25CA21301
A25CA21303A25CA21307A25CA2130FA25CA2131FA25CA2133FA291C7FC497EB61280A31D
3877B72A>I<EC03F8EC0FFE91383C0F809138F007C0903901E003E0D903C013F0903807
8001020013F8130E131E90391C6000FCEB3870EC30011370A213F013E0EC700300010160
13F813C014E0ECC00701C114F0903881800F018314E09039C7001FC001FEEB3F80D80078
140090C7127E5D4A5A4A5AEC07C0EC1F80023EC7FC14FCEB01F0EB07C0495A011EC8FC13
7C4914C0484813015B485A4848130348C71380000E1407001E140F48EC1F00D83FF85B39
7FFFC07E39783FFFFCEA700FD8F0075BD8E0015B6D13C0021FC7FC263A79B72A>I<EC03
FCEC1FFF91387E07C09138F003E0903903C001F0D9078013F849C7FC131E011C14FC133C
EB38C0EB78E0EB7060150101F014F813E0A2ECE003D971C013F090387F8007D91E0013E0
90C7EA0FC0ED1F80ED3F00157E5D49B45A4913E092C7FC9038000FC0EC03F014016E7E81
A381A5007E130100FE5CA31403485C00E05C14074A5A5D4A5A007049C7FC0078137E6C13
F8381E07F03807FF80D801FCC8FC263A78B72A>I<16E0ED01F01503A3150716E0A3150F
16C0A2151F1680A2ED3F00A3157EA2157C15FC5D14015D14035D14075D140F5D141F92C7
FC143EA25CECF81C153E903801F07EEB03E014C090380780FE130F49485A133EEB7C0113
7801F05BEA01E03803C003EA0FFE391FFFC3F04813FB267C01FF13403AF0003FFFE00060
1307C71400EC0FE05DA3141F5DA3143F92C7FCA4143E141C24487DB72A>I<133C137E13
FF5AA313FE13FCEA00701300B2120EEA3F80127F12FFA31300127E123C102477A319>58
D<14FCEB07FF90381F03C090383C01E090387000F049137048481378485A120748C7FC12
0E121E121C003C14F8003814F0007813011270007CEB03E000FE1307EC0FC0EC1F80147F
48EBFF00387001FCC6485AEB0FF0495AEB3F8049C7FCEA01FE485A13F0485A5B380F81C0
1301A2495A130791C7FC131EEA07FCEA01F0C9FCA81207EA1FC0123F127FA35B6CC8FC12
1E1D3C70BB2A>63 D<EE01C01603A21607160FA2161F83163FA2167F16FF16EF150116CF
ED038FA2ED070FA2150E151E151C1538A203707FA2EDE007A2EC01C014031580EC0700A2
140EA25CA25C027FB5FCA291B6FC9139E00007F849481303A2495A130791C7FC5B130E5B
A25B1378137013F0EA03F8486C4A7EB56C48B512F0A3343C7BBB3E>65
D<0107B612FCEFFF8018C0903B000FF0001FF04BEB07F81703021F15FC17014B14FEA202
3F1400A24B1301A2147F18FC92C7120318F84A140718F04AEC0FE0EF1FC00101ED3F80EF
7F004AEB01FEEE07F849B612E05F9139F80007F0EE01FC01076E7E177F4AEC3F80A2010F
16C0171F5CA2131F173F5CA2133FEF7F805C1800017F5D4C5A91C7485A5F49140FEE1FE0
494A5A00014AB45AB748C7FC16F816C037397BB83A>I<DB03FE130E92393FFF801E92B5
EAE03C913903FE01F0913A0FF000787CDA3FC0EB3CFC4AC7EA1FF802FE140FEB03FC4948
1407494815F049481403495A5C49C813E05B485A5B000317C0485AA2485A1880485A94C7
FCA2485AA3127F5BA312FF90CBFCA41738A217784816707E17F06C5E16015F16036C6C4A
5A94C7FC001F150E6D141E000F5D6D5C6C6C495A6C6CEB03C0D801FEEB0F8027007F807E
C8FC6DB45A010F13E0010090C9FC373D74BA3B>I<0103B612FEEFFFC018F0903B0007F8
000FF84BEB03FCEF00FE020F157FF03F804B141F19C0021F150F19E05D1807143F19F05D
A2147FA292C8FCA25C180F5CA2130119E04A151FA2130319C04A153FA201071780187F4A
1600A2010F16FEA24A4A5A60011F15034D5A4A5D4D5A013F4B5A173F4A4AC7FC17FC017F
EC03F84C5A91C7EA1FC04949B45A007F90B548C8FCB712F016803C397CB83F>I<0107B8
FCA3903A000FF000034BEB007F183E141F181E5DA2143FA25D181C147FA29238000380A2
4A130718004A91C7FC5E13015E4A133E167E49B512FEA25EECF8000107147C163C4A1338
A2010F147818E04A13701701011F16C016004A14031880013F150718004A5CA2017F151E
173E91C8123C177C4915FC4C5A4914070001ED7FF0B8FCA25F38397BB838>I<0107B712
FEA3903A000FF000074B1300187C021F153CA25DA2143FA25D1838147FA292C8FCEE0380
4A130718004A91C7FCA201015CA24A131E163E010314FE91B5FC5EA2903807F800167C4A
1378A2130FA24A1370A2011F14F0A24A90C8FCA2133FA25CA2137FA291CAFCA25BA25B48
7EB6FCA337397BB836>I<DB03FE130E92393FFF801E92B5EAE03C913903FE01F0913A0F
F000787CDA3FC0EB3CFC4AC7EA1FF802FE140FEB03FC49481407494815F049481403495A
5C49C813E05B485A5B000317C0485AA2485A1880485A94C7FCA2485AA3127F5BA312FF90
CBFC0307B512E0A392390007FC00705A16075FA36C150F5FA36C6C141FA2001F5E6D143F
6C7E167F6C6C4A5A6C6CEB03EFD801FEEB07C73A007FC03F0790273FFFFC03C7FC010F01
F0C8FC01001380373D74BA40>I<0103B5D8F80FB512E0A390260007F8C7381FE0004B5D
A2020F153F615DA2021F157F96C7FC5DA2023F5D605DA2027F14016092C7FCA24A140360
5CA249B7FC60A202FCC712070103150F605CA20107151F605CA2010F153F605CA2011F15
7F95C8FC5CA2013F5D5F5CA2017F14015F91C7FC491403007FD9FE01B512F8B55BA24339
7CB83E>I<0103B512F8A390390007F8005DA2140FA25DA2141FA25DA2143FA25DA2147F
A292C7FCA25CA25CA21301A25CA21303A25CA21307A25CA2130FA25CA2131FA25CA2133F
A25CA2137FA291C8FC497EB6FCA25C25397CB820>I<0207B512F0A391390007FC006F5A
A215075EA3150F5EA3151F5EA3153F5EA3157F93C7FCA35D5DA314015DA314035DA31407
A25DA2140FA2003F5C5A141F485CA24A5A12FC00E049C8FC14FE00705B495A6C485A381E
0FC06CB4C9FCEA01F82C3B78B82C>I<0103B500F890387FFFE0A21AC090260007F8C738
0FFC004B15E061020F4BC7FC183E4B5C18F0021F4A5A4D5A4BEB0F804DC8FC023F143C5F
4B5B4C5A027FEB07C04CC9FCED001E5E4A5BED01FCECFE0315070101497E151FECFC7C4B
7E903903FDE07FDAFFC07F1580ED003F49488014F84A131F83130F160F4A801607011F81
A24A130383133F16014A80A2017F6E7EA291C8FC494A7F007F01FE011F13FCB55CA24339
7CB840>I<0107B512FCA25E9026000FF8C7FC5D5D141FA25DA2143FA25DA2147FA292C8
FCA25CA25CA21301A25CA21303A25CA21307A25CA2130F170C4A141CA2011F153C17384A
1478A2013F157017F04A14E01601017F140317C091C71207160F49EC1F80163F4914FF00
0102071300B8FCA25E2E397BB834>I<902607FFF8923807FFF0614F13E0D9000FEFF000
4F5AA2021F167FF1EFC0141DDA1CFCEC01CF023C16DF9538039F800238ED071FA20278ED
0E3F97C7FC0270151CA202F04B5AF0707E14E0037E14E0010117FE4D485A02C0EC0380A2
0103ED0701610280140EA20107ED1C0305385B14006F137049160705E05B010EEC01C0A2
011E913803800F61011CEC0700A2013C020E131F4C5C1338ED1FB80178163F04F091C8FC
01705CA201F04A5B187E00015DD807F816FEB500C09039007FFFFC151E150E4C397AB84A
>I<902603FFF891B512E0A281D90007923807F8006F6E5A61020F5E81DA0E7F5DA2021E
6D1307033F92C7FC141C82DA3C1F5C70130EEC380FA202786D131E0307141C147082DAF0
03143C70133814E0150101016E1378030014705C8201036E13F0604A1480163F010715C1
041F5B91C7FC17E149EC0FE360010E15F31607011E15FF95C8FC011C80A2013C805F1338
160013785F01F8157CEA03FC267FFFE0143CB51538A243397CB83E>I<ED03FE92383FFF
C09238FC07F0913903E001F891390F80007C023FC77E027E8002F815804948EC0FC0EB07
E04948EC07E0131F4A15F049C81203137E01FE16F8485AA2485AA2485AA2120F5B001F16
075B123FA34848ED0FF0A448C9EA1FE0A3EF3FC0A21880177F18005F5F16015F6C4B5A4C
5AA24C5A6C4B5A6D4A5A001F93C7FC6D147E000F5D6C6CEB03F06C6C495A6C6CEB0F806C
6C013FC8FC90383F01FC90381FFFE0010190C9FC353D74BA40>I<0107B612F817FF1880
903B000FF0003FE04BEB0FF0EF03F8141FEF01FC5DA2023F15FEA25DA2147FEF03FC92C7
FCA24A15F817074A15F0EF0FE01301EF1FC04AEC3F80EFFE0001034A5AEE0FF091B612C0
4CC7FCD907F8C9FCA25CA2130FA25CA2131FA25CA2133FA25CA2137FA291CAFCA25BA25B
1201B512FCA337397BB838>I<ED03FE92383FFFC09238FC07F0913903E001F891390FC0
007C023FC77E027E804A1580D901F0EC0FC013074948EC07E0495A4A15F049C8FC491503
01FE16F8485AA2485AA2485AA2120F491507121FA2485AA34848ED0FF0A448C9EA1FE0A3
EF3FC0A21880177F4817005F5F16015F007F4B5A5F91380F800791393FE00FE06C903970
601FC0902680E0305B261F81C049C7FC913880187ED80FC35C3A07E30019F00003EC1FE0
D801FB14806CB46C48C8FC90263F81FC13186DB45A01010138133890C7003C1330177017
F05FED3E03ED3F07EEFFC05FA294C7FC5E6F5A6F5AED07E0354B74BA40>I<0103B612F0
17FEEFFF80903B0007F8003FC04BEB0FF01707020FEC03F8EF01FC5DA2021F15FEA25DA2
143FEF03FC5DA2027FEC07F818F092C7120F18E04AEC1FC0EF3F004A14FEEE01F80101EC
0FE091B6128004FCC7FC9138FC003F0103EC0F80834A6D7E8301071403A25C83010F1407
5F5CA2011F140FA25CA2133F161F4AECE007A2017F160F180E91C7FC49020F131C007F01
FE153CB5913807F078040313F0CAEAFFE0EF3F80383B7CB83D>I<92383FC00E913901FF
F01C020713FC91391FC07E3C91393F001F7C027CEB0FF84A130749481303495A4948EB01
F0A2495AA2011F15E091C7FCA34915C0A36E90C7FCA2806D7E14FCECFF806D13F015FE6D
6D7E6D14E0010080023F7F14079138007FFC150F15031501A21500A2167C120EA3001E15
FC5EA3003E4A5AA24B5AA2007F4A5A4B5A6D49C7FC6D133ED8F9F013FC39F8FC03F839F0
7FFFE0D8E01F138026C003FCC8FC2F3D7ABA2F>I<0007B812E0A25AD9F800EB001F01C0
49EB07C0485AD900011403121E001C5C003C17801403123800785C00701607140700F017
00485CA2140FC792C7FC5DA2141FA25DA2143FA25DA2147FA292C9FCA25CA25CA21301A2
5CA21303A25CA21307A25CA2130FA25CEB3FF0007FB512F8B6FCA2333971B83B>I<003F
B539800FFFFEA326007F80C7EA7F8091C8EA3F00173E49153CA2491538A2000116781770
5BA2000316F05F5BA2000715015F5BA2000F15035F5BA2001F150794C7FC5BA2003F5D16
0E5BA2007F151E161C90C8FCA2163C4815385A16781670A216F04B5A5E1503007E4A5A4B
C8FC150E6C143E6C6C5B15F0390FC003E03907F01FC00001B5C9FC38007FFCEB1FE0373B
70B83E>I<B500F8903803FFFEA218FCD803FEC8EA7FC049ED3F000001163E173C17385F
A25F16015F6D4A5AA200004BC7FC5E160E5EA25EA25E5EA26D495A7F4B5A150793C8FC15
0EA25D153C15385D1480013F5B14815DEC8380A20287C9FCA2148E149E149C14F8A26D5A
A25C5CA25CA291CAFC131EA2373B6FB83E>I<B5D8F80FB590381FFFF06102F018E0D807
FEC7D87FE0903803FE00D803F8DA3F806D5AF100F0A24F5A621903621907047F92C7FC19
0E16FF4B5DA2DB03BF5C7F0001DA073F5CA2030E5D83DB1C1F495A180303385D4EC8FC15
7003F0140E15E0DA01C05CA2DA03805CA2DA07005CA2020E5D17C14A5DEFC3805C027802
C7C9FC14704A14CE13FE6C6C4814DCA24A14F8A291C75B160F495D5F5B5F5B4992CAFCA2
49140E4C3B6FB853>I<B500F8903803FFFEA3D803FEC8EA7FC00001EE3F00173E177800
005E6D5D4C5A6D14036E495A94C7FC160E013F5C6E133C5E011F14706E5B4B5A010F1303
6E485A93C8FC150E01075BECF83C5D01035B6E5AECFDC06DB45AA292C9FC5C6D5A1301A3
5C1303A35C1307A35C130FA35C131FA2133F001FB57E5AA237396FB83E>89
D<14F8EB07FE90381F871C90383E03FE137CEBF801120148486C5A485A120FEBC001001F
5CA2EA3F801403007F5C1300A21407485C5AA2140F5D48ECC1C0A2141F15831680143F15
87007C017F1300ECFF076C485B9038038F8E391F0F079E3907FE03FC3901F000F0222677
A42A>97 D<133FEA1FFFA3C67E137EA313FE5BA312015BA312035BA31207EBE0F8EBE7FE
9038EF0F80390FFC07C013F89038F003E013E0D81FC013F0A21380A2123F1300A214075A
127EA2140F12FE4814E0A2141F15C05AEC3F80A215005C147E5C387801F8007C5B383C03
E0383E07C0381E1F80D80FFEC7FCEA01F01C3B77B926>I<147F903803FFC090380FC1E0
90381F0070017E13784913383901F801F83803F003120713E0120FD81FC013F091C7FC48
5AA2127F90C8FCA35A5AA45AA3153015381578007C14F0007EEB01E0003EEB03C0EC0F80
6CEB3E00380F81F83803FFE0C690C7FC1D2677A426>I<ED01F815FFA3150316F0A21507
A216E0A2150FA216C0A2151FA21680A2153FA202F81300EB07FE90381F877F90383E03FF
017C5BEBF80112013803F00048485B120FEBC001121F5DEA3F801403127F01005BA21407
5A485CA2140FA248ECC1C0A2141F15C3ED8380143F1587007C017F1300ECFF076C485B90
38038F8E391F0F079E3907FE03FC3901F000F0253B77B92A>I<147F903803FFC090380F
C1E090383F00F0017E13785B485A485A485A120F4913F8001F14F0383F8001EC07E0EC1F
80397F81FF00EBFFF891C7FC90C8FC5A5AA55AA21530007C14381578007E14F0003EEB01
E0EC03C06CEB0F806CEB3E00380781F83803FFE0C690C7FC1D2677A426>I<ED07C0ED1F
F0ED3E38ED7C3CEDF8FC15F9140115F1020313F8EDF0F0160014075DA4140F5DA4141F5D
010FB512C05B16809039003F800092C7FCA45C147EA414FE5CA413015CA413035CA41307
5CA4130F5CA3131F5CA391C8FC5B121CEA7E3EA2EAFE3C137C1378EAF8F01278EA3FC0EA
0F80264C82BA19>I<EC07C0EC3FF09138FC38E0903901F01FF0EB03E0903807C00FEB0F
80011F1307D93F0013E05B017E130F13FE4914C01201151F1203491480A2153F12074914
00A25DA249137EA215FEA25D00031301140314076C6C485A0000131FEB787BEB3FF39038
0FC3F0EB00031407A25DA2140F5D121C007E131F5D00FE49C7FC147E5C387801F8387C07
E0381FFF80D803FEC8FC24367CA426>I<EB03F0EA01FFA3EA00075CA3130F5CA3131F5C
A3133F91C8FCA35B90387E07F0EC1FFCEC783E9038FFE01F02C01380EC800F1400485A16
C05B49EB1F8012035BA2153F000715005BA25D000F147E5B15FE5D121FD98001131C15F8
163C003F01031338010013F0A216704814E0007E15F016E0EDE1C000FE903801E3804890
3800FF000038143C263B7BB92A>I<EB01C0EB07E014F0130F14E01307EB038090C7FCAB
13F0EA03FCEA071EEA0E1F121CA212385B1270A25BEAF07E12E013FEC65AA212015B1203
A25B12075BA2000F13E013C013C1001F13C01381A2EB83801303EB0700A2130E6C5AEA07
F8EA01E0143879B619>I<150E153F157FA3157E151C1500ABEC1F80EC7FC0ECF1F0EB01
C090380380F813071401130F130E131EEB1C03133C013813F0A2EB0007A215E0A2140FA2
15C0A2141FA21580A2143FA21500A25CA2147EA214FEA25CA21301A25CA213035C121C38
7E07E0A238FE0FC05C49C7FCEAF83EEA787CEA3FF0EA0FC0204883B619>I<EB03F0EA01
FFA3EA00075CA3130F5CA3131F5CA3133F91C8FCA35B017EEB0F80ED3FE015F09039FE01
C1F09038FC0387EC0707140E0001011C13E0EBF83891383003800270C7FC00035BEBF1C0
EBF38001FFC8FCEA07FC7FEBFFC0EBE7F8380FE1FCEBC07E147F80001F809039801F81C0
A21583003F013F138001001303A21507481500007E133EEC1E0E151E00FE6D5A48EB07F8
0038EB01E0243B7BB926>I<EB0FC0EA07FFA3EA001F1480A2133FA21400A25BA2137EA2
13FEA25BA21201A25BA21203A25BA21207A25BA2120FA25BA2121FA25BA2123FA290C7FC
A25AA2EA7E0EA212FE131EEAFC1CA2133C133812F81378EA7870EA7CE0121FEA0F80123B
79B915>I<D801E001FEEB07F03C07F803FF801FFC3C0E3C0F07C0783E3C1E3E3C03E1E0
1F261C1F78D9F3C013803C383FF001F7800F02E01400007801C013FE007018C002805B4A
4848EB1F80EAF07FD8E07E5CA200000207143F01FE1700495CA2030F5C0001177E495C18
FE031F5C120349DA8001131C18F8033F153C00070403133849020013F0A24B1570000F17
E049017E15F019E003FEECE1C0001FEE01E34949903800FF000007C70038143C3E2679A4
44>I<D801E013FE3A07F803FF803A0E3C0F07C03A1E3E3C03E0261C1F787F39383FF001
14E0007813C000708114804A485AEAF07FEAE07EA20000140701FE5C5BA2150F00015D5B
151F5E12034990383F8380160316070007027F130049137EA2160E000F147C49141E161C
5E001FEC3C7849EB1FE00007C7EA0780292679A42F>I<147F903803FFC090380FC1F090
381F00F8017E137C5B4848137E4848133E0007143F5B120F485AA2485A157F127F90C7FC
A215FF5A4814FEA2140115FC5AEC03F8A2EC07F015E0140F007C14C0007EEB1F80003EEB
3F00147E6C13F8380F83F03803FFC0C648C7FC202677A42A>I<9039078007C090391FE0
3FF090393CF0787C903938F8E03E9038787FC00170497EECFF00D9F0FE148013E05CEA01
E113C15CA2D80003143FA25CA20107147FA24A1400A2010F5C5E5C4B5A131F5EEC80035E
013F495A6E485A5E6E48C7FC017F133EEC70FC90387E3FF0EC0F8001FEC9FCA25BA21201
A25BA21203A25B1207B512C0A3293580A42A>I<ECF803903807FE0790381F871F90383E
03BF017C13FEEBF80112013803F000484813FC120F5B001F130115F8EA3F80A2007F1303
010013F0A34813074814E0A3140F4814C0A3141F1580143FA2007C137FECFF006C5AEB03
BF381F0F7F3807FE7EEA01F0C7FC14FE5CA313015CA313035C130748B512C0A3203577A4
26>I<3903C003F0390FF01FFC391E783C0F381C7C703A3C3EE03F8038383FC0EB7F8000
78150000701300151CD8F07E90C7FCEAE0FE5BA2120012015BA312035BA312075BA3120F
5BA3121F5BA3123F90C9FC120E212679A423>I<14FE903807FF8090380F83C090383E00
E04913F00178137001F813F00001130313F0A215E00003EB01C06DC7FC7FEBFFC06C13F8
14FE6C7F6D13807F010F13C01300143F141F140F123E127E00FE1480A348EB1F0012E06C
133E00705B6C5B381E03E06CB45AD801FEC7FC1C267AA422>I<EB0380EB07C0130FA413
1F1480A3133F1400A35B137E007FB5FCA2B6FC3800FC00A312015BA312035BA312075BA3
120F5BA3121FEB801CA2143C003F1338EB0078147014F014E0EB01C0EA3E03381F078038
0F0F00EA07FCEA01F0183579B31C>I<13F8D803FEEB01C0D8078FEB03E0390E0F800712
1E121C0038140F131F007815C01270013F131F00F0130000E015805BD8007E133FA201FE
14005B5D120149137EA215FE120349EBFC0EA20201131E161C15F813E0163CD9F0031338
14070001ECF07091381EF8F03A00F83C78E090393FF03FC090390FC00F00272679A42D>
I<01F0130ED803FC133FD8071EEB7F80EA0E1F121C123C0038143F49131F0070140FA25B
D8F07E140000E08013FEC6485B150E12015B151E0003141C5BA2153C000714385B5DA35D
A24A5A140300035C6D48C7FC0001130E3800F83CEB7FF8EB0FC0212679A426>I<01F015
07D803FC903903801F80D8071E903907C03FC0D80E1F130F121C123C0038021F131F49EC
800F00701607A249133FD8F07E168000E0ED000313FEC64849130718000001147E5B03FE
5B0003160E495BA2171E00070101141C01E05B173C1738A217781770020314F05F000301
0713016D486C485A000190391E7C07802800FC3C3E0FC7FC90393FF81FFE90390FE003F0
322679A437>I<903907E007C090391FF81FF89039787C383C9038F03E703A01E01EE0FE
3803C01F018013C0D8070014FC481480000E1570023F1300001E91C7FC121CA2C75AA214
7EA214FEA25CA21301A24A1370A2010314F016E0001C5B007E1401010714C000FEEC0380
010F1307010EEB0F0039781CF81E9038387C3C393FF03FF03907C00FC027267CA427>I<
13F0D803FCEB01C0D8071EEB03E0D80E1F1307121C123C0038140F4914C01270A249131F
D8F07E148012E013FEC648133F160012015B5D0003147E5BA215FE00075C5BA214015DA3
14035D14070003130FEBF01F3901F87FE038007FF7EB1FC7EB000F5DA2141F003F5C4813
3F92C7FC147E147C007E13FC387001F8EB03E06C485A383C1F80D80FFEC8FCEA03F02336
79A428>I<903903C0038090380FF007D91FF81300496C5A017F130E9038FFFE1E9038F8
3FFC3901F007F849C65A495B1401C7485A4A5A4AC7FC141E5C5C5C495A495A495A49C8FC
131E5B49131C5B4848133C48481338491378000714F8390FF801F0391FFF07E0383E1FFF
D83C0F5B00785CD8700790C7FC38F003FC38E000F021267BA422>I<B712FCA226027996
2A>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fg cmss12 12 39
/Fg 39 122 df<12FFA8080877871B>46 D<12FFA81200B3AA12FFA8082C77AB1B>58
D<EDFF804A7FA34A7FA3913807EFF0A215E7020F7F15C7A2021F7F15C391383F83FEA215
81027F7F1501814A805CA201016E7E5CA201036E7E5CA201076E7E5CA2010F6E7E5C011F
8116075C013F8116035C017F818291B7FC90B87EA34883A201FCC8127F0003707EA24848
82171F5B000F83170F5B001F8317075B003F8317035B007F838390C9FC48701380A23945
7DC440>65 D<ED3FFE0203B512F0020F14FE023FECFF8091B7FC5B49D9E0071300010F90
C7FCD91FFC141F49481407D97FE0804A91C7FC495A4890CAFC5A5B485AA2485AA2485AA2
485AA3485AA5485AAD6C7EA56C7EA36C7EA26C7EA26C7EA26C7E7F7E6C6D15806D6C1401
6E1403D93FF8140F6D6CEC1FC06DB4147F01039038E003FF6D90B612806DEDFE00023F5C
020F14F0020314C09126003FFCC7FC32497AC63E>67 D<B612FEEDFFE016F816FE707E83
902680000713F003007FEE3FFCEE0FFE1607707E7013807013C0177FEF3FE018F0171F17
0F18F8A2EF07FCA2170318FEA31701A218FFAC18FEA21703A3EF07FCA3EF0FF8A2EF1FF0
A2EF3FE0177FEFFFC04C13805E4C13004C5AEE3FFCEEFFF803075B90B75A17804CC7FC16
F816E04BC8FC384578C446>I<B812F0A60180C9FCB3A690B71280A60180C9FCB3A890B7
12F8A72D4578C43A>I<ED3FFC4AB512E0020F14F8023F14FF91B712C04916E049EBE007
4990C7127FD91FFCEC1FC0494814074A1403D97FC01401494814004817004890CAFC5B48
5AA2485AA2485AA2485AA3485AA5485AAA4BB512F0A36C7EA392C7120FA26C7EA36C7EA2
6C7EA26C7EA26C7E7F6C7F7E6D7EEB3FF0806D7ED907FF143F6D9038E007FF6D90B6FC6D
16E0023F1500020F14FC020114E09126003FFCC7FC34497AC641>71
D<EAFF80B3B3B3AF094577C41B>73 D<D8FFF0933803FFC06D5EA36D5EA3017EEE1FBFA2
017F163FA26D173F6E157FA2011F167E6E15FEA26E1401010F16FCA26E1403010716F8A2
6E1407010316F0A26E140F010116E06E141FA2010016C06E143FA26E15806F137FA2023F
15006F5B021F5CA2EDE001020F5CA2EDF00302075CA2EDF80702035CA26E6C485AA36E6C
485AA392387F3F80A3033F90C7FCA2ED1FFEA36F5AA36F5A92C9FCA2424577C455>77
D<D8FFF8ED1FE07FA27FA27FA26D7EA26D7EA280131F80130F80130780130380A26D7EA2
6D7FA26E7EA2143F81141F81140F81140781140381140181801680157F16C0A2ED3FE0A2
ED1FF0A2ED0FF8A2150716FC150316FE150116FF81179F167FA2EE3FDFA2EE1FFFA282A2
82A282334578C444>I<B612FCEDFFC016F016FC16FF1780902680000F13C0030113E092
38007FF0EE1FF8160FEE07FCA2EE03FE1601A217FFA282A45EA217FEA21603EE07FCA2EE
0FF8161FEE7FF0923801FFE0030F13C090B71280170016FC16F016C003FCC7FC0180C9FC
B3AB304578C43E>80 D<B612F8EDFF8016F016FC82707E902680000F7F03017F6F6C7EEE
1FF8707E1607707EA2160183A282A35EA25F1603A24C5A160F4C5AEE7FF04B485A030F5B
90B75A4CC7FC5E16F0168093C8FCEB800082157F82153F826F7EA26F7E15078215038215
01826F7FA2707E163F83161F83707EA2707EA2707E160183701380A2EF7FC0324577C43F
>82 D<EC3FF80103B57E010F14E0013F14F84914FE90B7FC5A48EBC00F4890380001FED8
0FFCEB007E49141E4848140E484814064991C7FCA2485AA77FA26C7E7F7F6C7E6CB4FC14
E06C13FE6CEBFFC06C14FC6C14FF6D14C06D80010F14F8010380D9003F7F02037FEC007F
030F1380030313C01500167FEE3FE0A2161F17F0A2160FA7EE1FE012600070153F007816
C0007E157F007FEDFF80D8FFE049130001F813079039FF803FFE6C90B55A001F5D00075D
000115C06C6C5C010F01FCC7FC010013E02C497CC636>I<BA12F0A6C8D83FE0C8FCB3B3
B3A93C457DC443>I<B46CED7F80B3B3AF6C6CEDFF00A46C6C4A5AA26C6C4A5A16076C6C
5D6C6C140F6D4A5A6C6CEC7FE06C9039C001FFC06CD9F8075B6DB6C7FC011F5C6D14F801
0314E001001480DA0FFCC8FC314778C442>I<D8FFC0DBFFC0ED7F80007FF3FF00A25E6C
6C705D1B01A26D913803F7F0001F505AA2EE07E76C6C705D1B0717E3160F6C6CDBC3FC5D
1B0F161F6C6CDBC1FE5D1B1F1781163F6C6CDB80FF5D1B3F5F5E6C6D6F6C5C1B7F167E6D
6C01FE6E91C7FC063F5CA24B5AD93FE0705B061F1301A2011F49485E02F016F0060F1303
A2010F49485E02F8ED07F81A0701074A5E150F02FCED03FC1A0F01034A5EA2031FEC01FE
02FE171F01014A5E1800A2010049C800FF5B02FF173F197FA2DA7F3E94C8FCA2037EED3F
BFDA3F7C16BE03FC16FE191FA26E485EA2190F020F5F59457FC45C>87
D<EB07FE90387FFFC00003B57E000F14F84880819038F803FFEB8001001EC71380001814
7F0010EC3FC0C8FC16E0151FA8EC7FFF010FB5FC133F48B6FC5A000FEBF01F381FFE00EA
3FF8EA7FE05B485A90C7FCA4153F7F6C6C137F9038E001FFEBF80F6CB6FC7E15DF6C141F
000313F8C60180C7FC232F7CAD2F>97 D<B4FCB3A6EC3FC0903803FFF0010F13FC013F7F
497F90B61280D9FE0313C0D9F00013E049137F49EB1FF05B90C7EA0FF8150716FC1503A3
16FE1501AAED03FCA3150716F8150F16F06D131F6DEB3FE06D137F9039F001FFC0D9FC07
138090B612006D5B6D5B6D5B010713E0C790C7FC274679C432>I<EC7FE0903803FFFE01
0FEBFF80013F14E04914F090B6FC48EB801F3A03FE0003E0484813004848146049140048
5AA2485AA2485AA390C9FC5AAA6C7EA37F123FA26C6C14106D14306C6C14F06C6C13016C
6C13079038FF803F6C90B5FC6C6C14E06D14806D1400010713F8010013C0242F7DAD2B>
I<ED01FEB3A6EB03FC90380FFFC1013F13F14913F948B6FC5AECC07F48EB001FD80FFC13
07484813035B48481301A25B127F5BA348C7FCAA7F127FA36C7EA26D13036C7E1507D80F
FC130F6C6C133F9038FF80FF6C90B5FC6C14FD6C14F1013F13E16D1381D903FCC7FC2746
7DC432>I<EB01FE903807FFC0011F13F0017F7F90B57E488048EB03FF3807FC004848EB
7F8049133F4848EB1FC0150F484814E0491307127FA290C7FCED03F0B7FCA648C9FCA37E
A27EA27F123F7FA26C7E6D14106C6C14706C6CEB01F06C6C13079038FF803F6C90B5FC6C
15E0013F14806DEBFE00010713F8010013C0242F7DAD2B>I<EC1FF0ECFFFE5B13075B5B
90383FF01EECC00290387F800091C7FC13FEA21201AEB61280A6D801FEC7FCB3B3A21F46
7EC51E>I<D901FCEB07E090390FFF80FF013F13E74990B512F090B7FC5A2603FE03EBC0
002607F80090C7FC497F000F8149133FA248486D7EA86C6C495AA26D137F000792C7FC6D
5B3903FE03FE90B55A485C485C5D018F1380261F81FCC8FC0180C9FCA47F7F6CB512F8ED
FF806C15E016F86C81488148815A273FE0000F1380D87F80130090C8127F48ED3FC04815
1FA5007FED3F806D147F6C6CECFF0001F813076CB4EB3FFE6C90B55A6C5D000115E06C6C
1480011F49C7FC010113E02C427DAC31>I<B4FCB3A6EC7FC0903801FFF801077F011F7F
497F491480EBFE03D9F80013C049137F49133F4914E0151F5BA390C7FCB3AC234579C432
>I<EAFF80A9C7FCB0EA7F80B3B3A809457AC417>I<B4FCB3A7ED7FE0EDFFC04A13804A13
004A5A4A5A4A5A5D4A5A4A5A4A5A4990C7FC495A1307495A495A495A137F13FF8080A2EB
FDFEEBF9FF13F0496C7E01C07F143F01807F496C7E140F8114076E7E8114016E7E168015
7FED3FC016E0151FED0FF016F8254579C42F>107 D<12FFB3B3B3AF084579C417>I<DA7F
C0EB0FF827FF01FFF8EB3FFF01076D90B51280011FD9FE0314C0496D4814E049028F14F0
D9FE0390389FC07FD9F8009039FF001FF8496D48130F496D481307494A14FC031F140349
5CA390C75BB3AC3E2D79AC4D>I<EC7FC039FF01FFF801077F011F7F497F491480EBFE03
D9F80013C049137F49133F4914E0151F5BA390C7FCB3AC232D79AC32>I<EC7F80903803
FFF0010F13FC013F13FF498090B67E4801C07F3A03FE001FF048486D7E48486D7E491303
48486D7E491300003F814980007F1680A390C8123F4816C0AA6C6CEC7F80A36D14FF003F
16006D5B001F5D6D13036C6C495A6C6C495A6D131F3A03FFC0FFF06C90B55A6C5D013F91
C7FC6D5B010313F09038007F802A2F7DAD31>I<EC3FC039FF03FFF0010F13FC013F7F49
7F90B61280D9FE0713C0D9F00013E049137F49EB3FF049131F90C7EA0FF8A2ED07FCA215
03A216FE1501AAED03FCA3150716F8150FED1FF07F6DEB3FE06D13FF6D4813C0D9FC0F13
8090B612006D5B6D5B6D5B010713E0010090C7FC91C8FCB2274079AC32>I<141F00FE13
FF13035B131F5B5BEBFFF0148038FFFE005B5B5B5B5BA25BA390C7FCB3A8182D79AC21>
114 D<EB3FF848B5FC4814C0000F14F04814F85AEBE00F397F8001F090C7127000FE1430
1500A57E7FEA7FE013FC383FFFE06C13FC14FF000714806C14E06C14F06C7E010713F890
38003FFC14071403EC01FEA21400A412400070EB01FC1278007E130339FFE01FF890B512
F0A26C14E0001F14800003EBFE0038003FF01F2F7DAD25>I<EA01FEADB612F0A6D801FE
C7FCB3AB7F150815386CEB81F8ECFFFC7FA26D13F06D138090380FF8001E3A7EB823>I<
B4EC1FE0B3AE153FA2157FA26D13FF1403387FE00F90B6FC6C14DF151F6C13FC000713F0
000190C8FC232D79AB32>I<B415FFA27F007FEC01FEA27F003FEC03FCA27F001FEC07F8
A26C6C14F0150FA26C6CEB1FE0A36C6CEB3FC0A27F0001EC7F80A26C6C14005DA26D5B14
81A2013F5B14C114C3011F5B14E314E7010F5BA201075B14F7A26DB45AA36D5BA2282C7E
AB2D>I<B46CD91FE0EB01FE007F6FEB03FCA2153F6C6C6EEB07F8153D157D6C6C17F0DB
7CFC130FA215FC6C6C6EEB1FE015F81401D807F8027E14C0047F133F15F01403D803FC6E
1480EF807F15E000010107160001FE141F715A15C00000010F5D01FF140F17E1017F0180
5CA2021F1307D93F9FECF3F815001603A2D91F9E5D14BE1601010F5E02FC14FF82A26D48
5DA23F2C7FAB42>I<D87FC0EC7FC06C6CECFF80001F16006D5B6C6C495A6C6C495A6C6C
5C00014A5A6C6C131F6E485AD97FC05B6D6C485A011F49C7FCEB0FF1903807FBFEECFFFC
6D5B6D5B7F6E5A5D6E5A4A7E4A7E81497F903803FBFCEB07F990380FF0FE4A7E011F6D7E
49486C7E49486C7EEBFF006F7E48486D7E48488000076E7E48481301496D7E4848158000
3FED7FC04848EC3FE04848EC1FF02C2C80AB2D>I<B415FFA27F007FEC01FE7F123FED03
FC7F001FEC07F87F120FED0FF07F12076DEB1FE0120316C06C6C133FA216806C6C137FA2
6D14006E5A5D133F14C1011F5BA2ECE1F8EB0FE3A201075B14F3A2903803F7E0A201015B
A2EB00FF5DA2147F92C7FCA2147E14FEA25C1301A25C13035C13075CEA400F38781FC0EA
7FFF5C91C8FC5B5BEA0FF028407EAB2D>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fh cmtt10 10 22
/Fh 22 127 df<121FEA3F80EA7FC0EAFFE0A5EA7FC0EA3F80EA1F000B0B708A2C>46
D<1507ED0F80151FA2153F16005D157E15FE5D14015D14035DA214075D140F5D141F5D14
3F92C7FC5C147E14FE5CA213015C13035C13075C130F5C131F5CA2133F91C8FC5B137E13
FE5B12015B12035B12075BA2120F5B121F5B123F90C9FC5A127E12FE5AA25A127821417B
B92C>I<EB0FFC90387FFF8048B512E0000714F84880391FF807FEEBC0004848137F6D7F
1680151FA26C5A6CC7FCC8FC153F16005D15FE14014A5AEC1FF890381FFFF0495BA215F8
6D7F90380007FEEC00FF81ED3F80ED1FC0150FA216E01507A2123C127EB4FC150F16C0A2
48141F007FEC3F806DEB7F006C6C5B391FF807FE6CB55A6C5C6C14E0C66C1380D90FFCC7
FC23357CB32C>51 D<EC07F04A7E141F143FA2147EA214FCEB01F8A2EB03F0EB07E0A2EB
0FC0EB1F80A2EB3F00137EA25B485AA2485A5B1207485AA2485A48C7FCA2127E5AB712FC
16FEA36C15FCC8EAF800AA91387FFFF091B512F8A36E13F027347EB32C>I<121FEA3F80
EA7FC0EAFFE0A5EA7FC0EA3F80EA1F00C7FCAE121FEA3F80EA7FC0EAFFE0A5EA7FC0EA3F
80EA1F000B2470A32C>58 D<EC7F80903803FFE0010F7F013F7F497F9038FFC0FE3901FE
007FD803F87F4848EB1F809038E00FCF390FC03FFF48484813C091B5FCEA3F01393E03F8
7F903907F03FE0007EEBE01F397C0FC00FEC8007A2EAFC1F00F8EB0003A900FCEB8007D8
7C0F14C0A2ECC00F3A7E07E01F80003EEBF03F903903F87F00393F01FFFED81F805B6E5A
6C6C6C5A3907E00FC09039F00007C06C6CEB0FE0D801FE131F3900FFC0FF6DB512C06D14
80010FEBFE00010313F89038007FC023337CB22C>64 D<3801FFF0000713FE001F6D7E15
E048809038C01FF81407EC01FC381F80000006C77EC8127EA3ECFFFE131F90B5FC120312
0F48EB807E383FF800EA7FC090C7FC12FE5AA47E007F14FEEB8003383FE01F6CB612FC6C
15FE6C14BF0001EBFE1F3A003FF007FC27247CA32C>97 D<EC0FFE4A7EA380EC003FAAEB
07F8EB3FFE90B512BF4814FF5A3807FC0F380FF00348487E497E48487F90C7FC007E80A2
12FE5AA87E007E5CA2007F5C6C7E5C6C6C5A380FF0073807FC1F6CB612FC6CECBFFE6C14
3FEB3FFC90390FF01FFC27337DB22C>100 D<EB03FE90381FFFC0017F13F048B57E4880
3907FE03FE390FF800FFD81FE0EB3F805B4848EB1FC090C7120F5A007E15E015075AB7FC
A416C000FCC9FC7E127EA2127F6CEC03C06DEB07E06C7ED80FF0130F6C6CEB3FC001FF13
FF000190B512806C1500013F13FC010F13F00101138023247CA32C>I<EC0FF8EC3FFE91
B5FC4914805B903807FC7F14F090390FE03F0014C092C7FCA6007FB512FEB7FCA36C5C26
000FC0C7FCB3A8003FB512F04880A36C5C21337DB22C>I<EA7FF0487EA3127F1201AAEC
1FE0EC7FFC9038F9FFFE01FB7F90B6FC9138F03F80ECC01F02807FEC000F5B5BA25BB326
7FFFE0B5FCB500F11480A36C01E0140029337FB22C>104 D<EA7FE0487EA3127F1201AA
91381FFFF04A13F8A36E13F0913800FE004A5A4A5A4A5A4A5A4A5A4A5A4AC7FC14FEEBF1
FC13F3EBF7FE90B5FCA2EC9F80EC0FC001FE7FEBFC07496C7E496C7E811400157E811680
151F3A7FFFC0FFFCB500E113FEA36C01C013FC27337EB22C>107
D<3A7F83F007E09039CFFC1FF83AFFDFFE3FFCD87FFF13FF91B57E3A07FE1FFC3E01FCEB
F83F496C487E01F013E001E013C0A301C01380B33B7FFC3FF87FF0027F13FFD8FFFE6D13
F8D87FFC4913F0023F137F2D2481A32C>109 D<397FF01FE039FFF87FFC9038F9FFFE01
FB7F6CB6FC00019038F03F80ECC01F02807FEC000F5B5BA25BB3267FFFE0B5FCB500F114
80A36C01E0140029247FA32C>I<EB07FCEB1FFF017F13C048B512F048803907FC07FC39
0FF001FE48486C7E0180133F003F158090C7121F007EEC0FC0A348EC07E0A76C140F007E
15C0A2007F141F6C15806D133F6C6CEB7F006D5B6C6C485A3907FC07FC6CB55A6C5C6C6C
13C0011F90C7FCEB07FC23247CA32C>I<397FF01FE039FFF8FFF801FB13FE90B6FC6C15
8000019038F07FC09138801FE091380007F049EB03F85BED01FC491300A216FE167EA816
FE6D14FCA2ED01F86D13036DEB07F0150F9138801FE09138E07FC091B51280160001FB5B
01F813F8EC3FC091C8FCAD387FFFE0B57EA36C5B27367FA32C>I<D87FFEEB3FC0B53801
FFF0020713F8021F13FC6C5B39003F7FE1ECFF019138FC00F84A13704A13005CA25C5CA3
91C8FCAF007FB512E0B67EA36C5C26247EA32C>114 D<90387FF8700003B512F8120F5A
5A387FC00F387E00034813015AA36CEB00F0007F140013F0383FFFC06C13FE6CEBFF8000
0314E0C66C13F8010113FCEB0007EC00FE0078147F00FC143F151F7EA26C143F6D133E6D
13FE9038F007FC90B5FC15F815E000F8148039701FFC0020247AA32C>I<131E133FA900
7FB6FCB71280A36C1500D8003FC8FCB1ED03C0ED07E0A5EC800F011FEB1FC0ECE07F6DB5
1280160001035B6D13F89038003FE0232E7EAD2C>I<3A7FF003FF80486C487FA3007F7F
0001EB000FB3A3151FA2153F6D137F3900FE03FF90B7FC6D15807F6D13CF902603FE0713
0029247FA32C>I<D87FFFEB7FFF6EB5FCB515806C16004A7ED807C0EB01F0A66C6C495A
A3143E147FA2D801F0495AECFF87A214F7A201F113C700005D9038F9E3CFA201FB13EFA3
D97BC190C7FC017F13FFA21480A2013F5B90381F007C29247FA32C>119
D<01F81370D803FE13F8380FFF0148138748EBCFF0397F9FFFE0D8FF0F13C0D8FC071380
39F803FE00387000F81D0A79B22C>126 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fi cmbx10 10 20
/Fi 20 121 df<EA0F80EA3FE0EA7FF0A2EAFFF8A5EA7FF0A2EA3FE0EA0F80C7FCABEA0F
80EA3FE0EA7FF0A2EAFFF8A5EA7FF0A2EA3FE0EA0F800D2579A41B>58
D<B912C0A43A007FF800039338007FE0171F170F1707A21703A21701A318F0EE7800A418
00A216F8A21501150791B5FCA4ECF80715011500A21678A693C8FCADB7FCA434397DB83C
>70 D<DB3FFCEB01C00203B5EAC003021FECF00791B6EAFC0F01039039FC00FF3F4901C0
EB1FFFD91FFEC77E49481403D97FF080494880485B48177F4849153F4890C9FC181F485A
180F123F5B1807127FA24993C8FC12FFAB043FB61280A2127F7FDC0003EBC000123FA27F
121FA26C7EA26C7F6C7F6C7F7ED97FF85C6D7E6DB45C010701C05B6D01FCEBFF3F010090
B5EAFE0F021FECF8030203ECE0009126003FFEC9FC413B7BB94B>I<003FB91280A4D9F8
00EBF003D87FC09238007FC049161F007EC7150FA2007C1707A200781703A400F818E048
1701A4C892C7FCB3AE010FB7FCA43B387DB742>84 D<B600FC011FB512C0A426007FF8C8
381FC000725AB3B3181F013F94C7FC8060011F163E6D6C157E187C6D6C15FC6D6D495A6D
6DEB07F06D01F0EB1FE0DA7FFEEBFFC0021FB6C8FC02075C020014F0030F1380423A7DB8
49>I<EB3FFE0003B512E0000F14F8391FF00FFE003FEB03FF6D6C7F6E7FA26F7EA26C5A
6C5AEA0380C8FCA2EC3FFF010FB5FC137F3901FFF87F00071380380FFE00EA3FF85B485A
12FF5BA415FF6D5A127F263FF00713F83B1FFC1FBFFFC0390FFFFE1F0003EBF80F39003F
E0032A257DA42E>97 D<903801FFC0010F13FC017F13FFD9FF8013802603FE0013C04848
5AEA0FF8121F13F0123F6E13804848EB7F00151C92C7FC12FFA9127FA27F123FED01E06C
7E15036C6CEB07C06C6C14806C6C131FC69038C07E006DB45A010F13F00101138023257D
A42A>99 D<EE7F80ED7FFFA4150381AF903801FF81010F13F1013F13FD9038FFC07F0003
EB001FD807FC1307000F8048487F5B123FA2485AA312FFAA127FA27F123FA26C6C5B000F
5C6C6C5B6C6C4913C02701FF80FD13FE39007FFFF9011F13E1010313012F3A7DB935>I<
903803FF80011F13F0017F13FC3901FF83FE3A03FE007F804848133F484814C0001FEC1F
E05B003FEC0FF0A2485A16F8150712FFA290B6FCA301E0C8FCA4127FA36C7E1678121F6C
6C14F86D14F000071403D801FFEB0FE06C9038C07FC06DB51200010F13FC010113E02525
7DA42C>I<161FD907FEEBFFC090387FFFE348B6EAEFE02607FE07138F260FF801131F48
486C138F003F15CF4990387FC7C0EEC000007F81A6003F5DA26D13FF001F5D6C6C4890C7
FC3907FE07FE48B512F86D13E0261E07FEC8FC90CAFCA2123E123F7F6C7E90B512F8EDFF
8016E06C15F86C816C815A001F81393FC0000F48C8138048157F5A163FA36C157F6C1600
6D5C6C6C495AD81FF0EB07FCD807FEEB3FF00001B612C06C6C91C7FC010713F02B377DA5
30>103 D<13FFB5FCA412077EAFED7FC0913803FFF8020F13FE91381F03FFDA3C011380
14784A7E4A14C05CA25CA291C7FCB3A3B5D8FC3F13FFA4303A7DB935>I<EA01F0EA07FC
487EA2487EA56C5AA26C5AEA01F0C8FCA913FF127FA412077EB3A9B512F8A4153B7DBA1B
>I<13FFB5FCA412077EB3B3ACB512FCA4163A7DB91B>108 D<01FEEB7FC000FF903803FF
F8020F13FE91381F03FFDA3C011380000713780003497E6D4814C05CA25CA291C7FCB3A3
B5D8FC3F13FFA430257DA435>110 D<903801FFC0010F13F8017F13FFD9FF807F3A03FE
003FE048486D7E48486D7E48486D7EA2003F81491303007F81A300FF1680A9007F1600A3
003F5D6D1307001F5DA26C6C495A6C6C495A6C6C495A6C6C6CB45A6C6CB5C7FC011F13FC
010113C029257DA430>I<9038FE03F000FFEB0FFEEC3FFF91387C7F809138F8FFC00007
5B6C6C5A5CA29138807F80ED3F00150C92C7FC91C8FCB3A2B512FEA422257EA427>114
D<90383FF0383903FFFEF8000F13FF381FC00F383F0003007E1301007C130012FC15787E
7E6D130013FCEBFFE06C13FCECFF806C14C06C14F06C14F81203C614FC131F9038007FFE
140700F0130114007E157E7E157C6C14FC6C14F8EB80019038F007F090B512C000F81400
38E01FF81F257DA426>I<130FA55BA45BA25B5BA25A1207001FEBFFE0B6FCA3000390C7
FCB21578A815F86CEB80F014816CEBC3E090383FFFC06D1380903803FE001D357EB425>
I<01FFEC3FC0B5EB3FFFA4000714016C80B3A35DA25DA26C5C6E4813E06CD9C03E13FF90
387FFFFC011F13F00103138030257DA435>I<B539F01FFFF0A4000390398003F8006C01
C013E06C1407D97FE05B6D6C485A6E48C7FC90381FFC3E010F5B903807FEFC6D6C5A5D6D
5B6D5B6E7E6E7E814A7EA24A7E903801F3FFD903E37FD907C17FEB0FC049486C7E4A6C7E
013E80496D7E49130F00016E7EB590383FFFF8A42D257EA432>120
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fj cmr10 10 81
/Fj 81 128 df<EC03FF021F13E09138FE01FC903901F8007ED907E0EB1F8049486D7ED9
3F80EB07F049C76C7E01FE6E7E48486E7EA24848157F0007178049153F000F17C049151F
001F17E0A24848ED0FF0A3007F17F8A2491507D98180130600FF17FCA291B512FEA79138
800006A3D87F80C813F8A26D150FA2003F17F0A26C6CED1FE0A36C6CED3FC000071780A2
6C6CED7F006C6C15FEA26C6C4A5A017F4A5A6D6C495A6D6C495AD907E0EB1F80D903F801
7FC7FC903900FE01FC91381FFFE0020390C8FC363D7BBA41>2 D<DA0FF813FC91397FFF
07FF903B01F807DF83C0903A07E001FF0F903B1F8007FE1FE090393F000FFC137E16F85B
9338F007804848010790C7FC1503ACB812F8A32801F80003F0C7FCB3AB486C497E267FFF
E0B512F0A3333B7FBA30>11 D<EC0FF8EC7FFE903901F80780903907E001C090391F8000
E090383F0007017E497EA25BA2485A6F5AED018092C8FCA9ED03F0B7FCA33901F8000F15
03B3AA486C497E267FFFE0B512C0A32A3B7FBA2E>I<133C137EA213FE1201EA03FC13F0
EA07E0EA0FC0EA1F80EA1E005A5A5A12C00F0F6FB92A>19 D<001C131C007F137F39FF80
FF80A26D13C0A3007F137F001C131C00001300A40001130101801380A200031303010013
00485B00061306000E130E485B485B485B006013601A197DB92A>34
D<141FEC7FC0903801F0E0903803C0600107137090380F803090381F00381518A25BA213
3E133F15381530A215705D5D140190381F838092CAFC1487148E02DC49B51280EB0FF85C
4A9039003FF8000107ED0FC06E5D71C7FC6E140E010F150CD91DFC141C01391518D970FE
143801E015302601C07F1470D803805D00076D6C5BD80F00EBC00148011F5C4890380FE0
03003E6E48C8FC007E903807F8060203130E00FE6E5A6E6C5A1400ED7F706C4B13036F5A
6F7E6C6C6D6C5B7013066C6C496C130E6DD979FE5B281FF001F07F133C3C07F80FE03FC0
F86CB539800FFFF0C69026FE000313C0D91FF0D9007FC7FC393E7DBB41>38
D<121C127FEAFF80A213C0A3127F121C1200A412011380A2120313005A1206120E5A5A5A
12600A1979B917>I<146014E0EB01C0EB0380EB0700130E131E5B5BA25B485AA2485AA2
12075B120F90C7FCA25A121EA2123EA35AA65AB2127CA67EA3121EA2121F7EA27F12077F
1203A26C7EA26C7E1378A27F7F130E7FEB0380EB01C0EB00E01460135278BD20>I<12C0
7E12707E7E7E120F6C7E6C7EA26C7E6C7EA21378A2137C133C133E131EA2131F7FA21480
A3EB07C0A6EB03E0B2EB07C0A6EB0F80A31400A25B131EA2133E133C137C1378A25BA248
5A485AA2485A48C7FC120E5A5A5A5A5A13527CBD20>I<121C127FEAFF80A213C0A3127F
121C1200A412011380A2120313005A1206120E5A5A5A12600A19798817>44
D<B512FCA516057F941C>I<121C127FEAFF80A5EA7F00121C0909798817>I<150C151E15
3EA2153C157CA2157815F8A215F01401A215E01403A215C01407A21580140FA215005CA2
141E143EA2143C147CA2147814F8A25C1301A25C1303A2495AA25C130FA291C7FC5BA213
1E133EA2133C137CA2137813F8A25B1201A25B1203A25B1207A25B120FA290C8FC5AA212
1E123EA2123C127CA2127812F8A25A12601F537BBD2A>I<EB03F8EB1FFF90387E0FC090
38F803E03901E000F0484813780007147C48487FA248C77EA2481580A3007EEC0FC0A600
FE15E0B3007E15C0A4007F141F6C1580A36C15006D5B000F143EA26C6C5B6C6C5B6C6C48
5A6C6C485A90387E0FC0D91FFFC7FCEB03F8233A7DB72A>I<EB01C013031307131F13FF
B5FCA2131F1200B3B3A8497E007FB512F0A31C3879B72A>I<EB0FF0EB7FFE48B57E3903
E03FE0390F000FF0000E6D7E486D7E486D7E123000706D7E126012FCB4EC7F807FA56CC7
FC121CC8FCEDFF00A34A5A5D14035D4A5A5D140F4A5A4A5A92C7FC147C5C495A495A495A
495A91C8FC011EEB01805B5B49130348481400485A485A000EC75A000FB6FC5A5A485CB6
FCA321387CB72A>I<EB07F8EB3FFF4913C03901F80FF03903C007F848486C7E380E0001
000F80381FE0006D7FA56C5A6C5AC85A1401A25D4A5AA24A5A5DEC0F80027EC7FCEB1FFC
ECFF809038000FE06E7EEC01FC816E7EED7F80A216C0A2153F16E0A2121EEA7F80487EA4
16C049137F007F1580007EC7FC0070ECFF006C495A121E390F8003F83907F00FF00001B5
12C06C6C90C7FCEB0FF8233A7DB72A>I<1538A2157815F8A2140114031407A2140F141F
141B14331473146314C313011483EB030313071306130C131C131813301370136013C012
01EA038013005A120E120C5A123812305A12E0B712F8A3C73803F800AB4A7E0103B512F8
A325397EB82A>I<0006140CD80780133C9038F003F890B5FC5D5D158092C7FC14FC3806
7FE090C9FCABEB07F8EB3FFE9038780F803907E007E090388003F0496C7E12066E7EC87E
A28181A21680A4123E127F487EA490C71300485C12E000605C12700030495A00385C6C13
03001E495A6C6C485A3907E03F800001B5C7FC38007FFCEB1FE0213A7CB72A>I<EC3FC0
903801FFF0010713FC90380FE03E90383F800790387E001F49EB3F804848137F485AA248
5A000FEC3F0049131E001F91C7FCA2485AA3127F90C9FCEB01FC903807FF8039FF1E07E0
90383801F0496C7E01607F01E0137E497FA249148016C0151FA290C713E0A57EA56C7E16
C0A2121FED3F807F000F15006C6C5B15FE6C6C5B6C6C485A3900FE07F090383FFFC06D90
C7FCEB03FC233A7DB72A>I<12301238123E003FB612E0A316C05A168016000070C71206
0060140E5D151800E01438485C5D5DC712014A5A92C7FC5C140E140C141C5CA25CA214F0
495AA21303A25C1307A2130FA3495AA3133FA5137FA96DC8FC131E233B7BB82A>I<EB03
F8EB1FFF017F13C09038FC07F03901E001F848486C7E4848137C90C77E48141E000E141F
001E80A3121FA27F5D01E0131E6C6C133E01FC133C6D5B6C6C6C5AECC1E06CEBF3C06C01
FFC7FC6C5BEB3FFF6D13C081017F13F801F07F3903E07FFE3907801FFF48486C13804813
03003E6D13C0003CEB007F007C143F0078EC0FE000F814075A1503A21501A36C15C01278
1503007C15806CEC07006C5C6C6C131ED807E0137C3903F803F0C6B55A013F1380D907FC
C7FC233A7DB72A>I<EB03F8EB1FFF017F13C09038FC07E03903F803F048486C7E48486C
7E49137E121F48487FA2007F158090C7FCA248EC1FC0A616E0A56C143FA27F123F001F14
7FA26C6C13FF6C6C13DF000313013901F0039F3900FC0F1FD93FFC13C0EB07F090C7FC15
3F1680A316005D000F147E487E486C5BA24A5A4A5A49485A6C48485A001C495A260F807F
C7FC3807FFFC000113F038003FC0233A7DB72A>I<121C127FEAFF80A5EA7F00121CC7FC
B2121C127FEAFF80A5EA7F00121C092479A317>I<121C127FEAFF80A5EA7F00121CC7FC
B2121C127F5A1380A4127F121D1201A412031300A25A1206A2120E5A121812385A126009
3479A317>I<EB3FE03801FFFE3907C03F80390E000FC0003CEB07F000301303007014F8
007C130100FE14FC7EA4127E003CEB03F8C7FCEC07F0A2EC0FE0EC1F80EC3F00147E147C
5C495A5C495A5CA249C7FCA31306AA90C8FCA8130EEB3F80497EA56D5A010EC7FC1E3B7C
BA27>63 D<1538A3157CA315FEA34A7EA34A6C7EA202077FEC063FA2020E7FEC0C1FA202
1C7FEC180FA202387FEC3007A202707FEC6003A202C07F1501A2D901807F81A249C77F16
7FA20106810107B6FCA24981010CC7121FA2496E7EA3496E7EA3496E7EA213E0707E1201
486C81D80FFC02071380B56C90B512FEA3373C7DBB3E>65 D<B712E016FC16FF00019039
80007FC06C90C7EA1FE0707E707E707EA2707EA283A75F16035F4C5A4C5A4C5A4C5AEEFF
8091B500FCC7FCA291C7EA7F80EE1FE0EE07F0707E707E83707EA21880177F18C0A71880
17FFA24C13005F16034C5AEE1FF8486DEB7FF0B812C094C7FC16F832397DB83B>I<913A
01FF800180020FEBE003027F13F8903A01FF807E07903A03FC000F0FD90FF0EB039F4948
EB01DFD93F80EB00FF49C8127F01FE153F12014848151F4848150FA248481507A2485A17
03123F5B007F1601A35B00FF93C7FCAD127F6DED0180A3123F7F001F160318006C7E5F6C
7E17066C6C150E6C6C5D00001618017F15386D6C5CD91FE05C6D6CEB03C0D903FCEB0F80
902701FF803FC7FC9039007FFFFC020F13F002011380313D7BBA3C>I<B712C016F816FE
000190398001FF806C90C7EA3FE0EE0FF0EE03F8707E707E177FA2EF3F8018C0171F18E0
170F18F0A3EF07F8A418FCAC18F8A4EF0FF0A218E0A2171F18C0EF3F80A2EF7F0017FE4C
5A4C5AEE0FF0EE3FE0486DEBFF80B8C7FC16F816C036397DB83F>I<B812FCA300019038
80000F6C90C71201EE007E173E171E170EA31706A317078316C0A394C7FCA31501A21503
150F91B5FCA3EC000F15031501A21500A21860A318E093C712C0A41701A3EF0380A21707
A2170F173F177F486D903807FF00B9FCA333397DB839>I<B812F8A30001903880001F6C
90C71201EE00FC177C173C171CA2170CA4170E1706A2ED0180A21700A41503A21507151F
91B5FCA3EC001F15071503A21501A692C8FCAD4813C0B612C0A32F397DB836>I<DBFF80
13C0020FEBF001023F13FC9139FF803F03903A03FC000787D90FF0EB03CF4948EB00EF49
48147F4948143F49C8121F485A4848150F48481507A248481503A2485A1701123F5B007F
1600A448481600AB93B6FCA26C7E9338007FE0EF3FC0A2123F7F121FA26C7EA26C7EA26C
7E6C7E6C6C157F6D7E6D6C14FF6D6C14EFD90FF8EB03C7D903FEEB0783903A00FFC03F01
91393FFFFC00020F01F0130002001380383D7CBA41>I<B648B512FEA300019026800003
13006C90C76C5AB3A491B6FCA391C71201B3A6486D497EB648B512FEA337397DB83E>I<
B612C0A3C6EBC0006D5AB3B3AD497EB612C0A31A397EB81E>I<013FB512E0A39039001F
FC00EC07F8B3B3A3123FEA7F80EAFFC0A44A5A1380D87F005B0070131F6C5C6C495A6C49
C7FC380781FC3801FFF038007F80233B7DB82B>I<B649B5FCA3000101809038007FF06C
90C8EA3F80053EC7FC173C17385F5F4C5A4C5A4CC8FC160E5E5E5E5E4B5AED0780030EC9
FC5D153E157E15FF5C4A7F4A6C7E140E4A6C7E4A6C7E14704A6C7E4A6C7E14804A6C7E6F
7EA26F7F707EA2707E707EA2707EA2707E707EA2707E707F8484486D497FB6011FEBFF80
A339397DB841>I<B612E0A3000101C0C8FC6C90C9FCB3AD1718A517381730A31770A317
F0A216011603160FEE1FE0486D13FFB8FCA32D397DB834>I<B5933807FFF86E5DA20001
F0FC002600DFC0ED1BF8A2D9CFE01533A3D9C7F01563A3D9C3F815C3A2D9C1FCEC0183A3
D9C0FEEC0303A2027F1406A36E6C130CA36E6C1318A26E6C1330A36E6C1360A26E6C13C0
A3913901FC0180A3913900FE0300A2ED7F06A3ED3F8CA2ED1FD8A3ED0FF0A3486C6D5A48
7ED80FFC6D48497EB500C00203B512F8A2ED018045397DB84C>I<B5913807FFFE8080C6
9238007FE06EEC1F80D9DFF0EC0F001706EBCFF8EBC7FCA2EBC3FEEBC1FFA201C07F6E7E
A26E7E6E7E81140F6E7E8114036E7E168080ED7FC016E0153FED1FF0ED0FF8A2ED07FCED
03FEA2ED01FF6F1386A2EE7FC6EE3FE6A2EE1FF6EE0FFEA216071603A216011600A2177E
486C153E487ED80FFC151EB500C0140EA2170637397DB83E>I<EC03FF021F13E09138FE
01FC903901F8007ED907E0EB1F8049486D7ED93F80EB07F049C76C7E01FE6E7E48486E7E
49157E0003167F4848ED3F80A24848ED1FC0A2001F17E049150F003F17F0A3007F17F849
1507A300FF17FCAC007F17F86D150FA3003F17F0A26C6CED1FE0A36C6CED3FC000071780
6D157F000317006C6C15FEA26C6C4A5A017F4A5A6D6C495A6D6C495AD907E0EB1F80D903
F8017FC7FC903900FE01FC91381FFFE0020390C8FC363D7BBA41>I<B712C016F816FE00
0190398001FF806C90C7EA3FC0EE0FE0EE07F0EE03F817FC17FE1601A217FFA717FEA2EE
03FCA2EE07F817F0EE0FE0EE3FC0923801FF0091B512FC16F091C9FCB3A5487FB6FCA330
397DB839>I<EC03FF021F13E09138FE01FC903901F8007ED907E0EB1F8049486D7ED93F
80EB07F049C76C7E01FE6E7E48486E7EA24848157F0007178049153F000F17C049151F00
1F17E0A24848ED0FF0A3007F17F8A2491507A200FF17FCAC007F17F8A26D150FA2003F17
F0A26C6CED1FE0A36C6CED3FC00007027C14804AB4FC3C03F80383807F003B01FC0701C0
FEEC0E002600FE0CEBE1FC017FEC63F8D93F8CEB77F0D91FCCEB3FE0D907EE14806DB449
C7FC0100D981FC130CEC1FFF0203131C91C7001E131C161F183CEF807CEFC0F8EE0FFFA3
18F08218E07013C07013809338007E00364B7BBA41>I<B612FEEDFFE016F80001903880
07FE6C90C76C7EEE3FC0707E707E707EA2707EA283A65FA24C5AA24C5A4C5AEE3F8004FF
C8FCED07FC91B512E05E9138000FF0ED03F8ED00FE82707E707EA2161F83A583A6F00180
A217F8160F1803486D01071400B66D6C5A04011306933800FE0ECAEA3FFCEF07F0393B7D
B83D>I<D90FF813C090383FFE0190B512813903F807E33907E000F74848137F4848133F
48C7121F003E140F007E1407A2007C140312FC1501A36C1400A37E6D14006C7E7F13F86C
B47E6C13F8ECFF806C14E06C14F86C14FEC680013F1480010714C0EB007F020713E0EC00
7FED3FF0151F150FED07F8A200C01403A21501A37EA216F07E15036C15E06C14076C15C0
6C140F6DEB1F80D8FBF0EB3F00D8F0FE13FE39E03FFFF8010F13E0D8C00190C7FC253D7C
BA2E>I<003FB812E0A3D9C003EB001F273E0001FE130348EE01F00078160000701770A3
00601730A400E01738481718A4C71600B3B0913807FF80011FB612E0A335397DB83C>I<
B6903807FFFEA3000101809038007FE06C90C8EA1F80EF0F001706B3B2170E6D150C8017
1C133F17186D6C14385F6D6C14F06D6C5C6D6C495A6D6CEB07806D6C49C7FC91387F807E
91381FFFF8020713E09138007F80373B7DB83E>I<B500FC91387FFF80A3000301809138
0FFC006C90C8EA07E0715A6C705A6E1403017F93C7FCA280013F1506A26E140E011F150C
80010F5DA28001075DA26E147001031560A26D6C5CA2806D4A5AA2ED8003027F91C8FCA2
91383FC006A215E0021F5BA2EDF01C020F1318A26E6C5AA215FC02035BA2EDFEE002015B
A26E6C5AA36FC9FCA3153EA2151CA3393B7EB83E>I<B5D8FC07B5D8F001B5FCA3000790
2780001FFEC7EA1FF86C48C7D80FF8EC07E000010307ED03C01B807F6C6F6C1500A26E5F
017F6E6C1406A280013F4A6C5CA280011F4A6D5BEE067FA26D6C010E6D5BEE0C3FA26D6C
011C6D5BEE181FA26D6C6F5BEE300FA26D6C6F485AEE6007A26D6C4CC7FC9338C003FCA2
03805D913B7F818001FE06A203C1150EDA3FC3C7EAFF0CA203E3151CDA1FE6EC7F98A215
F6DA0FFCEC3FF0A302075E4B141FA202035E4B140FA202015E4B1407A2020093C8FC4B80
503B7EB855>I<007FB590383FFFFCA3C601F801071380D97FE0D903FCC7FC013FEC01F0
6D6C5C5F6D6C5C6D6C13034CC8FC6D6C1306160E6D6C5B6DEB8018163891387FC0306E6C
5A16E06E6C5A91380FF18015FB6EB4C9FC5D14036E7EA26E7F6F7EA24B7E15DF9138019F
F09138038FF8150F91380607FC91380E03FE140C4A6C7EEC38000230804A6D7E14E04A6D
7E49486D7E130391C76C7E01066E7E130E010C6E7E011C1401013C8101FE822607FF8001
0713E0B500E0013FEBFF80A339397EB83E>I<B500FE91383FFFE0A3000301E0913807FE
00C649EC03F0017F6F5A606D6C5D6D6C140395C7FC6D6C1406A26D6C5C6D6C141C17186D
6C143817306D6D5B6E6C13E05F91383FE0015F91381FF003DA0FF890C8FC1606913807FC
0E160C913803FE1C913801FF185E6E13B016E0157F6F5AB3A24B7E023FB512C0A33B397F
B83E>I<003FB7FCA39039FC0001FE01C0130349495A003EC7FC003C4A5A5E0038141F00
784A5A12704B5A5E006014FF4A90C7FCA24A5A5DC712074A5AA24A5A5D143F4A5AA24A5A
92C8FC5B495AA2495A5C130F4948EB0180A2495A5C137F495A16034890C7FC5B1203485A
EE0700485A495C001F5D48485C5E4848495A49130FB8FCA329397BB833>I<3901800180
000313033907000700000E130E485B0018131800381338003013300070137000601360A2
00E013E0485BA400CE13CE39FF80FF806D13C0A3007F137FA2393F803F80390E000E001A
1974B92A>92 D<EB1FE0EBFFFC3803E03F3907000F80390F8007E0486C6C7E13E06E7EA2
6E7E6C5A6C5AC8FCA4147FEB07FFEB3FE0EBFE00EA03F8EA0FF0EA1FC0123F485A90C7FC
160C12FEA31401A26C13036CEB077C903980063E18383FC01E3A0FE0781FF03A03FFF00F
E03A007F8007C026277DA52A>97 D<EA03F012FFA3120F1203B0EC1FE0EC7FF89038F1E0
3E9039F3801F809039F7000FC001FEEB07E049EB03F049EB01F85BED00FCA216FEA2167E
167FAA167E16FEA216FC15016D14F8ED03F07F01EEEB07E001C6EB0FC09039C7801F0090
3881E07E903800FFF8C7EA1FC0283B7EB92E>I<EB03FC90381FFF8090387E03E03901F8
0070484813F83907E001FC380FC003A2EA1F80123F90380001F848EB00F01500A2127E12
FEAA127E127FA26C14067F001F140E6D130C000F141C6C6C13386C6C13706C6C13E03900
7C07C090381FFF00EB07F81F277DA525>I<ED0FC0EC03FFA3EC003F150FB0EB03F8EB1F
FF90387E078F9038F801EF3903F0007F4848133F4848131FA24848130F123F90C7FC5AA2
127E12FEAA127E127FA27EA26C6C131FA26C6C133F6C6C137F6C6CEBEFF03A01F801CFFF
39007C078F90381FFE0FD907F813C0283B7DB92E>I<EB07F8EB1FFF90387C0FC03901F8
03E03903F001F0D807E013F8380FC0004848137CA248C7127E153E5A153F127E12FEA3B7
FCA248C8FCA5127EA2127FA26C14037F001F14076C6C13060007140E6D131CD801F01338
6C6C137090387E03E090381FFF80903803FC0020277EA525>I<147E903803FF8090380F
C1E0EB1F8790383F0FF0137EA213FCA23901F803C091C7FCADB512FCA3D801F8C7FCB3AB
487E387FFFF8A31C3B7FBA19>I<ED03F090390FF00FF890393FFC3C3C9039F81F707C39
01F00FE03903E007C03A07C003E010000FECF000A248486C7EA86C6C485AA200075C6C6C
485A6D485A6D48C7FC38073FFC38060FF0000EC9FCA4120FA213C06CB512C015F86C14FE
6CECFF804815C03A0F80007FE048C7EA0FF0003E140348140116F8481400A56C1401007C
15F06CEC03E0003F1407D80F80EB0F80D807E0EB3F003901FC01FC39007FFFF0010790C7
FC26387EA52A>I<EA03F012FFA3120F1203B0EC0FF0EC3FFCECF03F9039F1C01F809039
F3800FC0EBF70013FE496D7EA25BA35BB3A3486C497EB500C1B51280A3293A7EB92E>I<
EA0380EA0FE0487EA56C5AEA0380C8FCAAEA03F012FFA312071203B3AA487EB512C0A312
387EB717>I<EB01C0EB07F0EB0FF8A5EB07F0EB01C090C7FCAAEB01F813FFA313071301
B3B3A2123C127E00FF13F01303A214E038FE07C0127C383C0F00EA0FFEEA03F8154984B7
19>I<EA03F012FFA3120F1203B1913801FFFCA39138007FC01600157C15705D4A5A4A5A
4AC7FC141E1438147814FC13F1EBF3FEEBF73F01FE7FEBF81F496C7E8114076E7E6E7E81
1400157E157F811680ED1FC0486CEB3FF0B500C0B5FCA3283A7EB92C>I<EA03F012FFA3
120F1203B3B3AD487EB512C0A3123A7EB917>I<2703F00FF0EB1FE000FFD93FFCEB7FF8
913AF03F01E07E903BF1C01F83803F3D0FF3800FC7001F802603F70013CE01FE14DC49D9
07F8EB0FC0A2495CA3495CB3A3486C496CEB1FE0B500C1B50083B5FCA340257EA445>I<
3903F00FF000FFEB3FFCECF03F9039F1C01F803A0FF3800FC03803F70013FE496D7EA25B
A35BB3A3486C497EB500C1B51280A329257EA42E>I<EB03FE90380FFF8090383E03E090
38F800F84848137C48487F48487F4848EB0F80001F15C090C712074815E0A2007EEC03F0
A400FE15F8A9007E15F0A2007F14076C15E0A26C6CEB0FC0000F15806D131F6C6CEB3F00
6C6C137EC66C13F890387E03F090381FFFC0D903FEC7FC25277EA52A>I<3903F01FE000
FFEB7FF89038F1E07E9039F3801F803A07F7000FC0D803FEEB07E049EB03F04914F84913
0116FC150016FEA3167FAA16FEA3ED01FCA26DEB03F816F06D13076DEB0FE001F614C090
39F7803F009038F1E07E9038F0FFF8EC1FC091C8FCAB487EB512C0A328357EA42E>I<D9
03F813C090381FFE0190387E07819038FC01C33903F000E3000714774848133749133F00
1F141F485A150F48C7FCA312FEAA127FA37E6D131F121F6D133F120F6C6C137F6C6C13EF
3901F801CF39007E078F90381FFE0FEB07F890C7FCABED1FE00203B5FCA328357DA42C>
I<3807E01F00FFEB7FC09038E1E3E09038E387F0380FE707EA03E613EE9038EC03E09038
FC0080491300A45BB3A2487EB512F0A31C257EA421>I<EBFF03000313E7380F80FF381E
003F487F487F00707F12F0A2807EA27EB490C7FCEA7FE013FF6C13E06C13F86C7F00037F
C67F01071380EB007F141F00C0EB0FC01407A26C1303A37E15806C13077EEC0F00B4131E
38F3C07C38E1FFF038C03F801A277DA521>I<1318A51338A31378A313F8120112031207
001FB5FCB6FCA2D801F8C7FCB215C0A93800FC011580EB7C03017E13006D5AEB0FFEEB01
F81A347FB220>I<D803F0EB07E000FFEB01FFA3000FEB001F00031407B3A4150FA3151F
12016D133F0000EC77F86D9038E7FF8090383F03C790381FFF87903A03FC07E00029267E
A42E>I<B538803FFEA33A0FF8000FF06C48EB07E00003EC03C06D148000011500A26C6C
1306A26D130E017E130CA26D5BA2EC8038011F1330A26D6C5AA214E001075BA2903803F1
80A3D901FBC7FCA214FF6D5AA2147CA31438A227257EA32C>I<B53A1FFFE03FFEA3260F
F8009038000FF86C48017EEB03E018C00003023EEB0180A26C6C013FEB0300A36C6CEC80
06156FA2017E9038EFC00C15C7A2D93F016D5A15830281EBF038D91F831430150102C3EB
F87090260FC6001360A2D907E66D5A02EC137CA2D903FCEB7F804A133FA2010192C7FC4A
7FA20100141E4A130E0260130C37257EA33C>I<B538807FFFA33A03FE003FF00001EC1F
80000092C7FC017E131C6D13186D6C5AECC070010F5B6D6C5AECF180EB03FB6DB4C8FC6D
5AA2147F804A7E8114CF903801C7E090380383F090380703F8EB0601496C7E011C137E49
137F01787F496D7E486C80000FEC3FF0D8FFFE90B51280A329247FA32C>I<B538803FFE
A33A0FF8000FF06C48EB07C00003EC03806C7E16007F00001406A2017E5BA2137F6D5BA2
6D6C5AA2ECC070010F1360A26D6C5AA214F101035BA2D901FBC7FCA214FF6D5AA2147CA3
1438A21430A214701460A25CA2EA7C0100FE5B130391C8FC1306EAFC0EEA701C6C5AEA1F
F0EA0FC027357EA32C>I<003FB512FCA2EB8003D83E0013F8003CEB07F00038EB0FE012
300070EB1FC0EC3F800060137F150014FE495AA2C6485A495AA2495A495A495AA290387F
000613FEA2485A485A0007140E5B4848130C4848131CA24848133C48C7127C48EB03FC90
B5FCA21F247EA325>I<B81280A2290280962A>I<001C131C007F137F39FF80FF80A5397F
007F00001C131C190978B72A>127 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fk cmcsc10 12 17
/Fk 17 122 df<DB03FF140C033F01F0131C4AB500FC133C91390FFE007FDA1FF090380F
C07CDA7F80903803E0FC4948C812F0D903FC15794948153FD91FF0151F4948150F494815
074A150349C9FC48481601120349160012074848177CA24848173CA2123FA249171C127F
A319005B12FFAC127F7FA2191CA2123F7FA2001F183C19386C7EA26C6C1778000318706D
17F0000118E06C6C16016D6C16C06E15036D6CED07806D6CED0F00D907F8151E6D6C5D6D
B45D6D6C6C495ADA1FF0EB07C0DA0FFEEB7F800201B500FEC7FCDA003F13F0030313803E
4879C54E>67 D<BAFCA3C601F0C7121F6D4802011380013FED007F183F181F180F1807A2
F003C0A31801A419E01800EE01C0A21900A41603A31607160F167F91B6FCA39138E0007F
160F16071603A31601A693C9FCB0497E497EB7FCA33B447BC347>70
D<49B46C13C0010FEBF001013FEBFC039038FF007FD801F8EB0F874848EB03E7D807C0EB
01FF48487F001F157F90C8123F003E151FA2007E150F127C160712FC1603A37E16017EA2
7F6C6C91C7FC7F7FEA3FFCEBFFC06C13FC6CEBFFC015FC6CECFF806C15E0C615F86D8001
1F80010380D9003F1480020314C0EC003F030313E01500EE7FF0161FA2EE0FF8160712E0
1603A21601A37EA217F07E16037E17E06C15076C16C06DEC0F806D141F6DEC3F00D8F8F8
147E017F5C3AF01FE007F00107B55AD8E00191C7FC39C0001FFC2D4879C53D>83
D<B600E0020FB51280A3000101F8C9EBF8006C49EE7FC06D48705A013F71C7FC191E8001
1F171C80010F5FA26E1678010717708001035FA26E15016D5F816D4C5AA26F1407027F93
C8FC81023F150EA26F141E021F151C81020F5DA26F1478020715708102035DA26F13016E
5D16806E4A5AA2EEC007037F91C9FC16E0033F130EA2EEF01E031F131C16F8030F5BA2EE
FC780307137016FE03035BA216FF6F5BA26F5BA370CAFCA3163EA2161C49467DC351>86
D<157015F8A34A7EA24A7EA34A7E81A291380E3F80A2021E7FEC1C1FA24A6C7EA34A6C7E
A202F07FECE003A249486C7EA349486C7EA201078091C77EA249B67EA24981011CC7121F
A2013C810138140FA2496E7EA201F081491403120183486C140100074B7ED81FF84A7EB5
027F13F8A335357CB43D>97 D<4AB4EB0180021FEBF00391B5EAFC0701039038007E0FD9
07F8EB0F9FD91FE0EB03DF4948EB01FF01FFC8FC4848157F4848153FA24848151F484815
0F121F491507123F5BA2007F1603A3484892C7FCAB6C7EEF0380A2123FA27F001F16076D
1600000F5E6C6C150E6C6C151E171C6C6C153C6C6C5DD93FC05C6D6CEB03E0D907F8495A
902703FF807FC7FC0100EBFFFC021F13F00201138031357BB33B>99
D<B812F0A3D803FEC7123F6C48EC07F816011600A21778A21738A3171C1507A31700A25D
A25D157F90B6FCA39038FC007F151F81A2811707A3170E92C7FCA4171EA2173CA2177C17
FC16011607486C143FB812F8A330337BB238>101 D<B812C0A3D803FEC7FC6C48EC1FE0
160716031601A21600A41770A2150EA21700A3151EA2153E15FE90B5FCA3EBFC00153E15
1EA2150EA592C8FCAB48B4FCB512FEA32C337BB235>I<B512F8A33803FE006C5AB3B3A7
487EB512F8A315337BB21E>105 D<B512FEA3000390C9FCEA01FCB3A9EE01C0A4160317
80A41607A2160F161FA2167FEEFF00486C1307B8FCA32A337BB233>108
D<D8FFFEEE7FFFA26D93B5FC000318C06C1880D9DF80EC01DFA2D9CFC0EC039FA3D9C7E0
EC071FA2D9C3F0140EA3D9C1F8141CA2D9C0FC1438A3027E1470A26E14E0A391391F8001
C0A291390FC00380A3913907E00700A2913803F00EA36E6C5AA26E6C5AA3ED7E70A26F5A
A3486C6D5A487ED81FFC6D48EB3FC0B50080020FB5FCA2ED070040337BB24A>I<D8FFFC
91383FFFE07FA2D801FF020713006EEB01FC6E6D5A1770EBDFE0EBCFF013C780EBC3FC13
C180EBC0FF80816E7E6E7EA26E7E6E7E1403816E7E140081ED7F80ED3FC0A2ED1FE0ED0F
F0150716F8ED03FC150116FEED00FF167F17F0163F161FA2160F1607486C1403487ED81F
FC1401B56C1300A2177033337BB23D>I<EC07FF023F13E0903901FE03FC903907F0007F
D90FC0EB1F80D93F80EB0FE049C76C7E01FE6E7E48486E7E48486E7E4848157FA24848ED
3F80001F17C0A24848ED1FE0A3007F17F049150FA300FF17F8AA007F17F06D151FA2003F
17E0A26D153F001F17C0A26C6CED7F80000717006D5D00035E6C6C4A5A6C6C4A5A017F4A
5A6D6C495AD90FC0EB1F80D907F0017FC7FC903901FE03FC9039003FFFE0020790C8FC35
357BB33F>I<B612F8EDFF8016E03A03FE000FF86C48EB03FEED00FF707E707E83161FA2
83A55FA24C5A5F4CC7FC16FEED03FCED1FF090B6128003FCC8FC9038FC003FED0FC06F7E
6F7E6F7E82150082A382A383A4EFC01CA2167FEFE03C486C023F1338B500F890381FF078
93380FF8F0933803FFE0CAEA7F8036347BB23C>114 D<007FB812C0A3903A8007FC003F
277E0003F8130F007C16070078160300701601A200F017E0A2481600A6C71600B3AA4A7E
4A7E010FB512FEA333327CB13B>116 D<B500F890383FFFE0A3D803FEC7000713006C48
EC01FC705A1770B3AE000016F06D5DA2017E1401017F4A5A7F6D6C495A6E49C7FC6D6C13
1ED903F0137C903901FE03F89039007FFFE0021F1380DA03FCC8FC33347BB23D>I<B500
F091387FFF80A30003018091381FFC006C90C8EA0FE06C6D5D017F5E6D6C4AC7FC171E6D
6C5C6D6C143817786D6C5C6D6C5C16016D6C495A6D6C5C16076E6C48C8FC91383FC00E16
1E6E6C5A91380FF03816786E6C5A6E6C5AEDFDC0EC01FF6E5B93C9FC81B14B7E023F13FE
A339337EB23D>121 D E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: A4
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 33 332 a
 0.4 0.1 0.3 setrgbcolor
 33 332 a Fk(Stef)-9 b(an)37
b(F)m(or)n(cey)1879 b(Curriculum)39 b(Vit)-7 b(ae)3900
332 y
 0 setgray
 3900 332 a 0 429 3617 4 v 141 557 a Fj(Departmen)n(t)28
b(of)f(Mathematics)1492 b Fi(T)-8 b(el)p Fj(:)37 b(\(330\)972-6779)141
656 y(Buc)n(h)n(tel)27 b(College)g(of)h(Arts)f(and)g(Sciences)1165
b Fi(F)-8 b(ax)p Fj(:)38 b(\(330\)374-8630)141 756 y(The)28
b(Univ)n(ersit)n(y)e(of)i(Akron)1668 b Fh(sf34@uakron.edu)141
855 y Fj(Akron,)27 b(OH)h(44325-4002,)23 b(USA)722 b
Fh(http://www.math.)o(ua)o(kro)o(n.)o(edu)o(/~)o(sf)o(34/)p
0 993 V 0 1158 a
 0.4 0.1 0.3 setrgbcolor
 0 1158 a Fg(Ph.D.)33 b(Dissertation)751
1158 y
 0 setgray
 751 1158 a 224 1309 a Ff(L)l(o)l(op)e(Sp)l(ac)l(es)f(and)g
(Higher-Dimensional)i(Iter)l(ate)l(d)d(Enrichment)p Fj(,)f(Virginia)f
(T)-7 b(ec)n(h,)28 b(Ma)n(y)e(2004.)224 1409 y(Directed)i(b)n(y)f(F)-7
b(rank)27 b(Quinn.)0 1628 y
 0.4 0.1 0.3 setrgbcolor
 0 1628 a Fg(Academic)34 b(App)s(ointments)
990 1628 y
 0 setgray
 990 1628 a 141 1761 a Fe(\016)83 b Fj(Asso)r(ciate)27
b(Professor,)e(Univ)n(ersit)n(y)h(of)i(Akron,)f(2014-curren)n(t.)141
1861 y Fe(\016)83 b Fj(Assistan)n(t)27 b(Professor,)e(Univ)n(ersit)n(y)
i(of)g(Akron,)g(2010-2014.)141 1960 y Fe(\016)83 b Fj(Assistan)n(t)27
b(Professor,)e(T)-7 b(ennessee)27 b(State)h(Univ)n(ersit)n(y)-7
b(,)27 b(2005-2010.)141 2060 y Fe(\016)83 b Fj(Graduate)26
b(Researc)n(h)h(Assistan)n(t,)g(Virginia)g(T)-7 b(ec)n(h,)27
b(2000-2004.)141 2160 y Fe(\016)83 b Fj(Graduate)26 b(T)-7
b(eac)n(hing)27 b(Assistan)n(t,)g(Virginia)g(T)-7 b(ec)n(h,)27
b(1997-2002.)0 2369 y
 0.4 0.1 0.3 setrgbcolor
 0 2369 a Fg(Nonacademic)33 b(Emplo)m(yment)1077
2369 y
 0 setgray
 1077 2369 a 141 2570 a Fe(\016)83 b Fj(F)-7 b(ramatome)26
b(T)-7 b(ec)n(hnologies)26 b(\(Arev)-5 b(a\),)28 b(Virginia,)f(Jan.)36
b(1996)26 b(-)h(Aug.)37 b(1997,)26 b(Summer)h(and)h(F)-7
b(all)27 b(1998.)0 2839 y
 0.4 0.1 0.3 setrgbcolor
 0 2839 a Fg(Education)405 2839
y
 0 setgray
 405 2839 a 141 2953 a Fe(\016)83 b Fj(Ph.D.)28 b(in)f(Mathematics,)h
(from)f(Virginia)g(T)-7 b(ec)n(h)349 3053 y(Cen)n(ter)27
b(for)g(Statistical)g(Mec)n(hanics)g(and)g(Mathematical)h(Ph)n(ysics,)e
(Ma)n(y)h(2004.)141 3152 y Fe(\016)83 b Fj(M.S.)28 b(in)g(Mathematics)f
(from)g(Virginia)g(T)-7 b(ec)n(h,)27 b(Decem)n(b)r(er)h(2002.)141
3252 y Fe(\016)83 b Fj(B.S.)27 b(in)h(Mathematics)g(with)g(Computer)f
(Science)h(concen)n(tration,)e(summa)h(cum)h(laude)349
3352 y(from)f(Lib)r(ert)n(y)g(Univ)n(ersit)n(y)-7 b(,)27
b(Ma)n(y)g(1997.)0 3561 y
 0.4 0.1 0.3 setrgbcolor
 0 3561 a Fg(Grants)33 b(W)m(on)488
3561 y
 0 setgray
 488 3561 a 141 3675 a Fe(\016)83 b Fj(Com)n(binatorial)25
b(Geometry)i(of)h(Ph)n(ylogenetic)e(T)-7 b(rees)266 3775
y(F)g(acult)n(y)27 b(Researc)n(h)f(Committee)i(Summer)g(F)-7
b(ello)n(wship,)27 b(2016)141 3874 y Fe(\016)83 b Ff(A)n(lgebr)l(aic)31
b(Combinatorics)g(and)g(Convex)f(Ge)l(ometry)266 3974
y Fj(NSA-AMS)e(Mathematical)f(Sciences)h(Program)d(Y)-7
b(oung)27 b(Researc)n(her)e(Gran)n(t,)i(2014-2015.)141
4074 y Fe(\016)83 b Ff(The)30 b(ge)l(ometry)h(of)f(or)l(ganic)h
(chemistry:)40 b(Student)28 b(r)l(ese)l(ar)l(ch)j(opp)l(ortunities)266
4173 y Fj(F)-7 b(acult)n(y)27 b(Researc)n(h)f(Aw)n(ard,)h(T)-7
b(ennessee)27 b(State)h(Univ)n(ersit)n(y)-7 b(,)27 b(Summer)g(2008.)0
4383 y
 0.4 0.1 0.3 setrgbcolor
 0 4383 a Fg(Resea)m(rch)34 b(Interests)730 4383
y
 0 setgray
 730 4383 a 141 4497 a Fe(\016)83 b Fj(Algebraic)26
b(and)i(geometric)e(com)n(binatorics:)349 4596 y(sp)r(ecies)h(and)g
(con)n(v)n(ex)g(p)r(olytop)r(e)g(sequences)g(suc)n(h)g(as)g(the)h(p)r
(erm)n(utohedra,)f(asso)r(ciahedra)349 4696 y(and)g(m)n(ultiplihedra;)h
(their)f(quotien)n(ts)g(and)h(generalizations,)d(and)j(their)f(Hopf)h
(algebras.)141 4796 y Fe(\016)83 b Fj(Categorical)25
b(homotop)n(y)i(theory)f(and)i(op)r(erad)e(theory:)349
4895 y(braided)h(and)g(iterated)g(monoidal)g(categories,)f(enric)n(hed)
h(categories)e(and)j Fd(n)p Fj(-categories;)349 4995
y(lo)r(op)f(spaces)f(and)i Fd(A)1009 5007 y Fc(n)1054
4995 y Fj(-spaces.)141 5094 y Fe(\016)83 b Fj(Lo)n(w)26
b(dimensional)h(top)r(ology:)349 5194 y(braid)g(groups,)f(knot)h
(concordance,)f(and)i(top)r(ological)e(quan)n(tum)h(\014eld)h(theory)-7
b(.)p eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 -33 a Fb(2)207 b Fa(Stef)-5 b(an)21
b(F)n(or)o(cey)2634 b(Curriculum)21 b(Vit)l(ae)p 0 86
3887 4 v 0 371 a
 0.4 0.1 0.3 setrgbcolor
 0 371 a Fg(Resea)m(rch)34 b(Publications)882
371 y
 0 setgray
 882 371 a 141 485 a Fj(20)p Fd(:)82 b Fj(Split-facets)28
b(for)f(Balanced)g(Minimal)g(Ev)n(olution)g(P)n(olytop)r(es)f(and)h
(the)h(P)n(erm)n(utoasso)r(ciahedron.)330 585 y(\(with)h(L.)e(Keefe,)h
(W.)g(Sands\))330 684 y Ff(Bul)t(letin)j(of)f(Mathematic)l(al)i(Biolo)l
(gy)g Fj(,)c(79\(5\),)e(pp)i(975994,)d(2017.)141 784
y(19)p Fd(:)82 b Fj(F)-7 b(acets)28 b(of)f(the)h(Balanced)f(Minimal)g
(Ev)n(olution)g(P)n(olytop)r(e.)36 b(\(with)28 b(L.)g(Keefe,)f(W.)h
(Sands\))330 884 y Ff(Journal)i(of)g(Mathematic)l(al)i(Biolo)l(gy)37
b Fj(,)28 b(73\(2\),)f(pp)h(447-468,)c(2016.)141 983
y(18)p Fd(:)82 b Fj(Sto)r(c)n(hastic)27 b(safet)n(y)g(radius)g(on)g
(Neigh)n(b)r(or-Joining)f(metho)r(d)i(and)f(Balanced)g(Minimal)330
1083 y(Ev)n(olution)g(on)g(small)g(trees)g(\(with)i(J.)e(Xi,)h(J.)f
(Xie,)h(and)g(R.)g(Y)-7 b(oshida\).)330 1183 y(P)p Ff(r)l(o)l(c)l(e)l
(e)l(dings)30 b(of)h(the)e(10th)i(Workshop)h(on)d(Unc)l(ertainty)h(Pr)l
(o)l(c)l(essing)p Fj(.,)e(pp)g(217-230,)c(2015.)141 1282
y(17)p Fd(:)82 b Fj(Con)n(v)n(ex)26 b(P)n(olytop)r(es)h(from)g(Nested)h
(P)n(osets.)35 b(\(with)28 b(S.)g(L.)g(Dev)-5 b(adoss,)27
b(S.)h(Reisdorf,)f(P)-7 b(.)27 b(Sho)n(w)n(ers\))330
1382 y Ff(Eur)l(op)l(e)l(an)j(Journal)g(of)g(Combinatorics)37
b Fj(43,)27 b(pp)h(229248,)d(2015.)141 1481 y(16)p Fd(:)82
b Fj(Recursiv)n(e)27 b(bijections)g(for)h(Catalan)e(ob)5
b(jects.)37 b(\(with)28 b(M.)g(Kafashan,)e(M.)i(Maleki)f(and)g(M.)h
(Stra)n(y)n(er\))330 1581 y Ff(Journal)i(of)g(Inte)l(ger)g(Se)l(quenc)l
(es)p Fj(,)d(16,)g(Article)g(13.5.3,)f(pp)i(1-20,)e(2013.)141
1681 y(15)p Fd(:)82 b Fj(Cofree)27 b(comp)r(ositions)g(of)g
(coalgebras.)35 b(\(with)28 b(A.)g(Lauv)n(e,)f(F.)h(Sottile\))330
1780 y Ff(A)n(nnals)h(of)i(Combinatorics)p Fj(,)f(17\(1\),)d(pp)h
(105-130,)c(2013.)141 1880 y(14)p Fd(:)82 b Fj(When)28
b(do)r(es)g(compromise)e(prev)n(en)n(t)h(more)f(p)r(ollution?)330
1980 y(\(with)j(C.)e(Clemons,)h(J.)f(Cossey)-7 b(,)26
b(M.)i(F)-7 b(errara,)26 b(T.)h(Norfolk,)g(G.)h(Ob)r(eng,)f(D.)i
(Ricciardi,)e(G.)g(Y)-7 b(oung\))360 2079 y Ff(Notic)l(es)30
b(of)h(the)e(A.M.S)p Fj(,)g(59\(9\),)e(1223-1234,)c(2012.)141
2179 y(13)p Fd(:)82 b Fj(Extending)27 b(the)h(T)-7 b(amari)27
b(lattice)h(to)f(some)g(comp)r(ositions)g(of)g(sp)r(ecies.)37
b Ff(Asso)l(ciahe)l(dr)l(a,)330 2278 y(T)-6 b(amari)31
b(L)l(attic)l(es)f(and)g(R)l(elate)l(d)g(Structur)l(es:)37
b(T)-6 b(amari)31 b(Memorial)g(F)-6 b(estschrift.)330
2378 y Fj(Progress)25 b(in)j(Mathematics,)f(V)-7 b(ol.)37
b(299,)26 b(pp)i(187-210,)330 2478 y(F.)g(M)r(\177)-44
b(uller-Hoissen,)27 b(J.)g(P)n(allo,)f(J.)i(Marcel,)e(J.)i(Stashe\013)g
(\(Eds.\),)f(2012.)141 2577 y(12)p Fd(:)82 b Fj(Pseudograph)26
b(asso)r(ciahedra.)34 b(\(with)28 b(M.)g(Carr,)f(S.)g(Dev)-5
b(adoss\))330 2677 y Ff(Journal)30 b(of)g(Combinatorial)j(The)l(ory,)e
(Series)g(A)p Fj(,)c(118\(7\),)f(2035-2055,)e(2011.)141
2777 y(11)p Fd(:)82 b Fj(Cofree)27 b(comp)r(ositions)g(of)g(coalgebras)
e(\(extended)j(abstract\).)37 b(\(with)28 b(A.)g(Lauv)n(e,)f(F.)h
(Sottile\))330 2876 y Ff(DMTCS)j(Pr)l(o)l(c)l(e)l(e)l(dings,)g(FPSA)n
(C)e(23)i(\(R)l(eykjavik,)h(Ic)l(eland\))p Fj(,)c(363-374,)d(June)i
(2011.)141 2976 y(10)p Fd(:)82 b Fj(Hopf)28 b(structures)f(on)g(the)h
(m)n(ultiplihedra.)37 b(\(with)28 b(A.)g(Lauv)n(e,)f(F.)h(Sottile\))330
3075 y Ff(SIAM)i(Journal)f(on)h(Discr)l(ete)g(Mathematics)p
Fj(,)f(24\(4\))e(1250-1271,)d(2010.)141 3175 y(9)p Fd(:)124
b Fj(Geometric)27 b(com)n(binatorial)f(algebras:)35 b(cyclohedron)26
b(and)h(simplex.)37 b(\(with)29 b(D.)f(Spring\014eld\))330
3275 y Ff(Journal)i(of)g(A)n(lgebr)l(aic)h(Combinatorics)p
Fj(,)f(32)d(597-627,)d(2010.)141 3374 y(8)p Fd(:)124
b Fj(New)28 b(Hopf)g(structures)f(on)g(binary)g(trees.)36
b(\(with)29 b(A.)f(Lauv)n(e)e(&)i(F.)f(Sottile\))330
3474 y Ff(DMTCS)k(Pr)l(o)l(c)l(e)l(e)l(dings,)g(FPSA)n(C)e(21)i
(\(Hagenb)l(er)l(g,)f(A)n(ustria\))p Fj(,)e(411-420)c(,)k(2009.)141
3574 y(7)p Fd(:)124 b Fj(Mark)n(ed)27 b(tub)r(es)h(and)f(the)h(graph)f
(m)n(ultiplihedron.)37 b(\(with)28 b(S.L.)g(Dev)-5 b(adoss\))330
3673 y Ff(A)n(lgebr)l(aic)31 b(and)f(Ge)l(ometric)h(T)-6
b(op)l(olo)l(gy)p Fj(,)30 b(8\(4\))d(2081-2108,)d(2008.)141
3773 y(6)p Fd(:)124 b Fj(Quotien)n(ts)27 b(of)h(the)g(m)n
(ultiplihedron)f(as)g(categori\014ed)f(asso)r(ciahedra.)330
3872 y Ff(Homotopy,)32 b(Homolo)l(gy)f(and)f(Applic)l(ations)p
Fj(,)f(v)n(ol.)36 b(10\(2\),)27 b(227-256,)e(2008.)141
3972 y(5)p Fd(:)124 b Fj(Con)n(v)n(ex)26 b(Hull)j(Realizations)d(of)i
(the)g(Multiplihedra)330 4072 y Ff(T)-6 b(op)l(olo)l(gy)32
b(and)e(its)g(Applic)l(ations)p Fj(,)f(156,)e(326-347,)d(2008.)141
4171 y(4)p Fd(:)124 b Fj(Op)r(erads)27 b(in)h(iterated)f(monoidal)g
(categories)e(\(with)k(J.)e(Siehler,)g(E.)h(Seth)g(So)n(w)n(ers\))330
4271 y Ff(Journal)i(of)g(Homotopy)h(and)g(R)l(elate)l(d)e(Structur)l
(es)d Fj(2,)h(1-43,)f(2007.)141 4371 y(3)p Fd(:)124 b
Fj(Classi\014cation)27 b(of)g(braids)g(whic)n(h)g(giv)n(e)g(rise)g(to)g
(in)n(terc)n(hange)f(\(with)j(F.)f(Humes\))330 4470 y
Ff(A)n(lgebr)l(aic)j(and)f(Ge)l(ometric)h(T)-6 b(op)l(olo)l(gy)30
b Fj(7,)d(1233-1274,)c(2007.)141 4570 y(2)p Fd(:)124
b Fj(Enric)n(hmen)n(t)27 b(o)n(v)n(er)f(iterated)h(monoidal)g
(categories)330 4669 y Ff(A)n(lgebr)l(aic)k(and)f(Ge)l(ometric)h(T)-6
b(op)l(olo)l(gy)30 b Fj(4,)d(95-119,)e(2004.)141 4769
y(1)p Fd(:)124 b Fj(V)-7 b(ertically)27 b(iterated)h(classical)e(enric)
n(hmen)n(t)330 4869 y Ff(The)l(ory)31 b(and)g(Applic)l(ations)g(of)g
(Cate)l(gories)e Fj(12,)e(299-325,)d(2004.)p eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 -33 a Fa(Stef)-5 b(an)21 b(F)n(or)o(cey)2694
b(Curriculum)21 b(Vit)l(ae)207 b Fb(3)p 0 86 3887 4 v
0 371 a
 0.4 0.1 0.3 setrgbcolor
 0 371 a Fg(Invited)32 b(Presentations)849 371
y
 0 setgray
 849 371 a 141 485 a Fj(20)p Fd(:)82 b Ff(Clades)32
b(and)e(tub)l(es:)38 b(fac)l(ets)30 b(of)h(gr)l(aph)g(asso)l(ciahe)l
(dr)l(a)h(and)e(phylo)l(genetic)i(p)l(olytop)l(es.)330
585 y Fj(Geometry)27 b(and)h(com)n(binatorics)d(of)j(asso)r(ciativit)n
(y)-7 b(,)26 b(Hamilton)i(Mathematics)f(Institute,)i(Dublin)f(2017.)141
684 y(19)p Fd(:)82 b Ff(R)l(e)l(cursive)30 b(Line)l(ar)g(Pr)l(o)l(gr)l
(amming)h(on)e(the)h(Balanc)l(e)l(d)h(Minimal)h(Evolution)e(Polytop)l
(e.)330 784 y Fj(P)n(olyhedral)c(and)h(Com)n(binatorial)f(Biology)-7
b(,)330 884 y(SIAM)28 b(conference)f(on)h(Applied)g(Algebraic)e
(Geometry)-7 b(,)27 b(A)n(tlan)n(ta)h(2017.)141 983 y(18)p
Fd(:)82 b Ff(F)-6 b(ac)l(es)30 b(of)h(Balanc)l(e)l(d)g(Minimal)g
(Evolution)g(Polytop)l(es)g(fr)l(om)g(Quotients)d(of)j(the)f(Permuto)l
(asso)l(ciahe)l(dr)l(on.)330 1083 y Fj(Geometric)d(Ph)n(ylogenetics,)f
(SIAM)i(Conference)f(on)h(the)g(Life)f(Sciences,)h(Boston)e(2016.)141
1183 y(17)p Fd(:)82 b Ff(Poset)30 b(p)l(olytop)l(es)i(and)e(some)g(c)l
(onje)l(ctur)l(e)l(d)g(tr)l(e)l(e)f(p)l(olytop)l(es.)330
1282 y Fj(En)n(umerativ)n(e)d(Algebraic)h(and)g(Geometric)g(Com)n
(binatorics,\(AMS\))g(Lo)n(y)n(ola)f(Oct.)36 b(2015.)141
1382 y(16)p Fd(:)82 b Ff(F)-6 b(ac)l(ets)30 b(of)g(the)g(BME)h(p)l
(olytop)l(e.)330 1481 y Fj(The)d(Mathematics)f(of)h(Ev)n(olution,)e(Lo)
n(y)n(ola)g(Oct.)36 b(2015.)141 1581 y(15)p Fd(:)82 b
Ff(Se)l(eing)30 b(in)g(4)g(dimensions.)39 b Fj(Akron)26
b(Ph)n(ysics)h(Club)h(Mar.)36 b(2014)141 1681 y(14)p
Fd(:)82 b Ff(Pattern.)37 b Fj(1st)28 b(Ann)n(ual)f(Greater)g(Akron)g
(High)g(Sc)n(ho)r(ol)g(Mathematics)g(Challenge,)g(2013.)141
1780 y(13)p Fd(:)82 b Ff(T)-6 b(ubings)30 b(and)g(p)l(olytop)l(e)i
(trunc)l(ations.)330 1880 y Fj(Co)n(xeter)27 b(Groups)f(meet)i(Con)n(v)
n(ex)e(Geometry:)37 b(W)-7 b(orkshop)26 b(at)i(LA)n(CIM,)f(Mon)n
(treal,)g(2012.)141 1980 y(12)p Fd(:)82 b Ff(Comp)l(osing)32
b(sp)l(e)l(cies)e(and)g(c)l(omp)l(osing)h(c)l(o)l(algebr)l(as.)330
2079 y Fj(AMS)d(Eastern)f(Sectional,)g(Sp)r(ecies)h(and)f(Hopf)h
(Algebraic)f(Com)n(binatorics,)e(Cornell,)i(Sept.)38
b(2011)141 2179 y(11)p Fd(:)82 b Ff(Polytop)l(es,)32
b(phylo)l(genetics,)g(pudd)t(les)f(and)g(fr)l(actals.)38
b Fj(REU)28 b(at)f(Ken)n(t)g(State)h(Univ)n(ersit)n(y)-7
b(,)330 2278 y(Applications)28 b(and)f(Rami\014cations)g(of)g(Linear)g
(Algebra,)g(2011.)141 2378 y(10)p Fd(:)82 b Ff(Indelible)32
b(gr)l(afting:)39 b(T)-6 b(r)l(e)l(es)30 b(and)g(p)l(olytop)l(es.)330
2478 y Fj(AMS)e(Spring)g(Eastern)e(Sectional)h(Meeting)h(W)-7
b(orcester,)26 b(April)i(2011.)330 2577 y(Sp)r(ecial)g(Session)f(on)g
(Ph)n(ysically)f(Inspired)h(Higher)g(Homotop)n(y)g(Algebra)g(.)141
2677 y(9)p Fd(:)124 b Ff(Comp)l(osing)32 b(and)e(c)l(overing)h(of)f(c)l
(o)l(algebr)l(as.)p Fj(.)330 2777 y(SIAM)e(conference)f(on)h(Discrete)f
(Math,)h(Austin,)g(2010.)141 2876 y(8)p Fd(:)124 b Ff(Positr)l(ons,)31
b(p)l(olytop)l(es)g(and)f(antip)l(o)l(des.)330 2976 y
Fj(AMS)e(Spring)g(Southeastern)e(Section)i(Meeting)g(Raleigh,)f(April)g
(2009.)330 3075 y(Sp)r(ecial)h(Session)f(on)g(Homotopical)g(Algebra)f
(with)i(Applications)g(to)f(Mathematical)g(Ph)n(ysics.)141
3175 y(7)p Fd(:)124 b Ff(Positr)l(ons,)31 b(p)l(olytop)l(es)g(and)f
(antip)l(o)l(des.)330 3275 y Fj(T)-7 b(exas)27 b(A&M)h(Algebra)e(and)i
(Com)n(binatorics)d(Seminar,)j(Septem)n(b)r(er)f(2008.)141
3374 y(6)p Fd(:)124 b Ff(How)30 b(to)g(dr)l(aw)g(a)h(multiplihe)l(dr)l
(on.)330 3474 y Fj(Williams)d(College)f(mathematics)g(collo)r(quium,)g
(Marc)n(h)g(2008.)141 3574 y(5)p Fd(:)124 b Ff(Op)l(er)l(ads)31
b(in)e(iter)l(ate)l(d)h(monoidal)i(c)l(ate)l(gories,)f(fe)l(aturing)f
(Y)-6 b(oung)29 b(diagr)l(ams.)330 3673 y Fj(Univ)n(ersit)n(y)e(of)g(P)
n(ennsylv)-5 b(ania)27 b(Deformation)g(Theory)f(Seminar,)h(Septem)n(b)r
(er)h(2006.)141 3773 y(4)p Fd(:)124 b Ff(Higher)31 b(c)l(ate)l(gories)g
(and)f(ge)l(ometric)h(c)l(ombinatorics)g(of)g(fr)l(e)l(e)f(gr)l(oups.)
330 3872 y Fj(T)-7 b(op)r(ology)26 b(and)i(Group)f(Theory)f(Seminar)h
(V)-7 b(anderbilt)28 b(Univ)n(ersit)n(y)-7 b(,)27 b(Septem)n(b)r(er)h
(2005.)141 3972 y(3)p Fd(:)124 b Ff(n-fold)31 b(op)l(er)l(ads)g(in)f
(iter)l(ate)l(d)g(monoidal)i(c)l(ate)l(gories.)330 4072
y Fj(Categories)26 b(in)i(algebra,)e(geometry)-7 b(,)26
b(and)h(mathematical)h(ph)n(ysics,)330 4171 y(Macquarie)e(Univ)n(ersit)
n(y)-7 b(,)27 b(July)h(2005.)141 4271 y(2)p Fd(:)124
b Ff(V)-6 b(arieties)31 b(of)f(Iter)l(ate)l(d)g(Enrichment.)330
4371 y Fd(n)p Fj({categories:)k(F)-7 b(oundations)27
b(and)h(Applications,)f(IMA,)h(Minneap)r(olis,)g(June)f(2004.)141
4470 y(1)p Fd(:)124 b Ff(Knot)29 b(Cob)l(or)l(dism)j(Cate)l(gories.)330
4570 y Fj(Virginia)27 b(T)-7 b(ec)n(h)27 b(graduate)g(issues)g
(seminar,)f(No)n(v.)37 b(2003.)1725 5119 y @beginspecial
0 @llx 0 @lly 217 @urx 238 @ury 540 @rwi @setspecial
%%BeginDocument: ribboncolor.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ribboncolor.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Forcey,Stefan A
%%CreationDate: 4/25/2013
%%BoundingBox: 0 0 217 238
%%HiResBoundingBox: 0 0 216.4585 237.5738
%%CropBox: 0 0 216.4585 237.5738
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0
%AI9_PrintingDataBegin
%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541
%ADO_ContainsXMP: MainFirst

%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0

%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.351735, 2008/07/22-18:11:12        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2013-04-25T14:56:56-04:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>236</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADsAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FUu1/VbrS9PN5BZPfCNh60UbBWWOhJcV+1TwyUY2absGITlRPCkcP5n+WLi3R7b6zcXL9LG&#xA;KBnmB+Q+D/hsmcMnJPZuUHegO+9l3+IvOl3vp/lwwRdpb6dYyf8AnmPiGPBEcyv5fDH6p37h+lr9&#xA;NedLG7sv0tZ2Is7q5jtWe3eQurSmin4tseGJ5Wvg4ZA8BlYF70qea9T8xLq+m6PoksNvNepNI9xM&#xA;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&#xA;VdirsVdirsVdir//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>216.458496</stDim:w>
            <stDim:h>237.573730</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5

%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -237.574 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 237.574 li
216.458 237.574 li
216.458 0 li
cp
clp
[1 0 0 1 0 0 ]ct
215.565 117.76 mo
216.995 129.4 216.555 141.85 215.325 154.05 cv
214.715 160.12 213.345 165.34 211.005 170.87 cv
204.545 186.19 196.065 198.69 184.605 209.33 cv
180.945 212.72 176.635 215.69 172.605 218.94 cv
168.585 222.17 164.085 225.09 159.405 227.35 cv
149.375 232.19 138.465 236.48 126.515 237.45 cv
117.695 238.16 108.315 235.71 101.555 233.12 cv
99.5254 232.34 96.375 231.46 96.0352 229.03 cv
98.355 227.78 99.5552 230.291 101.315 231.2 cv
103.875 232.51 108.105 233.52 111.875 234.32 cv
128.395 237.84 143.225 233.06 155.795 227.11 cv
165.405 222.57 172.855 216.9 180.525 210.77 cv
187.715 205.02 194.495 197.26 199.965 189.14 cv
202.485 185.4 205.125 180.81 207.165 175.92 cv
209.195 171.06 212.025 165.77 212.925 161.26 cv
215.665 147.65 215.705 132 213.885 118.96 cv
213.015 112.72 211.595 106.27 209.325 100.7 cv
207.075 95.1699 205.135 89.6299 202.365 85.0801 cv
196.675 75.7202 189.855 67.7402 181.965 59.8398 cv
174.445 52.3198 165.495 42.9199 150.275 42.7803 cv
149.235 42.6802 151.195 44.6499 149.555 44.7002 cv
148.675 44.6299 148.655 43.6802 148.115 43.2603 cv
148.295 41.6699 149.915 42.8599 150.515 41.5801 cv
157.625 40.8198 165.895 44.54 170.445 47.3398 cv
176.765 51.2402 182.815 58.29 188.205 63.6899 cv
194.155 69.6401 198.745 76.75 203.325 82.6699 cv
208.025 94.23 213.875 103.93 215.565 117.76 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.894118 .823529 0 0 cmyk
f
188.685 126.17 mo
189.135 132.27 190.005 137.041 189.645 143.48 cv
189.335 149.13 188.035 154.72 186.765 159.58 cv
185.515 164.33 182.815 168.47 181.005 172.8 cv
177.235 181.8 171.315 188.83 165.885 195.39 cv
152.755 204.541 135.755 214.56 116.195 210.53 cv
111.155 209.49 108.795 208.72 104.435 206.68 cv
92.625 201.17 83.0151 193.28 76.105 182.65 cv
73.4453 178.56 72.105 175.85 70.8252 169.91 cv
69.6953 164.69 69.2754 160.93 70.105 155.25 cv
70.6152 151.78 73.0352 147.71 74.665 144.2 cv
78.6953 135.55 84.3354 128.28 90.9951 121.37 cv
91.9453 120.37 94.3154 117.85 95.3154 118 cv
96.7754 118.22 96.8354 120.52 97.9551 121.61 cv
96.7251 122.26 96.2554 120.32 95.0752 120.16 cv
88.3354 125.23 83.915 131.81 78.9854 139.63 cv
74.5654 146.64 70.9653 154.25 71.7852 165.11 cv
72.7153 177.36 80.5654 187.72 88.8252 194.43 cv
95.3652 199.73 103.665 204.67 112.355 208.12 cv
126.995 212.14 142.905 207.61 153.395 201.4 cv
157.305 199.08 161.245 196.96 163.725 194.91 cv
167.035 192.16 169.625 188.041 172.365 184.57 cv
175.265 180.89 177.365 177.02 179.325 172.8 cv
183.355 164.11 187.285 154.82 188.205 143.96 cv
188.785 137.08 188.035 130.52 187.245 123.53 cv
186.125 113.63 180.645 102.64 175.245 95.4102 cv
171.205 90.0103 166.725 84.0898 161.085 79.3101 cv
159.115 77.6401 154.265 75.7803 156.275 73.54 cv
157.485 73.21 157.075 74.5103 157.475 74.98 cv
160.805 77.1001 164.195 79.1602 166.125 82.6699 cv
171.475 86.3701 175.335 91.6802 178.845 97.8101 cv
182.525 104.25 187.725 113.26 188.685 121.85 cv
188.845 123.31 188.575 124.74 188.685 126.17 cv
cp
f
169.005 68.4902 mo
169.125 70.2002 169.565 72.96 167.805 73.7803 cv
166.765 71.27 167.035 67.79 166.605 64.4102 cv
166.175 61.0801 165.385 57.7402 165.405 55.0303 cv
165.265 54.5 165.855 54.6899 165.885 54.3101 cv
166.265 54.25 166.295 54.54 166.605 54.5503 cv
167.325 58.8301 168.675 64.1299 169.005 68.4902 cv
cp
.180392 .780392 0 0 cmyk
f
165.405 90.1201 mo
165.645 90.1201 165.885 90.1201 166.125 90.1201 cv
165.525 102 157.135 109.07 150.035 115.6 cv
148.895 116.65 147.705 117.9 146.435 118.96 cv
145.375 119.86 144.035 121.66 142.355 121.37 cv
142.115 119.58 144.255 118.81 145.235 118 cv
153.485 111.26 162.395 103.62 164.925 90.8398 cv
165.005 90.5303 165.345 90.4702 165.405 90.1201 cv
cp
f
162.045 33.6401 mo
162.555 35.0503 164.055 37.29 162.525 38.9302 cv
161.065 38.0601 161.445 36.3101 161.085 35.0898 cv
159.975 31.3501 157.385 28.3398 155.075 25.23 cv
150.175 18.6299 144.805 13.3799 136.355 10.0898 cv
133.295 8.8999 129.915 7.47021 126.995 6.72998 cv
125.615 6.37988 123.855 6.10986 122.675 6.25 cv
120.825 6.45996 120.165 8.5 118.115 7.93018 cv
117.415 6.56982 119.295 6.41016 119.795 5.53027 cv
116.455 4.49023 113.475 4.04004 109.235 4.31982 cv
108.705 11.6499 107.905 19.96 108.275 27.3999 cv
111.905 28.75 116.635 26.6699 120.035 27.1602 cv
120.265 29.0698 118.205 28.6899 116.675 28.8398 cv
118.575 30.46 120.985 31.1699 123.155 32.4399 cv
125.255 33.6699 127.185 35.21 129.155 36.5303 cv
133.115 41.8501 137.615 47.23 140.195 53.8301 cv
140.785 55.3198 141.425 57.5601 141.635 59.3599 cv
144.135 80.7803 130.075 93.1499 119.075 102.62 cv
115.705 102.94 114.495 106.67 111.635 106.71 cv
111.525 104.13 115.055 102.87 117.155 101.66 cv
119.325 100.4 121.545 98.6299 123.395 96.8501 cv
131.785 88.7803 142.425 77.6299 139.955 59.6001 cv
138.985 52.48 134.125 44.6499 130.115 39.8901 cv
126.605 35.7202 121.705 33.3398 116.195 30.7603 cv
116.095 31.9902 117.685 33.5103 116.435 34.3701 cv
114.815 34.3501 114.195 31.3501 113.315 29.8003 cv
110.985 28.7202 107.675 29.98 106.355 28.1201 cv
106.465 19.5801 107.465 11.9199 107.555 3.35986 cv
110.635 .850098 115.885 3.1001 119.555 3.6001 cv
120.215 2.56006 117.715 1.52002 118.835 0 cv
120.795 .720215 121.415 3.47998 123.155 4.31982 cv
125.055 5.25 127.675 5.53027 129.875 6.25 cv
132.075 6.95996 134.545 7.41992 136.595 8.16992 cv
146.925 11.9199 154.115 20.0801 159.645 28.8398 cv
160.555 30.2803 161.375 31.8301 162.045 33.6401 cv
cp
f
156.995 69.21 mo
157.405 70.5103 157.705 72.21 156.765 73.0601 cv
155.135 72.7803 155.105 69.21 156.995 69.21 cv
cp
0 0 0 1 cmyk
f
156.995 176.4 mo
157.395 183.92 153.745 191.16 150.515 196.59 cv
148.715 199.62 146.625 203.95 143.795 203.08 cv
144.045 201.2 146.125 200.35 147.395 198.75 cv
154.195 190.2 159.305 172.97 149.555 162.94 cv
149.555 162.78 149.555 162.62 149.555 162.46 cv
149.755 162.33 149.945 162.21 150.275 162.22 cv
154.605 164.76 156.725 171.09 156.995 176.4 cv
cp
.517647 0 1 0 cmyk
f
156.765 66.3301 mo
156.905 66.8999 157.105 67.4302 156.995 68.25 cv
156.725 68.21 156.575 68.3101 156.515 68.4902 cv
155.075 68.54 154.795 65.9102 156.765 66.3301 cv
cp
0 0 0 1 cmyk
f
156.515 63.4502 mo
156.465 64.4502 156.905 64.5801 156.515 65.3701 cv
155.415 66.21 154.445 63.8198 155.555 63.21 cv
155.995 63.1699 156.065 63.5 156.515 63.4502 cv
cp
f
154.835 58.8799 mo
155.595 59.3799 156.215 61.2803 155.315 62 cv
154.565 62.1201 154.685 61.3599 154.115 61.2803 cv
154.195 60.5601 153.855 59.4102 154.595 59.3599 cv
153.895 58.48 152.755 56.8101 153.635 55.75 cv
153.955 55.75 154.275 55.75 154.595 55.75 cv
154.855 56.6401 155.805 58.21 154.835 58.8799 cv
cp
f
153.395 52.3901 mo
153.785 52.8599 154.175 54.1401 153.635 54.79 cv
152.355 54.9502 151.875 53.3101 152.435 52.3901 cv
152.755 52.3901 153.075 52.3901 153.395 52.3901 cv
cp
f
152.435 51.1899 mo
148.755 49.7402 154.175 47.9702 152.435 51.1899 cv
152.435 51.1899 li
cp
f
150.995 45.6602 mo
151.555 46.2002 152.095 47.4399 151.235 48.0601 cv
150.225 47.8799 149.955 46.9399 149.795 45.8999 cv
150.075 45.7002 150.445 45.5801 150.995 45.6602 cv
cp
f
145.715 138.19 mo
148.055 144.43 150.785 153.97 149.075 161.98 cv
148.605 164.23 147.295 167.55 146.195 170.15 cv
141.585 181.12 133.075 188.65 124.115 195.87 cv
119.905 199.26 117.555 201.99 111.395 202.6 cv
109.465 202.791 106.775 202.73 105.635 201.4 cv
106.725 199.5 108.805 200.93 110.435 200.92 cv
113.005 200.89 115.225 199.92 117.395 198.75 cv
121.735 196.42 126.545 192.52 130.595 188.9 cv
138.295 182.02 147.515 167.58 147.875 155.73 cv
148.075 149.47 146.195 143.14 144.035 138.43 cv
143.315 136.84 141.675 135.75 141.635 133.86 cv
135.475 127.03 127.015 122.94 119.555 117.28 cv
106.115 107.08 89.6152 100.76 83.5454 83.1499 cv
83.7754 82.98 83.915 82.7202 84.0254 82.4302 cv
84.415 82.3599 84.4453 82.6602 84.7451 82.6699 cv
91.2651 99.4502 107.885 106.54 121.475 116.8 cv
125.035 119.48 129.675 121.73 133.715 124.73 cv
135.445 126.01 137.155 127.86 138.995 129.541 cv
142.465 132.69 143.975 133.541 145.715 138.19 cv
cp
.517647 0 1 0 cmyk
f
142.355 157.66 mo
139.925 158.12 138.295 155.84 136.355 154.77 cv
132.385 152.59 127.915 151.4 122.915 149.72 cv
119.175 148.47 115.845 146.77 111.395 145.88 cv
111.325 145.49 111.615 145.47 111.635 145.16 cv
111.825 145.11 111.875 144.92 112.115 144.92 cv
118.715 146.19 124.955 148.07 131.075 150.45 cv
133.175 151.26 135.585 152.26 137.555 153.33 cv
139.435 154.34 142.095 155.55 142.355 157.66 cv
cp
f
136.355 71.1401 mo
135.905 72.6299 133.655 71.7803 132.515 71.6201 cv
116.865 69.3999 101.395 70.6201 86.665 74.5 cv
76.8252 77.0898 67.5454 79.48 60.5054 83.8701 cv
57.4951 85.75 55.5552 88.5698 52.8252 90.1201 cv
47.3154 96.79 41.875 104.68 37.9453 113.43 cv
33.6753 122.94 29.3652 134.43 31.4653 147.08 cv
34.4653 165.21 45.0654 181.39 57.3853 191.06 cv
63.665 195.99 71.4951 199.17 80.9053 199.95 cv
83.5854 200.18 85.7051 199.58 88.105 200.19 cv
88.5454 201.09 88.5854 201.91 89.0654 202.84 cv
89.4951 203.66 90.9951 204.16 90.2651 205.24 cv
88.0254 205.01 87.7153 202.83 86.1851 201.88 cv
75.7651 202.44 68.0654 199.15 61.2251 195.39 cv
54.3052 191.57 48.0752 184.71 43.4653 178.56 cv
38.605 172.09 34.3853 164.69 31.9453 155.49 cv
31.125 152.43 30.0752 149.24 29.5454 146.36 cv
28.6953 141.78 29.4351 135.99 30.0254 131.94 cv
31.395 122.45 35.7451 113.67 40.105 105.98 cv
47.0952 93.6499 53.6553 84.4302 67.4653 78.8301 cv
85.5552 71.48 109.335 66.9399 132.275 69.9302 cv
133.575 70.1001 135.685 69.6201 136.355 71.1401 cv
cp
.87451 .247059 1 .133333 cmyk
f
127.955 39.8901 mo
126.165 42.3398 122.375 40.4302 119.795 40.1299 cv
108.025 38.7603 94.2451 40.5801 83.7852 42.54 cv
83.7354 39.8398 88.8652 39.5801 91.7153 39.1699 cv
100.625 37.8999 109.745 37.96 117.875 38.4502 cv
121.435 38.6699 125.425 38.21 127.955 39.8901 cv
cp
f
112.115 134.82 mo
113.975 133.98 114.415 136.48 115.475 137.23 cv
105.895 146.01 95.625 155.35 87.8652 166.31 cv
85.4551 169.72 83.4854 173.291 80.9053 176.64 cv
79.7051 174.55 81.5254 172.26 82.5854 170.63 cv
88.0552 162.291 94.9854 153.89 102.515 147.32 cv
106.445 143.89 109.485 140.3 113.555 137.23 cv
113.415 136.08 111.585 136.64 112.115 134.82 cv
cp
.894118 .823529 0 0 cmyk
f
112.115 134.58 mo
111.555 135.07 110.275 134.83 109.955 134.34 cv
109.975 132.63 112.065 133.19 112.115 134.58 cv
cp
0 0 0 1 cmyk
f
109.235 222.541 mo
109.605 223.23 110.445 223.57 109.955 224.47 cv
87.6553 228.59 65.875 220.89 47.7852 215.58 cv
27.625 202.041 9.55518 182.65 2.41504 155.97 cv
1.42529 152.26 1.30518 148.8 .735352 143.96 cv
.625 142.97 .0952148 142.03 .0151367 140.83 cv
-.14502 138.28 1.00537 135.9 1.21533 133.62 cv
1.36523 131.94 1.04541 130.18 1.21533 128.58 cv
2.8252 113.25 6.3252 100.29 12.4951 89.3999 cv
19.915 76.3101 29.4351 65.1899 41.0654 56 cv
41.2651 55.9502 41.2852 56.0898 41.3052 56.2402 cv
43.125 58.0601 40.0952 58.79 39.3853 59.3599 cv
26.6851 69.4902 16.395 83.8198 9.61523 100.46 cv
5.74512 109.96 3.42529 119.16 2.65527 131.22 cv
2.42529 134.91 1.96533 138.92 2.17529 142.75 cv
2.25537 144.13 3.04541 145.75 3.13525 147.32 cv
3.625 155.87 6.8252 164.19 10.0952 171.59 cv
12.5151 177.06 16.0352 182.49 19.4551 186.98 cv
25.9351 195.46 34.645 205.41 44.1851 211.49 cv
50.7051 215.65 60.2153 218.01 69.625 220.14 cv
78.875 222.24 88.1353 224.22 99.395 223.75 cv
102.475 223.62 105.025 223.81 107.315 223.03 cv
107.595 222.77 106.505 221.28 107.795 221.1 cv
109.675 220.71 107.685 222.86 109.235 222.541 cv
cp
.87451 .247059 1 .133333 cmyk
f
109.475 132.9 mo
105.755 133.86 108.695 128.97 109.475 132.9 cv
109.475 132.9 li
cp
0 0 0 1 cmyk
f
106.355 129.78 mo
105.395 130.87 103.305 129.47 104.195 128.09 cv
105.515 128.05 105.965 128.88 106.355 129.78 cv
cp
f
103.235 217.98 mo
104.265 218.52 106.115 219.34 105.395 220.86 cv
104.435 220.25 102.555 219.44 103.235 217.98 cv
cp
f
103.475 126.89 mo
103.345 127.09 103.225 127.28 103.235 127.61 cv
101.995 127.81 101.615 127.15 101.075 126.65 cv
101.195 126.3 101.425 126.05 101.555 125.69 cv
102.625 125.65 102.835 126.49 103.475 126.89 cv
cp
f
102.515 3.83984 mo
103.425 11.96 102.965 22.1099 102.275 28.8398 cv
99.6553 29.3501 97.5054 30.3101 95.0752 31 cv
95.2651 32.0898 96.9653 31.6602 96.5151 33.3999 cv
95.0054 34.6001 93.8052 32.5898 92.4253 32.2002 cv
88.8154 33.8999 85.1353 36.9502 81.8652 39.8901 cv
76.6851 44.5601 73.9453 50.6299 73.9453 60.0801 cv
73.105 61.04 71.2554 62.1401 69.8652 61.7603 cv
69.8154 59.9502 72.0952 60.46 72.5054 59.1201 cv
71.4551 48.98 75.5552 43.2803 80.9053 38.4502 cv
83.9551 35.71 87.0654 32.6802 90.5151 31.2402 cv
91.8354 29.77 91.5854 26.71 93.6353 25.9502 cv
95.0854 26.8301 93.3154 28.4102 93.1553 29.8003 cv
95.9253 29.2202 97.8853 27.8101 100.835 27.3999 cv
101.675 20.2202 101.925 12.9902 101.555 4.80029 cv
95.2051 4.22998 89.4253 6.27002 84.2651 7.68994 cv
82.8354 9.03027 83.1553 13.23 80.4253 12.5 cv
79.9253 11.1602 81.3052 10.1499 81.625 8.89014 cv
78.895 9.66016 76.4253 11.1001 73.9453 12.5 cv
67.9951 15.8501 64.895 18.52 60.7451 24.75 cv
58.915 27.5 56.6851 30.3003 54.9854 33.1602 cv
51.165 39.6099 48.4751 46.4399 46.5854 52.8701 cv
45.5952 56.23 44.6753 59.9199 45.145 64.6499 cv
45.395 67.2402 46.0552 69.71 46.8252 71.6201 cv
47.9453 71.3198 49.4253 69.8501 50.4253 70.8999 cv
49.5952 74.3901 43.5552 72.9702 44.9053 69.21 cv
42.6953 67.6201 42.855 61.0898 43.4653 57.2002 cv
44.7954 48.7202 48.9751 40.5103 53.3052 32.9199 cv
59.5654 21.96 68.5254 10.5303 81.8652 6.97021 cv
81.375 5.54004 78.8252 6.16992 78.9854 4.08008 cv
81.0454 3.66016 82.8252 5.5 84.7451 6.01025 cv
89.6953 4.45996 95.4453 2.47021 102.035 3.35986 cv
102.135 3.58008 102.245 3.79004 102.515 3.83984 cv
cp
.180392 .780392 0 0 cmyk
f
102.995 141.31 mo
100.575 142 97.9453 139.55 95.3154 137.71 cv
92.8354 135.97 88.7651 133.66 88.8252 131.22 cv
89.0654 131.22 89.3052 131.22 89.5454 131.22 cv
92.9854 135.63 99.4351 137.02 102.995 141.31 cv
cp
.517647 0 1 0 cmyk
f
102.995 217.74 mo
101.445 218.62 99.2051 216.42 100.355 215.33 cv
101.445 215.92 102.685 216.36 102.995 217.74 cv
cp
0 0 0 1 cmyk
f
101.315 125.45 mo
100.015 125.94 97.9951 124.31 98.4351 123.05 cv
100.295 122.95 100.715 124.291 101.315 125.45 cv
cp
f
96.5151 211.25 mo
97.4253 212.06 99.2354 213.11 98.6753 214.61 cv
97.2754 214.09 96.0254 213.42 95.7954 211.73 cv
96.105 211.64 96.165 211.31 96.5151 211.25 cv
cp
f
94.8354 210.05 mo
93.4854 210.53 91.9351 209.31 91.9453 207.64 cv
92.165 207.46 92.4951 207.39 92.915 207.4 cv
93.7451 208.09 94.6553 208.7 94.8354 210.05 cv
cp
f
84.9854 219.66 mo
81.7651 220.94 79.165 215.49 77.7852 212.69 cv
76.2251 209.52 74.165 205.64 75.145 203.56 cv
75.4653 203.56 75.7852 203.56 76.105 203.56 cv
77.4751 210.52 81.165 215.16 84.9854 219.66 cv
cp
.894118 .823529 0 0 cmyk
f
78.7451 122.81 mo
79.6753 123.541 81.6953 123.94 81.3853 125.69 cv
78.9551 125.91 76.875 123.33 75.145 121.61 cv
68.915 115.37 62.875 108.63 58.5854 99.7402 cv
57.395 97.27 55.4854 93.8901 56.4253 92.29 cv
56.665 92.29 56.9053 92.29 57.145 92.29 cv
59.1553 96.3999 60.5952 100.42 62.9053 104.06 cv
67.2051 110.82 72.4854 117.81 78.7451 122.81 cv
cp
.517647 0 1 0 cmyk
f
74.4253 184.33 mo
74.7451 184.33 75.0654 184.33 75.3853 184.33 cv
74.625 187.68 74.0654 191.03 73.7051 194.19 cv
70.2651 192.59 73.5654 186.8 74.4253 184.33 cv
cp
.894118 .823529 0 0 cmyk
f
71.5454 43.5 mo
71.9351 45.48 69.2354 45.3101 67.9453 45.6602 cv
63.5952 46.8501 58.5454 49.0503 54.7451 50.9502 cv
54.1553 50.5303 54.1753 49.5 54.5054 48.79 cv
59.915 46.9102 65.4351 43.8701 71.5454 43.5 cv
cp
.87451 .247059 1 .133333 cmyk
f
65.7852 63.6899 mo
66.0054 62.5 67.8652 60.9102 68.665 62.48 cv
68.165 63.2603 66.8853 64.2803 65.7852 63.6899 cv
cp
0 0 0 1 cmyk
f
61.9453 65.6099 mo
62.125 64.2803 64.0654 63.0503 64.8252 64.4102 cv
64.4551 65.3101 63.0254 66.1899 61.9453 65.6099 cv
cp
f
58.105 67.77 mo
57.5352 65.98 60.0952 65.0698 60.2651 66.8101 cv
59.7451 67.3301 59.2354 67.8599 58.105 67.77 cv
cp
f
54.7451 69.21 mo
53.9253 67.8799 57.125 66.1899 56.9053 68.73 cv
56.2852 68.9902 55.7251 69.3198 54.7451 69.21 cv
cp
f
52.8252 69.6899 mo
52.8853 70.8701 51.8452 70.9502 50.9053 71.1401 cv
49.9053 69.9199 52.0454 68.4399 52.8252 69.6899 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5

%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 14.0
%%AI8_CreatorVersion: 14.0.0
%%For: (Forcey,Stefan A) ()
%%Title: (ribboncolor.eps)
%%CreationDate: 4/25/2013 2:57 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb!R&B7'3\dO>$BhUe%m!3$Nu]++!JJb7e<Td:j*5_,rLfCRu!p/a&5goubepO:[Rk;iEG6'aCVBJb.=Kn\pfDl_H&]l1C[PDb6S
%'G5IJ,&9M5&]L/f/M-6G0'YTDVfYs9%-X+FA;t\4ZYAu;RCjc?%8jnWGM:U)ms;$aennLS]jAG/Cj16:8H/'u.rnmD-VqmIqg,U%
%rc_nb=g!49GII4q;PDL>(Y[^6E^)kp'<kK$9&%+?B'n[R]2J+[aRjRjQV0='FcQr$7Y\Z\qgPU"r2nMqaM@K&r\o,Z_^Ba:IpCS%
%IBjhJ*LpmDq#8W(:"%8b0D9WfIrFuUh/^9XDEZ$#fP\=m?1*17_I<UR\uL7(RcSu=Of/OP6mhqDs5dP-iph"\<0Xb`BbL57:1n]D
%MeJ!>(1l0TW*(>s8@$+hZ1)#uX&8n@0!\P3fBQXrcE2!aZLL/%Qm[F$J(^TThe'QKh.lT(.O8iR;LBOpC\9#m_]]B31*B6*rtDMa
%=c]V(pV#E2FOG(+!hOEE_h:AMm&9i+]ut@(5YaE6elDSO-^t`k,HXFWZ<S+u/o#.>d.N3j+V^II&d8rQaT#h(_alHkLB(kiE(2b\
%[+fhDZuUPOHE#P6e>us-V2.G;_.BDOg]+SWIr)Q(mJVLI`MZLF0n4#!,REYp97XV.Wo`!mYRs-7$ep>N>(icAm<A9RqLQu6&AK6o
%$u@>_[)i]8((<=sY7pcV.%N5FahqSsrS-"D]sVMP(#,ar/+pt`[p14B,H$gQHF4iU`)qZbfB$qG?Vd"-SbS;?a9oQP#^o<Oa.MG-
%Dt)X<n*ec`aFU`'TWPi.^Zs'ea#:0T;Jt#/\)hKTbi%Of\'!M44tt#@CA^MlPR4XsdB0iR_j:0AK^[Dp[@TB.rTP5_2MN+?o'c$>
%]@lCrRfhAKbeHNjY$^Y+:0Vh/h;@'ZjJq$RRNo-Km#d"tDP+Z7Nr`^5p&[K#rc8=jQ^c7>Hahf+BN2[bpNUQWnp*/.'ibk3?4`Zg
%9ONKkr%m72U>Hk@,)[YdMCcuZ^H8)b6nU^H*GC2!"^=c<>dZsZVk#W@;F>_AQ9GDmfDiGhJj4>/CB(o"^EP\R5c[TpPW:1Bf-<lX
%pp*12F5;3r6r(igBiWZ>b[mO:$^sL2M!k7s?O,Yq:X\t*L_;_.4?a.8g'i7M6$qJ=aM=$/Xj$\nOs*L3rpZ@K6rHEipj>IsOL#R^
%9KN(2^G%6fpp:H8;996pP+i>!(+',u$Mf1$Hu_]4a^p;IMiqA/<@RfP_-(sFZm+sgBF9fr^&6XO57aB<@,^*srtZi7UJ+ART,8V:
%Ecc/RE;4-2.lW;k<N!/`X&&e&=uaa.#Kq6?k@[fc^MO@E3T=^'j+n-/^ujR,BU:G6PUOn6<%!3ir]f77#'79M6"#o=qYs=$?RG0:
%$u^[@L7aGTTVpTDRl/tA+.WrPhrjN%,kdl!ArCb%&U*&K<.=^eU*:ngo2`>)riZef,q-3NeIQ+[G3^a298[9R$*)4in5'(&O@o:-
%[b0l1r[N,=/*'*(&dUncG4ba6h#'#k_h4OV`tg[qX<3p+ch[24H;kLM<tBq[B"Rn>YD#:Vn!a/E/?mPf-\rUOOb@>&Km/-L$*d<R
%pLt8Zj@Bl8OV/-=NH1ju%s9YEm.C<=+cO\\EdrdU$deX?61D,(l>Nl`rr*/,^HY>b\R$/<,`n_\*/:B@s2MSm'DeWOkPqZZgjAqm
%5CgKJ0Atp)Au#5&%NCaF4g"!A,]cg92Zm+Z;/a*sKK=]sf7*r#Q:*=,W.m$KJcBW;qB)E^a*R_0QH'%[qU"@&-esj_V_!a\ObU%(
%mng(]qk(0o87oKi%U)Z)h'[Ng;>mUm@lL*I2u(fc7\r@VH.i2a<pLScrFb=.7+D/[k4)aGQYT"BR_iU@'2N5C`]PTAB[51u^+LmL
%+YD@'rS#sYr&1&"%s(\<p;gYe:\brja7WWrpH)hQ9Yk.]h.fmq1d9(5^*lHE?Oheu,:jU5mmbU6oj5<RZ!!"e_ZRiS\%;8'(-1B(
%eNKip`gqTG6qe!`s*,5^2cLj+#%'!@A4oC^0%>i"989iZNY`?]5iQ2-N(2`Qi4IeAEq>#lVqnft6efc.#!]XZk:sA>,L+qAel6KF
%3Hd"2fdYNff"Q"g8%*mDmDq`,f<9B;s&4,og=jkB3opi;DQiU/gI.s6Mr::%\_F<pbM??t$F+X.6'Dc2m)4*"?Z,gBmTj##6jo;/
%7,H/DX>V"<1*2f*s+tj`mf[ZLa=A8RJF6e;8GfT:[f`5<hV`u*DmY#kbsn`Tl1M[U09[JmW[b'`bDV1=MKMgONSL`;LMn:Y+EL@L
%h_(WfoiJi\-c9$.c#TlM280pdk:H2SC0/.UN6"'i!XJC8O:tX^f?(,[kcEal;$B]0YfPjNn&$CRgh>GFjJ4(NP2VH=M<n.mCtJE!
%h;hY!ojO?4l#4=(Q8W8/P&9i?\(p7kb(Kjts!AsLC4onf$6)#@gNF(_HMb()G.,a@3k"10'C$=+NlZ+?d4\Q>bsq_O(Z4fCG=UcG
%qeu;D*]\"[bai)AoMsZ%>.s(7AKmP+G2N,N7Ojbd^ZrkSc$k;8Zn8]fYEL;%#eN'-A:<]%0S3Z@.i\.cCSG*dcDVT54hD[h$L?^n
%-H+&HKT)`3ANnk61taZE,q_1F?3mRdC^s"aJW=9!#Z8;H)mK(ekZ#WSs,%%WY?N@^mF>Vgh2l\/]/DH'-rAa'nlP06?SRBQ,$G6=
%$H04pJE9'@a[THNMu,s^/`bjW?Gf14O.`sRGbg?BWBNS3Gn:^9-7UVfU-_peA4N%[k(`H\D$R7eE(&EnfIb\nE;1P?LU'H0*u_j;
%8uY*LE\K`cq$8Aj&iK_FnqdCgikUBW^r0Vnn$?iN)!r+\A[HpmS2o1o?OO-sER&a*dnNbrD8<E-:,NsCjLh&M!h5mqUYXq]ZbG68
%NfVgfrJdn^(9.3Pg$'+qZl=B0@=XY2OW=R&F\g#lQX_XS=MeAm7Dgp>etAc)(p_ghJ!8Id-eGJsgYMUGn-W8F*WlrWhep,B\QLj]
%)qshcT]osi::'e@!8Z!seQ+=7\"lrpLj)ehng)]Yn#pgD_W\lu&N.j5.ssEYM<,='n$c=^?#)KFa0S_5[plL7p&`f<2i2'[#+_l&
%]$c*R)`6_a\lF55gT33'?Ia5"O"o1X:/)=r::WU1Cg8!-+-77C\$8KMDP3u<lFd3.C%(bf:>2\WH_H%5!ja4]p7t3j;f*'2d0mek
%p8IqMA6HP$+*+`FJj?R2gT$!<(>-=UC71s#\(ZMkL9g+0\"0S<Y1&a%aDJUWU`Rq?C6>FHjmD<c;`sW;'Kdg":8ciqCR>?%nchSU
%R!Q[@CtR3nJjq-AA0#6H;fN\*d-EX$j?]?YeF&(L']*=QfJY8(9:[!ZYLs7IY>-\In9"]3=1jS8&N1(H3ZuZ,XWO]YhdgC$U7$2l
%g4Wa^J>Sm:^N?uUD83dWl@F#QP1JI8;amn?H]@c#fu'9O<9>^T>8fIJp9YKT@)m;kdcc1IK6S"#V4G287EeQa'D>+!Rm))!Ju/o]
%9e2n=PqF$a\t8t>G<r&V&"<[cq*m@18%\X_/pE\p)d4PJd<mb]1='RC'1,,r*J9R`Pg/k:KT&9i.4WU4:t`98bY)LDqMi3X%;AE,
%4:0B$S9-Fg>frl:oYIhM&/0"b^TK.#EN$GM%[0MqgC*'GVY3C&fPo-pk\Y=#&=pF.AU.C%#7&Y(qdXW1CZZddg\BXpcM!Z]kjFhK
%Vs`\Lk\mZ=e#mT+c_/`]Q-2qsXka?F!iXCm"*<]9+VCHJeb^sN9GW"tTC)]g66k$]l[(&"#$Mu-C]-OhP]oX_:EHB!3>mCGp.7+n
%juMYu!e@%06f!XMn%XM18[b5XreIIl3;ksD]YE:OZf5D7gG57(Bt#c7c,U!'Sj/b@<sB_uS%t?I]$0X3)sU0=GT)U4=BAl&`5YLt
%,@hG-M8[D(?\Z<@AbA/5Rh*fh^[T's]Q)KZhKd9[^\6eBf#g'm_Yq(A<(a5tBHPX3]XJYNAX4qSQtTt-CGd"pH,rI=*t@f-odq1Y
%r8oW,alC"(BM(7MKZr.u%,n87I/I768\JUh]:CTdj7IJ"hDSn3HdKJK<`?2U[XK_72=%6G=/tEiQu7+rXg45YS/c>dAp`j`hWesh
%d!ef/G.UN\_TkO-ri332[8n$/\+CF<,L;u0nu:^Y!q8bP>;0>\>!C*S"4@C"*VI#"Q/37,P2$j/asC>L27K/SkheoamB8sP[O<?`
%;et1VZd;o&K,_R^ojW"TQVR9ek:<+f)+DO>=ns=-MbWd=rJhQV;tp+_l.d4m;1DGaq_)YZW%[`i7g+bYYQ\$B*#9@'Trpjph4D.'
%onIc>4t3g9DV9V6^fZ,69?H4Y%oi3H<aNAponKL%h['Hpq:HAGCn[^<0_>-0r5<B]6K.3Q`s8V&[r?N$[H.Yd<@H-U>[($52)`7h
%eE52.-%4s5jJU>0`h8nT/\*PdYOn;AKM!YuZKp;tHQ_Nbl/2[E`s9(3rMZe<k7[uudN0O0Qdp[@<4.!4gUEj0#atfIG@)+%DLA)m
%W`j10P<GW5[[q%pW-a'%p>^SUHb$2`Z/1YXf_'jMrI#Csij"K`B.p2M+hP@(5m8sfXe!5>l)o7u<UQK5_XlW<k?;L+]p4;Tbfut#
%<!#N;-@\g=QE/7^e_`;]IF]=]FF0RbH%<IgJDp+:nqOjr4XO!JW7l2DpIO2UB2J%q0c*gVo'#Co6J[(d.QH#UYULPTm]'Si$(0T9
%hG6rIRQK+4YT)ltEjt!8Fn;Yuhsu?p(`+fGoc?Fg8ol0O0_KNiX!de9:bPH\/&"hUT(WZ&]qD)B:`f5Fc-i0AM<*?b\_kU)9$QjY
%H?1@?IA's`1W:\--"&j$HRRZkj@p_p)tBDagXe#QW4*_2AM:!tT`K,3[+2qa61U3`4J,s!]qM$f^45#,X=eidII=#Z&Ltqm_<$-<
%,o5tITGE4/q9Q'"eC2ZepMm7#G<lBd#^H)"V>27efSeUX#Y,SDH+%(%*hJAZn*QkO:_NqdkB(SfrpoqlK&^!<>jJtfqmq/0c_,_u
%QX,be;)ga:&ZW4F*nta&9m:sQ#BKl&AO-JRN)q!qUJGr7JO&&X%Ih?7G*YJNM!ZNp(liJK:7!BYkC2j7J`6BH@V'KF!5K/]R6eQ3
%/Z/08`D6QCnEYh_D/@-.eD,?'\^nI[m=iMZKIUnF*uuM("@JM;pXiCpO(SGm(dRX`G&d5YJ%e^O8cu`;]2`QN-PkcCn#+nEE9R2b
%USe4?%_q,hWj)MfkkdJJ=r5AqZT54eA.o<lked&k%QsDp2LC^TVAJA`kV,7aZ[3c70&+%1[^u>"o:G5nC6?;<^Meqo&%_N$qhrkH
%e(`]"T;VXQ_u54uT(g]$iL,3V8gMnnT+5&hA97]nalhpIgK@:d8U3KW:*)eU>G\,3dZ0!+F$ilY:US1-o&K/LcdUFs9n)bYe+M3W
%g<oWbm<lCJmIU0\ZBWtDT"L[:D\YIfic<iOl,a)7l-E[M2rW6EmdjZNAL*nGh`pMX=5E@pHN/Ai?'J:[>q`!:00bmn559HgkCtc_
%O/M)$Bl,c-(OV?G^H3n:B2@jMYJ1Ci+%r7'Z^sr/DU3)WZ09;af@+V]X`R=RaID@t(j&:ZG*'0,:X?MbiTU>,l>Dm$HdV#Q*RCXu
%YIW<V_J8]XT+3')FBFGSDr*+5Xk2/dn^WY6'R#RHX_7Cj5EV-9H`q(-ds0?TN&QON&R@S*&YmI=Mq_q9k(VHZV:np+p)*g`^WsVa
%bst]f-))U>IHgC3osOK0REjn@!jk4*NfDU&0j3sod28TieD$u0GV7HIX2Kk[2nM`LTo>1lG%[YJ[BgQ'L?@66WOtDBK/>R_VT)GD
%ro2+p$ePJ1nL&gbZ\=a103"XLXe#;Re`OZ+C<7tP$a9`urC[.?@T<#U=tFjc9rKhI*&bUPhV=1cqo#0DRnb4ngS$*`o6(P7DdM(h
%eeT(b/>rP\V0RJu!HoV(BWgA)<Oom=LH8Xa(S&Op#oHAE+/m-;,c4#L%r0c6.]Vc&+m6IBe5LagJs(0ALZ,$4Q)PbKjmFe5[T6'7
%"U*fE?YhMnIVYYRS^,dA>em9'm-.\17)//.l"e,T2dk/Ol[1kJE#iEYH8:f=DYHoi.3O-%5r%.bgi2>CB>8\;6-t"LAH-HO2HLDM
%PL0#&Or*hEFgahcjjIY1c+JG/9r=@pYBOH`/%:Rr^u*Fbe9;\dT/dS%ZHFc<>si-lO#u@lp1FDPa`IrL#Hk9!0%g.HCsl5$RGZ3=
%q/#SVG@:lf]GtJ1_L];&JH#U<3:%27[o7>W4,NWf]P#-U%J@^+1\,T!,h_WA!i5#!Ip,"eZs7[p2!/gMr.h#2qK?flMdAqeYh#,L
%Ndca.*ridTS*h=Jg^k!W]N.S=fGBDEPj`e.[aEerH/n&PGh=&aNu?>q]nDV.\4AC4Q/uD$L#9f-AIDNp'#"E:]CDeE&8T2*hSPWK
%[e+VWQG+p0ZB/[rYI7Q)?eQG*qgPKifEce4lrSMLW+SZm_3^&fh'ZEE0!tM?n(8eNlZ[@m!bUYV]^1Nfcb6&5L?so;io)([f"@(,
%maGl7E(7q6POQnnh,QOe^0RtL&&"?T_"!B\/l&!F3BS3oEA"LcdJYm\*8QPF/G[OYW0^0/f")ick#b]4&_H-h;t#njVplQh,X5nI
%qm;Q10H9UG3lkU*T;<?pMS+A<er*<gL`";G4W\LtEj5j6_0p3!:=;naM1F"El,O@1Gn3>=T@7kn?BNt0"'D-Xq?_-AK23R8k]4N+
%jg1Z&h'DrSm?cJrVN$Hqla<Rf5WO$'ra@>i^#'k6;P$#eI0h1jd8$dR-:S;&pZ"%gkssHVa<#RZ1V"Otd*CG$if$@/Ii09Y[ZK+E
%]7HJ2//Ke1Sp%PAn<$\fZq1Kker!3<CD0VPAu&0#14D_pWdM;VR=6G#N%\:AB'>bjZU*$gRSa>rNr]*Fo:+2Uk5o)$d9"q0*4PRP
%'Pn@@[W.\;(Ocn,VWa1;Jt?M[g/<2TG[a3XiC4buQ39q+).CS5r+LTPAQmgE1m$j1]9=G`ak]EV)Y8V:Eg*s#mScmHFq9VWmc^+G
%2-ChBJ/S%3LG0=0Y3X?]hY2CtDi:Mrg:+NmZ0+$t-TRdeHd_NSp>H;>1^sj(mUgrY_86[@fLJG.Gfu1VLMNF_#V)EoL\3V$XCf.Y
%Ym90-'4S"oX?bB2QicA0R:6"9bY/5JcEY_OMuiF9R$KSVYi;60C\t91N+TZMd&?1JG@m_bjtPqH@<[ULG5@t"n8WsEZX@cm"A[rt
%:l(f'lT6J%2PWr]9NGOuRdKHimSAZSO;0C.lkf.siC<853#Ls<9G@Qu4+0bQ#j(l$W;-qlT_.%:&>qm!jCI-%r";]["?T0Q9_Zk]
%iD#iU%md$cH4IbmfYd,m(3),;n>/m1YE#0!]WUp5-QRK$GjlZh3$7RH3cL^5?Y;umdt-`0o>/oG<UL*_.Iqir4:8u"k7E[/"&$0`
%$$p]S$5k'(ee*Lc^fr9/$qTY<*$O2E6G<,992uHTmmYkT*W1Y2l62N;^RdQ[rDCGk`YU?D9W:+2]>W%)6P/>AgMmh4NJT]$&l(;'
%;P=8lRXOC#Z^plhdAUKB2VX#Bq:qA$1\ERc,QG"!0J1t/^<WEN0$5e^D'[Mr4.jO'3HRp50uuM%*lY$.mQ%Eh>MckrO@(Q*^][O4
%Th>fS`<nY]!6-;ca2:WUHdUu,152?]RL9DL8!?TCR`k=[VsoVb'$d9aZECg_huagDqHO.t=RsDX%Ii,M>cSnSYD.1<_.]5jkCui;
%Ya6+p'.2hfH-4SoIjZLEgpmD&BTEi;+38/4N\DJXKH1;dpaG,M:MtBkSO8Gnd"m;#mMG@0bo(178ZXtIN)W>T[bPIBZqW&56"A=q
%#rK)S"t&XP2%#-RqIp^h=!=h_;bY"<m:"&)ghk_s]3UKCh0bbBjGZc`]CilB6JpbpH]QSPUIM-Q$lO\LdA/3>:jHM9>g?*e"g5PK
%gGiHrH?AT;l/f^3-Kf9u;i9So5UG=WgSRg9?Y>IT5S3^8_G2,@[NbM#fo??6\)Lk2SSU&S`(XKEG3+[:c(t]0d<0ZnCN"uhn<5Hs
%ijb<GIPdop7N7'A;D-nNFRM;d-WITOp"RoU@e893XgUJ)6R!e^)*3j`_]*;NYSo^P`*!g7MPl?q&]c%TOT,XXe^qK%&NJL#I_m5d
%R,hQ`VgQ.J7/M1ilI-7N`sI_l0YrK71lJ7@Q]G[a0IE[#E-*!>A@.3l1O69!p%^%m[G0(l@,>A[FqX3"0a\SSPDQ\O0C@Y4'P?5*
%%MVN!"q*qbfp$-1V+KaC9/o6RHI<Fd*6^ZCbugr?Yl6^;iFnFHp=(WD[DQ'1+;9+l2-CsPUrP:D[fNqU&7%)F&o;T%10UW?)+"WV
%6`EH/%tU8&M6ti#f\L)>e(8-A$[L`a_Q`)hTKfRQFmHs;LM,takN%%p)*s$;B.cc@p(10s^1,7B&+(mH._Pg<c6kJ%^b9Zq:>trb
%Ar&eY#5e,M=0V3/2Q8<)LAGnJ)Z/BM'`N[2qOqVK37>\=U&C\mcJ:m?FsQqhNom*\jO9NI9OC+%Qjh.d,84Ni6/L[Q6Y6X=jtX0K
%#b$S;!RUfpRFoKk*_h*2?:'Y.;)Dj[8m\oQ"O(u1q1<DX>QMt:bP?a*q3["#Gr]5N/`05ul/F,QI)34<1X=Ffn]U`[C\\7'l'1cC
%fCI1r8f,N#k6nHS,@IBIc50a/7oMmS:sKm4D[&k=VGPPS>g);LgJ(Sk(L5/(osE]>I*Mk.s%9b\QR3cDH1,+![.uN+S9u?qB8bSS
%\`.Ci=GW\']/ho[)XlA=OOV_k*5ht[B;=Ok#=JpFQMa\77REA1REo7jgN(B0ZpY1LM^q[B0NrMV'iO.:GS+<X'rHbXS'Zt87>$?@
%aepU4f^V(?:4pN4kY`G+IP2\q\PLr)[khf5Znecrnk0f9n4PK]fptlgO(G;:(,V#Z\3Raa9'7'qG3;Q/*6ja^b*tscc+NDg47"b2
%7L^r])_8\A`B"<C!^ahKqfSj&!^iAu'MK;[EAV<[(GT`a$"q2Si%j+/WP,(sYO_$cE70Ea1?QX+cT!QPf"I)CoK'm)$H#nD%efu<
%]E7,:4jEA0)t%K8%!klf7B[W,0nWe>LB!#6]Sb*Mp4I9Hg1*?L`u(eQ0_jr@Ti:c%7Gic17n/j,j79C9>OQJMprk0Pc1Z89PA0i*
%hOE79C(IZB6Sn1$W$uNdIgc>dp<Y[N6Yg`?.:U:o=j0@ICe]]!XLLhe@E^-p3Mjrq8:)7aeVo5>s%(;Rb@KCFCns)i`Hl_NM5n>I
%F6dOMg)'4)6d$q3RJ6Gu#*ePdq1dc,(@R[]/]>:7ks%P\H%0<fKTX03_I._0^`sh,&,L^r6JB/G?(>F6-jK:MC)eS'[G=#[Yug=P
%\P!up'n<""^Xt.A(Dr/Es%&uEqL-aGA,Gu;0T6/!1OHsqB:1J=bn<dhPb*5eZr=lt+',AaMO"=eNHhR&CD7#oJ1Y=^:k?$#*Xp-)
%/B_fB`m`DXS//t&3%R5;(KLE9fQ/!:n[IRS:)Y'OmO40\%VBsj?RRrP<hnh>V\rR,1_eN#jLkkeP<>RA$S(iXkIhb%&g*i1047NW
%?Q%N.%sfksNBEj#$o.XrG],LY_q?K7_&\3uhH5oW+]cSV_'IkVVdFtUDe\d]H$F7D.3mg;iC<Ru\0?X.*cBb\AG^fb(<MS<.l`F\
%`\0d]\/CUj+0mq`?q1Spd,>Tj2Lbshi,e)/&@q(7'^<p%<%9.PY/T<5KJ7QTF5%^1`rh!Qo?,L($0a/:E,5!ke*u/`VK3S().I7s
%Rk#Anjb+%Li\t&\Uj"T\@G%*ci"A7Ikfj5G0Fpr@_)ag\mqXoh3a=]g!BmpQb*=>kZ/C!_.f!mc^c1Ll$C,lfcXqu#IH&D^i$e$C
%.eA&9Y,>Qn2d%nPkfUPHafn^DbbH/(ihJK712k2(,H&7ILuVOu%A[1t.,o>!o4C,!V$`tl\MDJKO;oao`i[Ikmu9JIE6=Gk?IkQ@
%>R6iPj$riV>]jh9?nr([HKk9TEe)^Y-M;C%nR>0EE'8L>5ObGP$("!a$Hb^G+"W.t>UK.me$8O%*,*br!74RIX_XQQqr->t3m`H?
%cEHA8+RhL>"9bEa0";P8E>W?4/!.CocDFL*FkWJ`fAu3\+77)J"SqREht+ATF?`6GX'8RO31n'5]^JPW;o^jod!6%6io33:S4EH)
%j=l<#CVpDJO3[WM$HtH6)b+mt'5,t\h!@DQ%"*@6(7B-P]V',?RN5p^gR&H"5ttZ2qt)\h,$?\T'T6LoI\ope/'b.nn.&om=>G+8
%1Z<B<5SGm")-bp#W%XePSW9Urj^G8#*@U!(Y3gD=:[T>HP^lQGNgd]cX!,,"3H-$\Yp#SKc4.dNo)*de</^<D:E,`QjBUga7<uUo
%1Yne<aaBYQMt0?E4i].sF8=:@2>ft%o"<ch;_Q;bor!MNi.sc1_\?]fhhM]?^2i@@N:urA!Boh!C7g03_Dgn*%X(0nEBM-Pc4@'R
%U=iLlc;,jL(7CP0QHJC>R8>W2J7Jqa3#lo&3P^<H\ou=I,[&c*WZL/O\Vnbt<I169c#l@c5u`>\I+*9\$9+<@RJup-DYI_E[!&kK
%,n_p-mEEE6c<U>+Eb?V:H*u4P9k`UkiYh!lPV:fT'l)1FqWn\l(=>cko0_D[PhhmHfIOh3@Yb46H.h$/c2F'dgZ9hP>L2CQn,:Ds
%mX2(mi5S+2'uG$Wh$M9F5#AXI\;C.:YO$./Z!U#pLC0B1qa-"+aPZqG_Ed2g.(_Q>,o]fr.2q'gD*iB3h8'Pp:#BDE,p#nL2d7].
%IA%"%_ppObW-D+sJo\0gl;r.1$7`ZWfDM<XcfZ?#W&"PM'J>n6NlulJ0*3hTEd6UP'mSI#mWH@V[Ia$[$N)Q#a5?@V=sd353A7o=
%Z#esn._ICs[R(CjaL1oWQ7sVc^/s)>Wm-K+nrU-PTN(rbq7QmQ/O?KWG=J!D6=`lG.kY"HJ,Wr@44&SoQp-nbjZfmFONc85j:TSR
%S_Ea_??b_[G^][*U?hJAFk[@Q[;G9ibVh<c"2C2jbT.,)=`7F1i08-1o3J%kr!)T+$^hkpFAB_l<sXf\&/grnNj$9YJ#V91kGCE/
%H2t.ug2OOl%<W5C?J%3FcXsQ$4teG&k-ga[@@pV$hi.=(CaLUtoC=)OSXTonqn/s*SBd@u'_Zg_nbj.!a"H_"+_ID4HV0!??:2sG
%rKt^JKmd:9In1_G8n">nSB!6FVc;=3<Rp7BXA#=lcc[Ujj8?@A1^a,m]_")qG?T]K6/Ump@UYm1<M(d7FW,s^??2R!^f1^=]]M'2
%rc%JiKmd9SaMljI$i@U1co]cmU;FX\Tn_I?4@WadJCZa*_S4EZ2KiNdi)'2+\7lcQNK(<m$N%J0YaKu8]s,guJ/PHbSn_]+f)Scr
%::7=P/(cVEGs?:WT3#%MJ;H@5@@pU=Rk(]uNP[l_WkJLZ1O3E$(HNP9qK*)A_A&5/Ts2kDWm<V8"K"&]NOTSTl(X1$7+u_NI>H_l
%Z;<.<6N*Pp't3rg1uD[ja0]dTo9rU^at_I!I_dL(3)g@#"5#o>-D"i)2=12`[#K$HYg^'R,A)>HZ+[%m32]SH_5=4;9ktHCnsU4b
%);,NtmN33E?F^r)bU*<ioruKh=]"6;R61Q(hZlm_iK;b5i6&Ba2?3RR7OXl"^AQ<>B+n<Q+8tcF!+p9`,1[b-nirTi4_@DqW)'#r
%abOL&s%U#!K3pmtUr>270)l=@KKL+Mc6IfdAAJ.n@Hs][6'qVrn1)(JdZ/`]8FjcC@a8c>1F%=CX)g86)NTm5H)Q>MiTX-KEOj`_
%eO5tG;#),b9!'XEn!^s62`(r@dR.>20SPt0Tp`p-NaQP6UOQlHkjg^KNAd%I[6n;6i;c0!\Shlok$Ud0fse0GS+6KXQ!_<4lK6N)
%>TtnaC3;PM<3+3AVHR8[9skn&8U^:Qp(Rue`/IJ38\n8O^Nsd[5feMrPCZIb$4!$l.,lX-:@@Z\N)44a7iPe%)g$A=]@tm7!jh7s
%eJ?bg"nr:p2h]TLrK1'o!/ghHP<riUgOttJ2F$NN/o:CPNQp)acn%G?Mn;or8XoUcWaQ+DDq=XT8:%t!@E_Gm9_H9#$?'Z*Uc3/J
%&rMg]5jp5QF\<kb0isYgeM6WIhd@KYoSis4<ab4[][%+;JU-$n%GW*eiakN\K+_EU0l!p0FL("Z&rNNXiIs!0cf7Ffr`SXoT<&"3
%3faC;re9<F;n2QT86*^2s/&YL\W[;#Hnk0)J"]Qkam]2g@a4Z4^QI.0q#U)TJ_I%VpMc.?n))?NHZ>7%0!F7.re:?!464+LV7qnb
%J-;7LiN%CMZ_\i<\b=gp@F`*Rfnu\G+bZP(F/BM=:SHM:l,TjshA)"W44'qO0<^<e(ha9,^+]miU)ILC%3N[kgNN:TSJg/u/q%N7
%DF^_@pGgm(/mt9kPfJ'^S(J0^1)mNFs"E=j<.ba9<2Hb@(itPATs[i%Q"f3YHi)[p)YeLiVg@$Wk?TM9G*kUr;V,L>:LJN9j_<@6
%WYtC4k!:=`Y^5?UVFT&OB5!ED3c$BJ.#fsR::W2N"HuUlOY%_6`d;'POlg\C>'IT,pYl!0$-s.Scd7a#qc9R'Z(&U"Hl1;e2cu+)
%G_VnSrL%/02?QMo6R*9D3O`+<3q6dKPoe(5B*Ro$Fgq*rho9]'@gCQ?>/sad'M9f-J@s[>T'ph]`!'<rGdX6_#;^NE$MRU`&%gZB
%XZc(:+MXJMk4@>q6c^(Wlu57tcu`$Eq4_+qdp70dO'\)s":UO:4U0^AGFgn&'9o7I0<nD<orA<s5F**dUMU6kG1MZK(F&Qb$akpH
%<2"9=II79(J>$&nfrNZY:g\i-s%?p?:n?-Oh-M_]Z[4^fp\u[d+%IhFKo!&ih\s&nn#PYT%gY]n,d4@ugMZ"lPm"[9*H\IW0rPHL
%>B5%-h1^[PX".PUMb!H$RNL%j(Xs=O(S5VeIclW"@JAifkQBAfF56*FL3ekVm6Z+/cR>7arl(m(Es!]Gh/C9A+4'B;d%?=b%B7:l
%BKmh'O#.AiPb6mN025DhH=2@&bF;ht0.8n<6,/NEdVR2EgL9^&K#I?BN\`(,KlO!bQUUk+SJ*Nf#aj16.5lXo<QNXdPdpCrj.!I<
%o%\uh4.Rt6F50)uhi-1+1lj_n-#Nn9TacB?F8YU=@@<cNk;F#S[9YUMG1P$c.(Q%hk2[daYB(?qn_nQ)W#n(!0%&Rk4R0H`8-@VB
%1E+KTFgA/lHQWrMT<qlPl;S!YA6gk#@Dea(Sm2-fh,M+9[u2LcV2D4<h._P!aPregi(n^QS\dlFai8\H^Ki:GTh5s<n44(#WU<OA
%lafoR(qOU%W)Wqpq<*9^nu'#r;(>Ju?-6BC4UPM<BP(2*I]$dLLN"JnoH>#uZgq3H,0Zm4%X];oJ#LQ6a%)7-FKZ1'^VZ+q:`TIG
%#e,uVDm7iN!TJ.,Ji9CmN^c``;r*B/;[h4ec\u,n2,'ujpi-&!4R-jNf'9uA@L/[-gZLD\"#WAMU6GP&es=Uk^<u%LQT3A63bpjD
%eo"AaUPPDH>8NZ?ZqQ:4brA@F"%F5U;t<IM)g]V'pgm&r7@H>=Uaa$Q%9,%mWf=H.1JUMNfQtJe,k<YseO#Y$1]6hdIU`d<LCR=F
%La4['8YUPBrTY!^afo9>,R,'H%*$l</4js2Mm!l\O`Tit99WU;aH/;t8YT^!!pUA1"tI<60f$j>K6Bn6N06U/3B>nFm^OX8dD3=u
%9%D"L(!_b[8_r$c'foFfa"An7F?`J!ZGN$gQdeaiZ9i.p022[O^6]S_JE1A["-.A(Tr6X_qNhrnUaV7XWo99Zc@imgF+VRBSaH`M
%erfOa1Tf-l:_h/;[iGr/N!XpkiH,FLVY=)kaY#\t0$[a-2,7nikCn]-/gQJtW:;K&FO?uO[R2,aA@M]VBmeHG`![*(G)>$u390a5
%X&1N4$qJYX?[*EXDIRg39m#?&R"DUm>^/dIb5@dFQFrXT_Sb<N%=1%S]^RWM[R7O-F6j8FK9tY_$p4<>LRq^-jR_bK>^.*Ud:W!J
%9m5K(n83r(F`=&_%tc/M%22Ip_Sb<d%P;9KiJ!''p97oXouIpjHDP.T[iJ43C%_oFK1D=9EDL#A$P.k[Td2=G$P.mM1%lm`M(Un!
%0'8_p.$>V:_F*d:%);2VAZ^rAiSe1=Sc,ua1C%[]l54^'@5)2\q3OaANI0WXB:R"A/!q23q1XU?.Gdh][Qa\ELQ4-qJ_LZI#/8JB
%k(ST,3986L`"sI!T"/V^k\4:H(`[4t-uHg/%nF4/E:T/"n(S>m-meDtn1ZiU*0Al9g4b<uC-LIC.9q*7I+t>V+?B.LLV_+D`!E5\
%iF-]lH6=eJg^=XFD`\q7<VO#m0R/hMTR."nrr.t(gS'*0q1oh.L(S3r??eHP'npO;1YIJ;",.eVgCDIhJk7UX1l9HJ[_jhEReMMk
%_9.g'V2]`Y@?C'O"CG#rc@q$PWPom,iF0f2gds.]1e.k!X8I2Y*fcW8j`08<pndiLD23:ag-c_u#2aT;j3WuqGj*&oQte<'f#GAl
%0K=o(ciZ/fKnk,2HHK'[KeL*]`BkWlM(^t2dInRS_F"PA)n>9SU(g&nKnmKT1%VT1^>WK:*X6D=<^:]B$P.lJFDX?jZ3q1qD`dU>
%e&Jug0M"'1Ra!ZA4:J@F9QoBgF#Vpa*Vrg<N-aGkYcO30;H=_4_S]ba_%e@(H):hb`K:ceBdtG6dn!_N`00;i?Q#^KfK@"f%eW!;
%_>4)U,"adi;j%sBnB[h]!Q;_>/i$tdk$9B;T>9cs%(hjR+?9`Xe"X+fphr!S=ZT=$8(i1El_rG&9"h@jnpC*nP?Q$Zb.#FVQDu6W
%+8_K"Dg?'#DIf(m*p4VWU\k"7FK9ACRD"*tEq>X,F#sb:XimK9qF:dJrNsbCT9B1R4*of^H9M'`XC#SG-Vo(R2j\":nEof,][=AE
%Ar_@Z9#Z%V<6?TJTD.X6l1\=ijfO_kf^*eu/n7Q1XumesD:dO1"_%C?-2qj_]h)`Ja0G<0q<oQh!Xl-$DKd=L(0uAA*_3'odq3'c
%Wb`"G@:NRk>hp0Ki`u@K.%[#XFM!Nl<;6,sIAs]?4K6-EUTF$-rF\'oAt2!#[R@A#:Y<A.9ASJ%_&ONBe%-oJ@XE_RYNrn$c9l%+
%W3E_<<jaR$Uc0hWD?!jcj/XUYQQOiNTL3o^>M;[@p>dpd[9U;ohq.Muo&@OBft=T<gg2tP/06@U?LG!Gfu7GQ@@!sWXa8\qkspZ(
%KJjHshJ?Ub(%!oNJY8^2oR_mfe#r:MjmC+PFeS'haF]Gg]X6GEi[eeSa2E]B0nS1i>>fW_[sr9R1]?F+6rp9t[WeR]:""34Yk`Hj
%FgAEQ]q-LTlIn]N4+C,N59J,:iEE)Fqnt*Mh\_S\0Aa_,Y?56]\aWgZmHsA#].Z1CON]Z+)%ed*[9NV+aU4HJYEW#?X!NHnq'Q>d
%Iiab(;Xc^ZTkj$KH/j3/NT5%[5IZ<sP)rP+3;t0ogME(G\HMoMnES`H%r'_8JX4B=od'M_c`aLc(/",;6fIEDo6k]A.,#t'5I=3D
%.C<F+#KufGq1X_%!#(W7c`Y6Uq(-B4n@nU.4qMN@;Y0c-r4trEf.%PsB$4dj!]q&L["%Tl>rA7NC]bD63<@hh9L>[*!Ye@WMgO0?
%"@"1nGi`MQ*;hob]2Ug8Hqr`bAX>@IKOeP26-abEp8VkQ)!G5?Drci,]i4jN`iVEeMJ1!8RJT;pF+!d0PG_JRHn*+CS;EW6ZjB3X
%cPqJc]Nj)`B&bP6/&KQDSMGJ=.()BI-EbNI-0&TBK+]k:)-=&%.q[piX,6/-Y-re]S8@H9[2?7$[\`c:AX!f!rM-amh*1+@*T#Ye
%>3%$LIqrC2&%>,GqkTdr2,G',.Ci)5&,RP6#<UI7(&n>ehJ$:hXSMV\"W;it)_[Q1?dcOnA#OL.d_dC?q2iU*)6)+2[Q_E0qRp9h
%^W,_9l?eU4PU=)He3;,i8n.PWD@]cH0j!sS(W.A"D7.8sSHTu$0fam*H`U$HB0QL27o`U3?`OF$R9jM.):6ZIq<ZUppUKWLAk)hO
%nu9#bKL?g39UP#E15lA)Fn7s[8MU_o+!X"BHLNb$0)1:"Co_"R00[?:9$'kWRBiCSm%qQcGk5<_r@ej,C^1?o6*khZlGZJa*fp/c
%^.MQ&gNDr3dr@aBdM&BMo,hQYMTM]U$o!gRS\&G0i0uo(R$2tGe(Q1U>gFY`Ma7j;f625D<=k?IHJQSuf(GNGr9Ms8NG,SfD</nh
%4c?j1CsXon:/):1:m)EKf.hnoo(sm*PU'a@mg;nF8XaLD.'d5MiK<DKc^WXYbBUlsYS1f=]/?HPXAp:p()#'\+Z7HIZ]r5)-k=uF
%S)KP7a*`it"nrkKQ*VR,BGeK`mok+#%W#ShgS/KXn0-kN4t'dim_XJ#acuZYq\X([i#Y8BJ$d5*FI)%;'20fKDZSrP8b)7d*<[]C
%)^5C@"d#-lem/2WAo1n]$.rtBUk>*<qs?&>OQ8f&mo\GZ>qVnp!La?$JhsVo#HsOBV[L7!COQu7ESGSYQ76FjlP#ZN/3LFdI[2*g
%mEJqDSUn(Eq@/>Mp-&1eN`ucH<gg^I+r%*mh&iP&Fgm16hl*@]7[;ij,1ctfL@OW#2'&SZNKt&P4D`.Ha6,cq3?FCnik_/1Qb1=u
%,%7BnBd2MM#4MCHnaQF#C?!)&WKEta%pheg2pYtgL4o-;WB2#`lS1L5^c&TfDMo#H#*MIG#].Nl9dK'gVe85t&IG,cRe5N,%.mKr
%Pa;!k089_r=0s3GH@"pJ$qji$@l'J.cb0W7E"![S"qA@!!m`UbIF]'*K&CEmR9qC,hT8loG@QAt"RM,g(j=%ACE_."h0mEi,Xg@b
%$_cYhUJ-92)uCIca%o$*?F5P[$U7+>WY-B94SY#mFm,3`4@^7+)Sf+;@ksO@7@qdZ_N4qBFN*V-krXWJ&oMMh[-=up-5Y=UIC8he
%b7!_mCudSdI:LRiaQ2S(_kKk49YbBE`LoYk_VWRL`VbHebLnOdOW]*ob3\jb5\]abPSUL+\1\Y?;-Mlp5*Qh;g_ls-/P6uNm)Oah
%TLik6A(W2HS9#Wn:th9EnY<H=(Sq;[,D;/=0'tclZN6lYMfXD[Q]N6n)9We4##E)KdY%/\AV=J>i=aT!SGhP'ZtXP7.\tloCjB8/
%NL"#OZ^tUNkd>cVF:_C$ISi^6)f7SgXtUr%TiC$khH@Ip.ifQ8pj/R"I",M$[P.=,I*JPY>s`ViI6i[c1Xr)"QV0($I_\Sma@gm0
%:B_%T@!:raf[!e2Pf:<Mqg#!A0o2CTk=5!U@/<<`KtVLkbN?@<a70026g[t0)V3LQek9It5/5)ZjAXV3C&?k8K0S#7=:aKgQ1lm0
%i)I(9H!qdK/?URorEnoaMts19JIQ^@57LT*9Gk_^3ZR2@\:=L@#8\T`PW,b?^IZ^aS(?LD9ZeJp"nY1a;:`3RRg*5NJY<'co9(`(
%)5-dNJabHkIU;'EbB/@lB90@_A&C.5osrU5FDDEnBjt3$+'H+!j^;E:mV<?4SP4<O1&'O.\h:)P.\F0-"gtjuGNT(-/^dL>#!Z_J
%b"k,2GLtb$nH7f6CD7/G9D,?VrRtG>8(bp%mR0gU=-Cg2(2oN$\>-1-R*.&8$*&$'SrY-QU+=h57d61"6*)'na)Q#IO!=0+<F2Ko
%loqZ_1R58is/IM-#4<ct,8W=M$3OPok?WhUqt2B,^Ks<L3Yc@Cj(R7hGCS.RgU!6F>bXEufAiJ,>R`a;/;eDWZ@`$W1q#:G=&uOI
%$c,NSPniZ+!\dPmAHht9BVP&O=4[BpH`6750s*nR"ojdspheToVqo@>UD6AGr+fm+?^\$E;7pesg4aFXIT?DDJ#?TNrN<X+O^'0<
%Fd_.E2q4CE[9]h'kf6EI=5>tk#tFC-"_Nh!3dbEf+O.B>hQk,(]t''/o$3_D^M`Y5TjWc$HYX0?"R@Y.=T;Qa`_RY]dH!fM4F;KL
%7h`YJb@pJADC:kcN[55^Smcj829=O,ChO@5pVUb2[F!KCAYJ7D*MJj)?`Ruh4!t9&LY:OqZ+#%K0!l^bS)*M]K7MjA`<[ES`PKXb
%;:[]&8XHg^>Q@esf'mr$:#<PLP3Ll\7:W=f/?J=@r`P)T[cB6MnAU`-][9uFVHW.Yd6oj_"hD5&@SK2&^M2W2ZIlcFcr-J8I\Q"H
%C$hL<i$#=bCcfUlffW[/ORAOWFYAL,c\231PaKWf-Ao.fqUnN16Mi@,#(##sRr@#@X.>:&Q'b9dembm(IummC8OnT@nHYN``[2gZ
%*V!cr[-b^$n&m&-E+BX/Y&f8:bmq=pR;b\q47m!uP!:T&LY%4J'TY5o/=m3aJJ(YF'sAntDKZ55Q;=1O@gr9O5@o`jr%><#F*<eF
%;K?L=Y"*qI#f%NMnkT^DhU->b\S4q>7Z,Nij#g)EO1Uga$iKnN1^AZ?^J]Q<^Z@\e_Wc6mQnrQCM>I\.=#ud31!@]X\A-+0NCUdC
%5NK4[4.b&>\bt%OilZ'96U0pR?#?ueWL2Lj>^c^*VP0pQ?,I)eaX3.`g,HQ_PdF"\W^p)AdSu=r54-;Q?ffr[.U3;202ZoNBA9j:
%j?7JXh\1TFh8d:_r`7lU.QOK>olZf09j/f(B:p%p70_Y,dD'KielQ"[8PIM"Csqr]iOZi-pNPL$F11EEBCp]_:+2!@S6Rbg!G2F-
%a3AT0-]J.F4THgT#&Ip*RZ)/iH#T:!2ohVF:RE`!5HnP\adlYuBE,9THBitFPJ.8VX2KZb56a6EeE72D51<m=!I[)Ho^T9,DnA2^
%hkneABk]C"bXhf%9bP\]gn7@$Y+MQtpPi]9J\`8!/+4O(,oI=F3B?.uTD\j&Y*hmJoQLPH@AfEimX3H<9Yr-[79IfC`fep`ebr#M
%eB/r1L*)<Hq"FEBL;KBOc]_p]OeB]VD6]9j'R&2"Pm1(6ET=ru"V(4[;giqK\s:V%aS)=L2k*/94gXsd=YnEGj0/`MF[C0)5";i_
%lP_"1TAS;/`O01.HeB.`R[maA..X$3HeB.`,%,`'Ku/F!L/=LB1TiJ#m`r8b0cDcNrY&0`-?J)dmQRbKjMdBSOe?tI#tYFpI`49)
%'1mJ5VTmH#P)PQedm9u%^qT&B*PiN"42.$)-*]]Nqkj1XA;*o(E:N9.:Vp'2ms#IK#fB"YlhAM%E%!"lN^Cu?:[`%#k=3=CKZC6#
%iCLa<+%$)1'@/nm?8s"S.0gp`X(9%d[H2ZQ&iT;FD0nAo[aRYjd'1p%pnDC`Bb[J[G6B0),-D[q>`?^>LkK`?)5)'a<8\U5f,,Y8
%E$^e@da+&qE"8!!3YlgU_Oc^2Em.*WH5aPqBS(r6IEshe"CW(/R:Hq0&B'8o8P9I5J4JCI`^n*:SF`C@Stqu<RV[p30UlV$B8j'*
%Oed*<Ole`[@hS2adNQ%5U[XL8%g:m#N/:(5#-d:uO>br4@L-dR#D@*upD=Mb6^tF-=`:`nR!82G/6i)23fGlHD'!<(6o[dH>$!$Z
%"!V+Sa%/oqm[:GQd`+BGRF"oB;;/f&_P@RE0d$O0]S/m$9u9RIEJu%O5B_Crg+b>^E>%)M<H\cn\J^K'8;BWg'I!Y"4UJTZQ6mn0
%.IBP>K0hV48#.ggO&mfn9h7oD=RpQ.!\Hd5[^b"cY%tD^S/L8/`-!GY:HJZKJT3&g:HJ[6oF<pG^o*_(N_+\P8`8(C!2gf_+:3GL
%);s<%kt2!fQN>A`DQc`NBC^91V"2l"HKKWCTo>E9rTEac1#&1qIfHskDb:'Ap>B,A]Pm%*&)lBNHs7</+*):&^+EO[nV>n(Q>_](
%Rm5uj8sm=E`m[8c[sAU_=of`#^*o:j>;^a=MDQuJVTX;c[t@u9dWYT&d5icW>phHO7d0jYjT".F4W=tZ,9j*:q4U.@&J;<'ll?\u
%OX%)28suf!J#?022qkBSp[:W_g[:)_Y4m,a\HqS.,/%&%0et,M7(SRPEK#C4@&BcgIgM5hpuh)&1]R<js1_CIItYlHr=>II+oO]>
%8@ng1^W"7pC&*\nBf5JML_;_.4?a.8g'mVd_q-2'98eZmQBmfaL.qUAVTjEje?W4nQEh)oaef5ur"@J9QIX)qK/@5#LhL>J=d;+l
%o@ILjR^3-mRajr!Q+VZ$auUDg&0AR<o>?kH75FbB5/C$s?)^?>RUu%@P5f2PCQY[g4%#8Ed-:!oh2+sqVOWrOS0jYp+fKe98m588
%DG&V:f^)T?4"=qJQ3f-4((hdh"^R5c_Tc/Y1g.IX3g)]1lpr2F_;%kB/7&/e9:)u!7DrnOkmjtp$Y8::r^L'ml0RXml"OG=Ko6'K
%fV52g_:ilP/K..u>$;_n1h7i%Q*Ebj$R[Mc#/Co]^?70b5sTg..C!<>``gm5i*;$[/-m'P,E-Fu_+I*.A25+0$ApN?95=mY=ciEi
%osC_"M3A]P";2h/\cTAT"G0T.7\7@EB<e4nQ4-)HP"b(67Mm>PS,?6jK1ll@k;,Ej5dRO7@T>/r:-thF)OtXub-^N-5af\O<YBL@
%nI/h=TeIMM.Nh6D'Y`16>#PH-P"q#Q;OEgeTnP+gFOZBe&QWBa&!8.'<ETA+P/0!X.E+i9"H/BlT84m=9G(]j3ldo9-r)VIJmqH>
%66qPT=j]_6NMDuXSa.5H@cNNBfUtdbm/2bm:R,<oP0DK/C?_f0'M,+&,H6e@9jj#=aZPKUC`u25E[K*IHkeOH="ER#8!m-E*%F)X
%]GXm$<3*tuh'!V6rWL4H^ICZrU'l6-`>N)^.^"d;-;"Stfk;#Y7eC5T(?G:10_%s_Fid1qLi/3/M_&KJ"Po<>Zi"3g$H4MA9L@]o
%Hq>$?\0/^apJ)i`C"T.7c:b*0QVDRcAe_b<5[]E7<<6GA"d$,iQHr2Lk60FLQ*4.$E;Ke7,%8o1:<9:\pE?gMhBtW0cP_GW)p(C.
%JUjiZFQ1kij@SK,R`:F`.0.:Lnh`U](6R_8OC5(bs2[2U<%=(X<Mhm6;MDrO'1jJXU&-'4W@+Z;3f>JLT&m-WjY.tG.MB>8:Q[7`
%I]R-1ksu`Ud$dLY+o-c)W(BrF_B5^C_&+;O2$HGSY]Ngcmk!-bL1k7dEDXd`a`!FG@=s[!$NAU-N_144qNB-jV!C"Kap;-MdsS<Q
%\Z$Jp=u$9T#GDhHW1-JL8ig6Qj$8:NCDKf)[Pi^?(!i7Ba<HP8%G"ubg/W8f03,^qC`+/?3t2oP7hItiGs`uNrt?*B)GI;rV5&X\
%'IpD8I)"ke6jo_:>Xao[P)3':RP`\@[TnXtL$2JQB`Me>WWFRb7,/r$2ahIZm(*30M3P+UjauKFY\aQn0SG?4Q;iT\d+NN)(QiuR
%klIXmA1!$3kum(QTYoe3RS65E0+s`SF^@Z"*Q`#hdj8O#\LMKeKc<L2A6!jWFG4`nTKkOqSZRcJ+?<6NXJp$!(Cc7;NLs#&)N"m"
%Jc-EP'\XWP$9!7:)6t]_@?DH\M4PHI1I,%f1.bJTk=K=YcB^'PAK,aOO9qV6eTH$L>nDcB>5]\(Q8n#`r3nLo6<I2&kZi/-KTVoQ
%,#"7oSq0s_rg1@js!&G6/0\:DI,1YAO@Ft=eh"pBC>+/9du_&+g,_AdA9[:8.@ck>b1*b`.4Jt=mGtfhWW:L%dY<:M;IEs4(YQ>G
%a-fJ;b%cX3.G\Q1<B@T8aNRM"#+Ql]F>%S=NQ?Ufo&`Q#_9=6i7OX%CAm?ZsTuoQm&X7LTDA_+EW@F(oY>W2-QBbIso%%c482lFo
%!LQ4ir^Z<mKcY[eZHtdDb>t$%J7aeO([*aq$Bs[a2=tQ!1?GfXfc$;'Uljr@i)c%C2cXHCU'V>^G(X(/<+j9Opdj%iWG>I\)[`-r
%q$+a/_KBG8Ce5#h0'De[@/,d"l3cEe6`6.EjsQ$9DPW[Mete#j9VP-XO[j"ZcP2d3l7Hi2&sI*AR?SQI3)\gO@&OTd$spF67oWS^
%6']nj=d$iO$(6*?J5q4*W3a%'7N&UYL]N&T@Rd]F'NB$MiIN3(1;4)""-m!,SjmuWPKmi=doX(K,SP6^n7]&G;'1lgVBLI;#:W.Y
%5oZQn6MHLpY@/[R7NI9_L1,(rp6WS<,&#Vc).has:ruLaHWO0)$F-OOY%!Nkk`l7>%M]@C<*B5Pp^oo+^_qMk7'T'1!mjCR[>KhV
%P?o1%7lY]8QjDb;+hM99fmkjPKRD6\K.;HA#=A^RP5Ig\I"p9b=W%gG!nT9R;l[09)']-NP3SC\+0fZn)=<X5L18:KK<Si21\(a8
%p0b*K"S)b^6`/^8>*-Vlg_N7R,#r%Ois[o+@PD[(L882p[9Q#C1=Lifa_6d'bp$Nsr\,bFAZ74njuZL!!+cchDZb56r5P#<D]+\W
%OdbH(V4`&hZk.e+qsE7"+XHSJ,`\Zt5HHCjNL4\iVD1FoeQ\\8`FT+2d?DIQ3jckHfJ;P.:-CI6;umdfO9;/NWC'*SQFVsABrc:f
%':IM"bsTGi_Oqj:4;h@jj_-=]_r+Q0YnQZ[K.ps1-$#S.dM#gGe3ojP3cbVUo?%akHB\_5;5e"lRcQHO;N"*+OuFmIru]l8SE@AF
%+q(hXA%Iieo"Yn`0Y(pr4I)a2P+]m-PNDM!P\'guZjG+08^@B&,'#2f.QOBTJ/X&N6`?!B;)9,N48/tVm0IBp:DC3RA<B7]:]X,&
%;T<UY%0:NH5pqlX7`K>qY=NgLoi%U-lQUMIW$O>2jU0@DR)bFn-^8D.AnEM2gdNYGT7c:n[K:(D*dj*j;2DeW$(#oP_9bR#SJ<`0
%Ed*Lr7h^&t.[[FRaBc(QPD<O+)32D.c5@t^q1b"@T^&o+cZEd+0Sl0oQW",$W(R?$!,t6VU0*.HhP>.oi)(Su`fXdc:E42X6="3%
%gR7aoZ?@+nH=DW-&rJn'eA9b:ipkVLV<'^=^n$3lK6qYKc4E[QK9L?ZZS1R(pf5]3@:B>JP1a?8":aeMOL(73U5):jdnBhrS6j//
%OVF\Qd;@hMQ[h=d@EL>mbN9cVFlikZ\7:,h2KV_#1S>md6C=!#.*SC)?<%kaO_)gOAaWH_)5`fj->I]r!XhfE1WGHL7b&`&%>uu_
%cV\j00_Zi6ct.K=dbqLTF<Jqik]q^B?'ZL-QS4j!&Tl(o8#N']Q4)+]Zm^+k<N8ns\`,nN!sD0qgTi6t-j296JBc6t%9O1X2spZo
%On>OWPo-o-3K3/g@4Is`P9@aU-*kJ&>7,G3'6up@4L,f'8I8.kMF[HNV3jM(h'K;>EK/oOU5B7HUi7`9*BT5'0ppb0%M!TR$sAb(
%Y$l:#a<[Z7ZA9K)UI(j[9@Kk<_T3NoU.akJRe'Q?;C+HY1(VN<=YsH>&>6sn'W?l3K[qH?.jds_Kgr):JsK'&ar8lg=:brHZD-g/
%6:?J3rt1X3N$qVpqM\]%JE>2+d+?A.J6OSraI>lKPn#'I@T2A,WCFe%J9FOe&;ic\![dD]O>Ce35Fj9X.eWj$#q-/mK=AN[cD#-g
%,GFR27p-&2W"9";5f*Yq8]<"aD4.S)<WO7[gi8NW^t3KI-F2uoWD$T/bN"TkKn[*G_77miqZk2tcGN**!n2*7(1%.A;NV$d%0rYc
%-6,=jEWn].'cA,[.Fi3Uk&S@A]o%8_.`?SMR7UtDku,G<@,V3Ma.+EpTm0%^"<9_5GSKmW!'qi*P#Nd8+:<r8#W#-]<+G/R_!Fmq
%"#R'g(tq\b;!emp4<sd]@PaYj:l7_,#H@m](0.m46!g>h&QYQ.$3]"U'&nEGY^h5FbaXS%1n69U=McdH103Kp1khoMG"Z?mP9CQC
%,<7MQq.-?rQ#"OlD$Mgf@CZA[0>W1eCi2A54X5#:/1Y`7@[:551i>K"(P`:Z58-_%P"&IhNkS3lKEdVa=:>H%7[^@0A4[^$A`,B'
%,]',R$3u0g2g-t#nHU3I=n\KW?:)@,+\e>Uj_DV$=:Q!tORE8kO8R"GJj^bsHHU-dbiurcG8Yg$/F*Sl6<Ran\JsCe-3'*,.3@S-
%BE-5A<jjE/#;Jo$cK1nJ\.l<CN+Q<"*)X3olF'QWM'=HTPY9dR"IV$>4duPX!E'8#%YVGo-98&2acg%AM<X6$>7-'>n7#pQTHFhp
%)KcGlq'8D9_d%s:2E[_LLS9p*E&SX*[??78A$4Q#3)S9YT+U@G+u'ft[F(D6-UP1t.eZOR@5$n.92;<LEmZR>.9J2::S.YuE)Tir
%$6kld2>]WoB:5I5fJAR-K"Y`LB#.*\11X93//^Q9K_o0`H<C<*?r%X@)9`a+=9]K2$A'!aSW7=S"Iq'4'loO`hNAbFi-Z6g9\r+$
%++`@e9!grWN$G>bY0(@10[R'2!n:UIY:Wd-EiiI%q)r7S/3QJ`,#mN5.3i010k>c24jJ(oTiNARSj9bV@j=m>7UIp\56193!(!j(
%;V%">5R*I%<#35]A>$.?`+,3#5KkTG<5<F0H]@,5Z55O1e<mImN\'>28-=W6"R7PT@`"pa!R\I)"YPB>TlBBt``4bp$eBmjpE7O"
%7tg^'5i\MR5iUW6E6.<<SMYa]&j:bcQ:GfF8X's-?:!3P2-f(#Q>m%i;9CD2lJ"TRM(Fg)pMPF;KPCDlf:1m;<`iDC2fGQ78VO_-
%d86$/$Q^=]1obUYj;ahXqCiYuIGi18SQoUV(kYY?/H(Vt@8-2$&KrsPb+'>JIF/Ku"h`'MCo2`L-jA_WnKc\%C'$p,&pSi1N%LdJ
%'[>QO(-MZE#],jjYf^SEb;IIN7#?C=8Wr7[Osr(9JMBs0Sd'`LQ@k*BY-P9iM)EcI-`Ei\QblKD*-9dA,hh2c=m$k5:LWr8JZ_k9
%s32M1JIL",OdB"%';oF"_oN^hK.V<sW1<'/.pWWf\?)nGS/^CJ2?+9G'iQb"h52/Z,9q/uGr/*N3HrtoCuieOA0(fp6=E_@5:n'p
%!B5l.U.VE$e>oRT?f=;O/9gfO(MNln2;'/JqBP5[i4_[7&$cJC+p8rlKXjrA*E8$"IJ6lV0(cAIA<cu4AeZ#s!?m+g-dUinJ2h)m
%Ij/;*j=/o7@Yj&^;DDVL0FK_4#luU^CI-bm>);Bohma(E,etFPVaH.h$BWm7-hbS9%TsP6l@P>0UaM=^89ApQMbB!i7+HB0,MCE[
%'n\T&Qi\f?@3Y/kbZ<*J6o`l`>i=inlrB=kJ=%9Q<-WAQBJ12/J3GM#d]c.ATUEbc2!UBX(<RIOk$]&\Mq=5m-CX"iZKR.DA>tW@
%7@chH7RPqQckTQPo*4=]_51m#Y6"F:;3?Gu9g"?,>$K\lV!anq"g1+05D%J,W0`I"9.!iU5g)d*G.eFG9XJ>`Y8!?_Q0f45G.Df3
%<)=9;VQU&<'+s$Z3dN-k1kO/C*s#mqXk;%gi>'uU<&#QM8de^B<ki),(uUT+_<Ed95nB=i'h&*1?XTI98C48@&I8aOX@9TeSQGoL
%_#,f=MSZ1.1;e@i$&"GWQ'F:8'j*t@=[APa$.%N^)4ipF]!uQk!lR,b1;jiV<XSWK.&sR8.D`),:i4m,+s\m`/qa-i3"-@QiVkAR
%As!Z@DE=OO>:q,f4L@X9N'f+%+9_p;JAXkdbnQnl;R/k%ScV<nB]c'TJB5rtKk;h1FQSi$\XE\*5Q1ZsTPcQVD6l6$ZqHf9J1o?D
%.Ph=3(BK#OV5g3)N%S=\m]msiJ5&91LT5BI>I4PO6k!.kD@S\1VJQAiM]Tb:L,ai:ru'^[L>HC)q$Oi],>sl]N)gPE-h\>+qIqFR
%\2UW9k0#^1af\7%5Xn0OGVbpQ;f\q'?_b%?VLsP2S(@sWR0+$HR"[%-:=33#NH`1F.$s+:dk&M%c(W>tWRi5P]S_7a2KOuulYLuC
%K]G."BOCpOb#A?pDmTq8:)>O<D!.G[g%!i+Lt6Q!AX:M@DQ=,gPmT,(4MYmr2u).OlN6>U,$30PKd6rb7A,XeOK'^L[=]>A/.*YB
%V3O,08IO?"aL+KS9GD.C7]0P`I%nhbRRK((=<":?P&6Xmf/5p9K#)+(1h"4nZ<q4tPaU*sZFheGXi3[9I1E2S)&aprfo\:*1]N7i
%1<\r$A<k,:^3MN03?EXk@etcF2iiLZ(6a-FrhsiD"D7h!8(L5E7@])u\[!D3eB's08=f9RmMf,J1eZZr*.k7VOoT#e,"q_^6Pf99
%aVn*]XYg35VYMh3=)n5Rq:O]!E@!<2TM2^SN39J^A#cL:Gp,!hNA)YQB)X_[=B!jMXQT^9LP&(]4NT?i!FDSE-R`*<!]7l^JWA+r
%K?euK@sSBeT\\_$A+2tfR;ts_"-bZT7Xjr@ge:l2._!J>$6!+(,#d@C\Qdp$6k$#-K#ktJ.5.nF<%88p0F*lgdP3VF9da+D-.6Kn
%$['d2P'*&nXqYQH$eSk*Vt!HMJJAB!q2b;*A7bgl>8PgEQ<qf+o$KHio<(q^K\1f2\QI@fp?3]20Hcs/T"qKamgaOTo<Kp'-eQRZ
%TFq5>H19nC6mEb6cnV>N.L&nfAQqKYanJZCVGVZ)D^tM)6&LQa?K=*fQA;#b\o]!!i/&#&`)C)5RoKNI*R2l_W'<5^WG>]R:t)'G
%860QK@\???BXNdR%T&_[W<KnqC(o+CV6HIcp6rgm\2%(1TnTcXSX!+R'A'RnPZ:lJOm=PkJ3pR\^"g^(-*GrG$XbK[M%u-46X=dj
%J16?1BoOPp)#WQb%j8g\4?sMaJruJ\Nq+/YZc$Zg5`I?q<THmoQ.=.<?;eMTX0m14V5uBc=#g@mB:^L+AQ_&Y*&!mj90'"A=.&/[
%Jkd,NBh2E<lB8%9Tu8cLQ+.@eMc?)g<f30J996S3AQ`.eoT<Z7I0K:@B[$$I;XIAWHC8Ge?^=:&d)5N%Pm7eEdY5p#(Ha(doFnJ]
%iCjWr#9*?J,Bo=drWjN\Y07]I7A1j/?01@')'$S6"n%Z$(+\%Y1i&qgdPCp#Tc0AF8>6:q(6tlVlm9!^9:uSu<&8*Xf748EeP%I7
%g+l')]e&o:Guc(rb@4cj;sGW7!Y*B1YYnV7k1_VOKp\]>r@H88W1TO?E1Y9M&u`W'Q3$6X1<U]5hBYIbOYFjq@_>6d`LF4aEL+\O
%J_=['7'jO%j55O:AUB95-;\ajQm.M36=(.5]..k\cl*X,P$6FG_\-O*!0`_9Jfffo,0N3Wi+Dr(iocB4P]`;c6-qp.'brqOqdKaL
%DjI?#Z>=]TIrI^6Wf8W-6`%qR30]/?M5?/oj$9s'F>S)QXsfl>_b;i'7V!o.&"Z+"(>2TI9CuF(PgCNiWGnSn\8)2>;*n9.\3oGU
%i>PA2Kbed4Z+X/)5+j]<#"OAJOm(SX*^ENj(B"gu[_a8T#)deWEse[Y'+R,Vl(dD_1^'DO8p8?p`QR$P,?.6u*G"m6$g:-f'`$?X
%A6l\-BZn&i6)S:5ZA+[AcL[$+Q/dlr7l-T03@6"!j8MSKV!0WjE?p6U1IJC7P<k`I)WaJ``cXoI>o9UGS:]OG8/bVR$^3kA_4r2Y
%iA#YqSX@<$YXAjU;RXl7TL9NEd"F0:CDj-cbN$BK#cd6L9Q:VXa@!:^07u_mS:i80V[p_?l),1s"c9=%Be"0qVIsbKGW5lVX(.eA
%(;Ci?,0f&bF>>^(%E525j6"a,Zk-#F8`d7o1F>YN^o7W;BG(`5%i[VE;PBp)=QLq%aiKKYI[6TYB*J8EM]g/1;l?VBP\2ItjoU:c
%'Ul!_<bC21L$D?n.#7GqE!J;]*@rV<#g?S6)&+!AaKi*_7\<i$VX$T)0q2@4Ir5C;Wf"S!.H!/Q-4FcBPa#9%'/YXFiuBfr$BbZg
%$KVg:BsUu-3D8rV+g-XD#l>m5+>a".YVe-+M8f/hg!&gAB>b@k]OXVR**pgr]H@66139"c;"V(s8@g?\#b9J1OAt&%ie23!Wj`nj
%/'cWWSm5m3@R&4PXCP!]"gUf*7Ih1-c7Nd!!X"6]="JQH=aSqGPd<JjJPcD,\\KAYjkC(;Le2[79uXat.`;dUVL`]12^D(R9Hg`R
%57k4'J&*[U(8sd&S:T#e"\ZZ49h5pK`:2Eo-LmI]a:pJ%,q3;h/DU`Q<L)=8e43"?6H,/0S?Y>"[)S*26m-NfMDtTAl:>kFm2^9G
%iFGcO5Hcnodpk.$M)jE-60C+-.Xb$&&PQMp"TongZEqUt+H4=gC0AfG_X2"r`(2@3\BT4jbpd</\ZIP5!;pHK(@I=%,OB\n[[P7#
%IF(DoP0#EQVo%5@0N]1lOcL)fXM@\a@r+.o1hI=e1X-MaP9o43n]r.glo`2.D0@iT0,e^6Me`[lN7!&cnJ@ba]L)KLK3_&YUWcC,
%fe,Mtqcj>Q!'nBu&+_CJg6IM.C>i%!I9*"I?'`*?,+0>EW)"Y=6$5gs\2n<!fl*<iW\YF8?Gg]EJ=r[X$8u0Wi=G(7^m"J7G'<Er
%(6aL:CkK!lH)=O;R9)<1bSjua,_#a>m\-7M64(]V-)qOH17]n=iDF5cQD]/K_5;7*3\5O8(S"5.)L`5b?m:BF`0`E>kf<;2lXjP^
%Co(MX<Z=CNKqL/a$r<P3FDXJKNXa%):2FIu7q(Pn_Q=mWp5amA/TfuBF$qoMX$;^@jEWp:fB#`$@fb"/eQ\+Cd"ir?^I'WK>EMpL
%W7d(Q$V=lS'pZqeMp-H/oO5enTg%r_*UFaTJ>l\SdP*PLeJ?&\RUWC_B-\A-#[-3M\\W)[*6M[cN/d^J=SDjGD.8e;d]=0[V$_q%
%P!%"&U^AH1]u#d_[;'iLgCV#l>Z^:%e[75TX'c5U7QA3b_,>Yl*]DKKlpaA)@0QYP*J<%K+J&#6%Eu:lcc6$K`[l@c-W!b)ZcELK
%@.c("@u4ZO41VT>R22YSpDbdE_A3JQ@(N8HIqBu:XZ94?_dQt1/WaAJ[MUa**5n<1&7](SindhE,X^%^mf8`C#!+8uK</j>J+\EX
%#lI=T#5?;nokne:-8<7n_K&.KR*9SZkqjUH1eokK+4F5Jfi)GG]WR<^`W/`d/.Ilu?L1<j9L"ij0oMq[b=tmZSo-t.BGsb7CK>Or
%b3In]13MHI]W7Q[%:41P$Cq"tbL]<Q:8Erq[S_9]=I*.J.SmK1V1pHr%Gi9)<W#%5!Wb`LIVF`JIbh(_7C>CfSQL`J'L9>MEsTY`
%TF)28gL,U4-c5T/I_\KY\'4j^HrrM5HsY=[i6/c;X`b(9n"I]F0]lsHmq+_g_Eb]pFBn6%$Jk87?=eC]J*TT3NFjte;m5oL>rGD=
%*4E*1@pLqJ5J.2i,5T<Jf4D_Ori3RG\D<f[ot&:%g<1HgrQkLCmM^-FYd(V1,V2TF$htY3&4gHqDY^p$YBP=%N#9ZQ\(aX?47GkV
%g$[C+jG!S'kS[Op=hdb8a-LpNNt+oDhqHDAht?d/hTtH<JWu$<Wn#nd@A0stSup,2X.P`b\PiHC3Nfcu4.2S]"nhlWY'rTZhj$7q
%*Mor%^Wnd1Nt5k(ViOo[?Rt$9]Cfe80]1`8h5P,-b^&7,jge5;n!%2/im$/oJ_o+:makKLn+tbSg<7aslJ6M=WSSCIaiFiOF2dk;
%@P$&3Sj3%4p)fV^+/tW4J,4&[%ZBrERo]_d9Y;dGBBA1*f]Gu8]q>6sGF.E3pTVEEHWrLUk^=4i55'##rH7r/pS*'K0@"M.m^0+j
%6fkY%I[<^Rc`_5X)jQ3$_=_sL@t1pH5F4QPSNVIE?Ol\@_JZ=gLJ+[oMc\MuDJ]>4RTdsC>pm'UedB%4dGhu[Bs5')];0mKfjhGD
%7^SBe?b)H*LJ5@+[T6C8kAP.>\\k3)`S"ho@;Tm.;,VaZ;If;iSNTc8@R@6*Ro)5I-Njk;nu$FHqjEq?AG)^:Y]-FG*Obk:5InC;
%gl[@es!/X]V:3CBTbBXmr)Rb,GFS.p?S8DeSYQ.SldM-Kh6@OGD`+qhpW^TcmH<L#/b*k2He20VmMc2Uda!o?f%8V+Z,Z?[o=KEm
%\Fk\?Efr)Jgcp3'5Dp&_Zb:V_B_1QnM*^q'mse[4Is!d_CU::j>l&ZLH^C(Z=6ds*qIsO?X7ELANp\@mFg[[jkUq[1s3eser`giH
%T['1",T9I"agm&p@HY>Ud5PqZE_<(uYu?)7VH9#&Q'?6.-1*;WUW(j[cMcPpCM$-ggm1,_&'L"M^&+:)iV7Tak3KR$PW`54O2!em
%?aKFndRO_[="\sH2:QlEDrcS0nugV+?#A2Ma?GrRpI9U58LtQs.tnM5q\["(?Fot2I/j"(T7/l6QZakE9.uX@n,&rbbCsVR]C^Q6
%8`,CQ4Y8PK]f=NAZaH./fu:F9ptGT!q82j\h4g!:Sh8L%$=^\KI#.7c[%#Yfm<cGi.X+M`Cjt\lDg"EkH&[Zkgi9>mC,W7[cE#!n
%a4^18=&]oHo/G!2n$S4;Mq7Xm:NGhoQs7)Mj6m;b,htWBhD@mKf<qgV<][]^R)%-Gq?MlO=^77Jc_!;96*kX6]c:8oDq3ZG9JD^`
%ia/gp5I]*4G>8W?>Dh!(f$C+tGO'$Kh)RT=kFJ5tnpBM,s(U`MW+lIZ[rHWC\Oikj43u?]^:mcSXj.qF%SiTY=VJ$-MlhoYAK@0P
%B1YcHr4aCYVJ(ke=%1<tda)AA:TsE[g3`U%(G43c0!q7Q;QBJi53Gi2NK<MuiMU^@f`!=+I9pMA`RX,<auVQ>)s:<$m_cp7>G\iO
%[$jUX^0KOnWkJ;\_roIMn[#D^8Xo=XCFf4oX.T)(!>A84FtRAKGPA`7@qBA'nT3_:<iV^40@j3+eJ=auldXoa\UA3@RFQ.on*N3G
%nW_D'edjCF`VA1'r^AfgL]6+gh-FmA$14M"\_Lfa-BgLFOET[UE6h9j9>@F_lo]]\>'dZN4C!'9hj9Z7\(^Atf?[34l`p"u2"oDm
%2g&tMp#f=L<fcu.(-8)RO(S\Zl-mRn7P:cZ(*?1Bcd.C0YHau5ot@m2*E2-[Mqbe,HC):Z-"'VdS*EZDnDq!)]6r..;V.>ip%HMJ
%:ZCkL>M+i\;CVQe8\#Y"*Rs2YNNLCmj6sq@qcpW*h:XbiH<iT1;NUc_Sjr1lS(HCB40_ufR0`R0j']UM0.[\h>Nac3]'s%^3'-O%
%hYX439<2,3:!Pk3L"5M;OYC!fc0`1Np!0%5?[=oc:);u=EdP4"dTM[RS%&4fC9bI!s):?0U@qr4)S7FR_5mI2S*k(c.%OW!>62ID
%fBq(*`DlDV-S)B*/L%(^F_1"<q$=rW9+nE]+0Y*Alg`S\mmZ2W4oP*HnbMlW9'NA]>EX$XddE.&L%doP5._X0=aiQ9hu76>2tbMi
%oq.#?)?J;=T5Wf9EfXZnA#MoT\]Sgdk-e)L>8%L4T@CRRk@.qE[bQ=\X],tq]!sMbra(F.`8u^$7C6=r33(l\Y*C(&]>])?6a*(_
%?Q)QrcgfHRBlnEmH#pBX=Xple)!UEa=ME+p.'M1oe)dd"8o!eWlrd\]RhrQQh32So/[6U.-9pW.q[9;0B:7HIn"9$I[[qgX8g!<O
%qX=!=r\D*2;_=S"(6[A+8YLJq.i,UZQ-ES-I.uQ/Et>EW>0E8h2f<)1,#D1pG:,r$lMP,V44udCaOe;GHRsUE['4_grjsR/o?ljn
%o'Yqb@Ck-LXaOP.Q+D%Mbiqo-3gZRf=#\I9O(*UQnsnt2cJL3;he)GYh$(<-9tNR%qGB/Wa1!H<DRWt:RsWuWM_"a8s.\;]SR$0q
%CR<Z$luR;U?<Q^22P\I4;7\l>XW,,iU/h#-a9MU8-l]$#1]=N"L@tGMRj9c-p#b(Cr-r!1=S(4Uaa^.2bCo?@mR1FE(4OQX8#QTL
%icVAgq0KP3c[?(IrG52F52I(KeoUBPlq&P7q.%&EmsD&4NP"%m+dUiA/h_Wi^7:+hQ#4#9VKRCY=H2]j[FA">H="?nD;=hdlLRV+
%?WZD"AC0Vqq82aWbKo?@oga;a]/mX\(B5><D>Y%rH\r+Ks&I5@gc/#5FJ\`6eFW"WZMM=2g"(Q5U5cd6CTb)[Xk`p4XW5RX&eFBI
%7^lEJ3*^aW3i1WThX:CA:&D.R='n%:9r^iVh/djM];'4LI+M!@kO-[:mSWp<Hafd+*?HZa-da7AUE!Ub2HQnonbB(kFIV+Bm74FK
%CsJT#^20A5h[S,Gs-hgpG1F:e_Uh/)l(W,WgF7U?Y:RX3gUZKWq>W,:]:2_jP(!AfM#@fM+H1:,%Gh@8S8\O_(#F<0p>,W1?Y*7Q
%ka6XBj2UF?EFq.AT]kgdb"D7u;m",.=*lE0m"nU5Ieu=`[0i4f\T')BAMW\ej_Em9E-^=$gXD@-Bsr@smj`E1AU6OAhTY\b`0,g&
%<(Df>lY>)d+s;?!g]g,Sjn)eQ[pG!aEm1eTooD_@qC%W#)l]L^RXSA`9BV,gg'^$-X94C-f03^I>[BMG?G8Su*RF,(@.R*5]CkAa
%=?1K,\EK:rQf.Oqe,@[u]c(Di=7LP[SrV:i/<O;)ebOZr$oLPSgdij=g>$GN%4VCRAe0d$pqH,3f#clgeFqPRDo!MCF2:P\[ddu=
%d*`6tTWipFV'RE29pWo<G#q>MVi&%-I3@Y\pl@T8W&&De&Jts(/-"p1Xfp()S%%eA9:I;5-J!G.moL#9pV$0/:&)3..K"b=9rjn-
%4o$Y(EmZfP>ZUgkpccFd*?,h5)uKMd+hO)Cqeg8UBoMLBXm,VUf08$&r;NUanaZ,==tE(Y+`DR'Y#o0D.DI\9lK6!YaH)NjqX!IC
%I38Ub`dDlQ%ebeWG/Eiu3%PQ)f_00DX/\>=0%jHi%EI+9=Y4aM1t_8e>kOP$<LCu+a^.rsO[&X?*([KX`^e*j4qr`Uh;e%d1(QnJ
%pfr1#XA<>!Er&8&Z+[VQNTbYQ8A6_tJW/T5f+%i14`N<kDV5\d[>I1a$$;W8AZoD'DA'[f/=-RAd@3@cf)'LS+VUi7nuLHf]8PJ-
%4n_d1QlX,=Pt/*&H>DWf<\dD"Tm^%moB=UWCn\*#Ns->LA'=QV28R-'aQ"\PPV[*cRJ1lR\d?*uZ]gn4eYYDH%q^g+VAM1?>h[]m
%c;Gpr1S9h?WV[gMhl@OGra^AE]Ip\"_'#,S,Sr++;[oUmcYj=S?a;B.X$J>s*ID#bX^dts;soN7=7OCr$-s"NrF$O_qjk'[;/,VH
%ACp_oAbU+*eF@%"EP&0M-k.fp\J=o(Z?r@eo5R@PK%"Bo<,TaqmE<:ds,^"NVaXP;]r<5lD-qSpHC]bFrRhpO1]F(j'd)&jBkM_J
%h%r#dqg"mMggf7XI1pq[5?9W@c@]7a<&Q\5FRbGGMkduO@t,!gDe)fA4(\"Qcg;CC%JEE^=h]kql\Y!tMqE?IgXr,KI=L:^`ZHj^
%-[.HjG"'Yan>BL1)a3Re[:Y)a%,o<OIU!(sbUaKuG5UFQ6>?`iV<t0Xd<F@n2fVP',+D5Km6fQC3<tnh._]UM:@:_#o#Fclrm(,W
%5?'Q><I]5F/,R=DD:t&K5@$0co_;bSG^h_/B"$X9*(ZWTjt3J-SoB+XcU-sE:jZ"da1T(MXdnQJc;;]rGh(89ktQZZd*Ai#X_\e\
%]rBNG;VBU3F)u+DmIt.[Y\Vt:f.%jokP]bn=N[gHlQjmd\6e[`Dg$?t\R&HU+"a(\OYO:?@ok4KNKc.XE;rmqUlXQpZeqJ=/<0&r
%+Bca'nmqIW)Wea(/IOdBnBm>cjd1lSLBQAXYOUH45uZQQ7-.=\'X..Km+jOU53&Qm=nV-u:Q)=GESU%(T#1)%H99?S(XBA8><Zr4
%8G5F?T"UUok;Z5$Z04TQl)gkdApgr2`m]Q/Fu&P<D!BoO&K>6/#`am.hLa;@?m<+[Bf<H>?X(j;3&UCCA4'h"hVAWe[HDl0d#)!I
%bPWHO@e`%B(@sls5FLq6GO\kA;(YiN_r4B-r#7dl>Ag:-g`O_Xo@eKZ7P>!J1%1#h`TNoP?f_UsYQ$&<W-77S\f)?BSYTiDDqbdN
%Rl5\"*+^d9cY@P-NBWe@HQ_?4qrAb/0b7#;_bf9udFucXYjRp6UY,mUC/;Dfc2Q)'FuVP+aL#Ao,]fG_0.UUEJ*u8eDWf/+,Iflo
%4o7fa2]U*6*_ise[E71+VH6EnJSB%'NVf'>1)@qfl)_#Q*uY%U.T(-X*5P$$pfnGda,7"IlSY+tXLlohY&3ASm?q.<M.emCier!6
%YO?ONG+;Ns6uJTd5;(Mr]_._2c`/&4gS1o9<)1h,3ED%FI`h`6_1V;hSLb#8o0PXN%sM'@:*ff#.F&)?T79Rg9$retS2BN-Xh@Ol
%N(p9d\i.Jm-41pD\(JWHA$]!m/mn?+4(gm-o_EYP.D_/qPeoblU3jr6__)&Y=Y#!$0KTaHMs^LSUo^jX*,P89Y':ZXVUGHlYE2@'
%9s^A_\2M4@<I*gu%b=ItW>d4)Irp\Ao?D>jDN#M4g2`\K:[F9O_cD+fb^.*_-hM)UH!OsLn^G@Vpf=/u.of7`'#B7QPtoTd,Os0Y
%<Yp[\n@lJ>]%Y0W;m"95D-&PUOE)$3o#""E)Udh+XF"\k3#^\DgK;SHIk>K4G!,$S<-f>[0f01`CfY43-q[:KptV.Y=?DjlHM\cJ
%alD[,_b5-c(N%U<8"d--?i+EfHQG'tc$?\NZRrKu3P?LK9"'ALANPHBFtd.H`dsY^*Sl*b]\C*N)Y0C2c[W+ps'8iV`2p?]hZb/k
%a]!JVV1,uj][='k5,d_]de4<],b1!RilWP%%Y%j\_!4Fm3*D^CogK5`e3Qsd*oE1(T.>?)CD28s^!>3*gi@!#QI;An-PV'+o\J`q
%R$LSlm0\TfJ_A?/(8YdB5$uGi#6CfcN.`4C[1o.A%a!o4p9EG6,V;I_oq<gWl7Mm^/G=uTn[;@e?IH*u8$2LJb3&0H#10M1*@hPN
%IgsSGUF5"rhOhKDTl46%/po+LJ<tn^f4T#4V/4HO,Pui[,9!aB>kVV3D<.<>ID9P$FAk!Hq:a\R$Fng_eb;#lLZV44oZZ,A7pp!)
%X'0/lNG^)&??YN$-dJX=khVHFk>E\VRW.,Mk3eq^1t=PB+"ViTCCRUNaTehB\_1`efW5A+T.YONH=eK'F&2[(4fRXV)q0jRZ@//M
%!rdVqqpE^p[]0(3>I%:(@<M)tec$0Z11in3fq^>;Q`5f^:[=D58GR]@lq`_f^[pnnr(u(JY2;Q!dE#QEs0$4*J#dDBk]o7u>>t1,
%OlPSPQK^P]XK_R(]=C'Plc`E>2Y1*%m[MpHf"P&]A$^o>k9#NUU!e]Dq#Vj\5ES`5p<$0t^)K3ij#NuY:/\]qM<)7Ye^IaMlZq70
%o6:tC'%D,`(K\0*[776+B72!o,)RuE;6HrE,B@fMV]46h,)p*%f(&;\c/00.emnmnHlHZE*#f;%9DcnZi?49YWp5"I/QV>B:="9r
%hTb[5\Q?u=EFR^AkJPb7%sc9E@etMQ:':@7gO"B@X:j95@TaO+gN%<(PRk5Sh;ITrb"N#GM=1)#Brpe&drOSV4Eqr/Z&F)F3'TQP
%#Kc6%Z2a6?NBR%d/iD9$k8fQQ_8%9MogWn?#^G4,]jNipW!P>FL[KT6PXZfjf=Kp^6Cqi?9e&4Qm.6"6Z%mKpqhJfqppT-`I%VIO
%_T2CkA/:5nAMquHm5L&5`>3^Cet&#5o/Q8Wp?QusNu,[&_0bpu=7*^k2R_67m7/]K<i+F<bWY4Z)SseJ'd!sdERDNVrR"8j9J_#Y
%2(OGU.bYC!Le4PpN-R&8DT`MP^S/]rNKJGZ[eI2$o3G##24<=q[@ZNMV_(J+9,--?ERg9pk$#ih.6<bXfcGGL=uTH>2;5M%I2dAi
%<k4<+-BW#[W+ar_kkZb.Sp0kJ[QPu-0STG9hWHu(_ec.`ED?R&>Kt\8D`Xa,&)Y!+>$K06T6frGlP<Pf)Q\:7oA^fm:2K/kpZ9cJ
%R6e_OC1[R0C/&8'65/*F2s';\Gre$8\Xq5i)<"8'd'pcnj+WWqch4'JCW.7C[kFSM3pq;KTD7Z:lpac@)'%e-[Ha*\a,eVA>aAD#
%XVP:+d*C1>d90183ICbE^`!PTCSU"Uc]u6%[Hrj>S`6AN,J.umkE(013UkM7ZZ_;pVVTh?puC>?['YkR[-m2H%=@E.]lu[.e]d%a
%M/Rmc'0^p/?bu]G-uPb+(KQkK1")BBaS_r/hi/[s;CiQ`iR':@e*gcQrA$'"Gd'1k$FoHC<&q;+mh-:NfrK:S.Gq:@`C$-gi8JqS
%*dkS]A`hH2\WY\g)V\133LT\fHQ^em57@"VbI';khe.YSIi)l7]jjS,&p4KI\LTInACIkfU(j4?:8O<R>e$C?bCMua46is<,d(o9
%MkN<dB1AZj*58HtDG:NJCloB+<c:p\]=ZG0?FtS9Ng"nSrlo\g]^A+cfii9NXg06fd9D1o1bV(%;c1N%bDnXG:lj3\2JM]MhjM3R
%inNp7Eq_9X?Y$k>jEk-2mO,@/7l0Q*kUl6QG-\V..<mdG]foY\n0e]G6&WJ0rSd,-1`(&mgTkU5H8"IZg0*1C:R.VrWZ1,(Y49rg
%n2T=:hf?Z5<I93PEeG+H>ub(<CTi:X7^ENLpMUPhXPp3Da>>p+jg!krVtt`sRXJrcAo#_'[Ya*_ak=Or;%l-[r0l5=:A<edBY!Ck
%mFREZ7W#k3\7Vd]gC`978s*k_??*u[_Fh@t?VB6Q;E*d-%F=8!9@G1pdSr,,RR]EDH!#t_7mWt9*Ep%0n7]2M*nopVG.0-6qMfAp
%FZqE%NqN">qD`=4+$+s@-Sq,C]gqO>2)fh#aA4&YQ%8Y<`tgit1?t'+aCsOX"]cktk+5t,i&pa?`^2Uk%9+[GLWI'>%umA[jF%fb
%H:-q:+Z-AbS^YZerB=TUcX&B#AZ*3QXcBfmqLUe\B9,BrjKPb#+2c-nU?no4Z,WK@q-nT]7X2'eZ&9u4CW+*bieg%43f#/@]uONZ
%A.,q<XcatGnN?JlI`:)S2-9RY>WS_m[>4PB7=2:nD&$-_du1cn]-.\c_8jPc=pKVM[LK.JPS>^*VJZ#$o6utl9=<ckoT55B?I%)9
%H!RBmL)pb`H\\f<p-_gPSD+co+(acS,DY"5SrqK[mm2/D[eGM$lc*sHP_K"qo4)^kK4]k^@'f?4*3a:^pUO\3*1bW(c1@tb2!:WC
%i?K&<ajo1>p3P5HZD4`TQ_qK?`4r<j1[WJe2Z?K6LL8I_r2qn!1#$k^\u+<4%Q-nRor%\@)a.lhVtH^1+0dq#]=)jRW8W;TZm:d?
%]m(O+':#=MFF$)?@unq'<%3&!hM:gJ@t$U:(-Tdk#Fk'B&%]W\^<p_rn,ba=Wq2`S>Mn!FTD^a!gDT,+m+>CZk@6$6:Uo5PJF;,-
%,KEaF8LqBS;3t"7\E)r)/4h:+0).1YC)bE@H$]nKVG]>1)t/C)UXtqq4'tIV<(,@4F6a(!VE(\8(/LOt8#hhk\Tc_*ThmfWZ1mo<
%=S$G@Rh'B0(+G=CHL.IiSko:qYL_+ZbnG@ANI4XW)/;d=FRC`D$'sAIR./O=(<uN)=gU)rak\-Yp4Sp\316YqLhr%%8bmLg?HMGi
%2s!dnX\&5QaeLNV4$/W$67#[>'`3'o1?nM_/PDSjR@euA]UTc"bbi>Pa.CWVi%E#mqRs*+(+jF5e]DF#ArPM)Y0&CIR3kaW3$6-L
%p\T$@FZ.56`d\KJ".Hgj[*)W!ngMR@bG-<L4YDe\V<g7]VX&H0rT/1alTA.K;P9!7Ip,<HY"2cCOH,L3d)#GkNP!.?TrY$p#+;@L
%f2"uE3;-T>K5oe,n(.k/?Q/=\i,N/D4N^W0p!VgXI+5m>75#U<2qKY$.Vm/;bcWV!/(IAi[\qjTLHs?rZ6<NQ>n`2''/7$6?+pZ;
%T5KO(oUqu":GtjY'9:eT&)EF"m<`XY&"Du0X34XiH8rSkAtAXX;qW-$jgP1tNG#dBZ6p;9-\kUJ=-(WF@<[4Q41QDnn/<0dYc&eT
%DJ_UF`NtDXigq.MO03=ZM[m2-&ak;+enFk!8gS6Oj1KhJ)dAi?L?7*0?Q#IGMq7^/XOO/5B"G_sO/<PuX!=m)Hk'L`11.3^*lk;E
%HcG#/d6GghCY\(,hYSM)A$oKsQ3%Qj:KNDm4iVN3mVOUC=$_!lA94==g2>d=^WI=Nl4S@oB5>PRNJX(4"PT,C4d4</4aSp<M>D'N
%na]r<=*5rVC7%G6^?U1:,Vr:$1;%0g/7CZ>EIBF]/(9jZ>K/^a[;3V/*'[j4$9r*GRn(m+)OitZI>:DMGBoRfD0mM3l+bk[Mu(Yl
%^5Y4>W5B:+Wp92Fi>19F+ig$F;_2al5Yf%;Kno)_eIOYos%DM'Pi&lUA1G@TPEjf"/aM(`p?A3P))ll1Nl$2(W)\ku;EsNMQ$e41
%"CG>1:_#Ci/,/@)qscAmVtrtNmp+#XlAq2oolmO[iu9u)%fRA(q&;J0>Kjc&'^^a<9\;34=5SVDii".t_G2ta>Y:$UV7M(rfaIak
%qifrblUL"0Tr^CFj2PijIT='>AMf@BA`pb-QC>6Gm.6)+<$9Y[VW+gq?YpfiTiV1If.Cd92)!]*bWf0RIoiH5-o@\cBj*YGIZ5.%
%h!!u/it%2l@kZ\?%YMiq=:CK>pkDg`ELb&+P>8U$&BEa+ag#p:?IumSgRj:6e_db=L8fAZG4fX@3PNo4TT)?Tcg\)tfIDG^O\diT
%Ut!sK]/TZ;Y"tB+\R<"DfApdme.!1J8(k/R<c'uWZ>K=.a8IGgF:9lm$Ajt+qUU#<mK7OrHc!1>SQPR<X(n+'EOl$jXlf'jMKrAQ
%1%DX'boV=n=,G_r\UAd>`OGT/;S.o_=7qX;[BjGADI\1!o_kr5f)3\VA):?PQ*%e*i4RItD;84A-,4A^fG@5(@0EY"FZ^(YFtXj(
%kubA7(2=(''^BUXQ]OFN*;m)/"7#?$Cb:!5hD4NCU$@&`3o5<L@_C)u?`-fM[.2Spqqbmh.*]VskB=Pi4$VITO3sP\*P97l?-EdV
%L?b0pho$A?;W\MYOhrPrH(%;Xl"qa85<m+J[YFeNRPiYmeFeU1UU6P9DAL6?cU7?<f,BI77'P(S[lWR>n*KAX8*![VNo0U&KJ`.h
%FPEWn.)eV#b]>K?al"rL0RULADlp.h,Vq`_&WBdmnF3NF+Utgt[1\n8AO#Y-b>J4&?FBPSQ/["iSRNMp[1Zi#?opH\r,edFdBah:
%Kols>#J8QJL*.G[<N_C2e&RX;EK&G[GdEU<3HLrh`1=#6jLDK)99st5\Hp5Mak=o81:(i*1RmOm=uM*M82<oB.69fgKseL[X-H"f
%nT^R),-L[X$NGL0S6+.ba0`A5KsQj=`PX<?o8/sVmKpkh4g&TiHoj!1l;-l0HG/a&G04aB`mcuMia&8Q["5tZ'7%pIg\CV%2l[sj
%F6h4RFf1CkJ*@Brc/9h\&7ANi4Z(3mGhMj:<T\L"g>\$F='ir0V3\MJQTnbeDY2ips-L(N\FcA=biY5eQhM-$83SKJWIfo+,*0(m
%ANkH$O.sp-aFWe;%d^dhj_<M,4:B3`Wg7?hI-'/^,k=iR'g0k.1cs8`YDogHE!_NWA$b->T%G-C/SfB6*30i+]Vg+rW%cFUS4S,&
%c6QF-B(;G8IS1iJW9t21H`+"^6l^9MP!]O?*LDE.SA1QHedpL'Q`boohR721hg_WQT7F/Qh_i!8D"OE(d,T'+a,oHYrql>:Uh8EG
%C"Mb"*I]JKXkgq&eToC92P">3p<_Li!a5PBi#-*Hl,i)H<U]B%X-'j!W]n"[KTc!la'Qg>Ec?:ViRjbQS%l#S`a2'&.s;M`X>0L!
%[H^9)k)Gtmqu+PH5J<*;Mg'b!)mOG)e>g@0X6+TL53C.WRD1lq5'hn(e=)g`#4I<0Z._@*pZChU1MB!q"kd*5er6OXDABF,%H\?G
%)/_rWbLs.5D9OfBH5t!)fYiX?]:SA,7B;K]U)J:D\kOUcs67CIUF3M`hOY(d9;-F8flikT;rCJC:5l!`lnOs8Lo$=tg"r!uZ>'nu
%<GWo"(>ScVjLZ80:k*.Hg66#?Hh1HKr3H#`rh@am.@^2&>"-Fqd:Q&-#8FB.[Ut!"Cu4C/Pre_l4gI9TSqc3\*6B`i_WDuo3Y>.t
%.<o%8?0#8uh`jO?A]a(/4bP>\k,'&YQ_F1bAQ/"I/&*&@DsF+JRrHNG^AeEIrWq3T?&QY_Q9'JA2/5/;YAmn97ZY/[W<M\?ff<_;
%53p7CRN1t))HY5N:9/%+r[DQ&mD:@P\f"bsm@PnW^[#$.lq(pe.g<,#3E3cnR`-@p>4P9]b-ABhb,i$U\V=md^+<$D0t&<c1@&uf
%gXF,fEqta9HV2I\rdXNskjPYGH$B%ngdum+F]7q3GD:_LnQ2X+9mOM/5mQN04#^5*2Ug.2b@rtDme@I0gI4pUShG;eamoN(EQ9^1
%XqW&RQQ+T4ds8LeO7eF"-CVNEJ,bKEE#2B8J*g%t]4<cJoC[M2<&n4^jl=)phrClVIXQLDp\Q5kQC&iiIA$l&$4K*;Y'V@u287kZ
%gt!prRSNk^rNM=>(-bNKf1kjpU+DdcCj]SCq)sGrDLPaDmeXE@C":cHrP'p"RrA/\n.5P0JUdZ&GFj$%bAt*9T.d,(s8C9ipXMBF
%Xq>t*#3MK*Fk:C-o,khTr.+g%J$o:Kc[U?#s+S'$nh6VD.\^V3OUmVV9'2[0rjRVh7Jo^Epb2E.,G/"IlsFtZ?1G)H'CI4I,em@Z
%q%$UcI#9OIGEOEP"N<4c[P2BX-_'7hA;EE<,eq3PU>8D0iA7l'\4MkP,ZXI#._0+!\*-"M&k"K'pbYoGa@2On;Mc>hado;(^<8\R
%SgDLUcW%t#E1<U!'GUfuL#+K+A-sSQP^F[88@hS3a>Dt9:GDteDj4e)TorbOe*mYJq,J2)T;n"A._ADSl"qV!#DPuCi&6][_B_nn
%%E#*cYSKOrR<1jikopZg83U107iO37RbT6XP#'Nb=h;G88N7s46Ub;NaYJfgKLI(nR]+Cn=ek;H1r9\&09^dP8d6SAoLT\>VlN"t
%,SWe,!n2t::)O;G.?[JhnKNU+&"(?b0R^5.[fN77R#d?')hNI(KH&%^@7u,o5ph6Z..VIIn>V("3#e@EoP#MAO6e-!T4A#,$(1j8
%O,ud592ZLRKgn'.\*5*M)HLJpR>+2@O%doWC_3R$I(Fj`Q0AP+"Ms")-F5-D?=^69P!kK?$1'<c5S=2AP8.5.]GJZ>-BT"u-_lo`
%1>-pa!O>b]Bh8qcRRV`m&Q?e_32eT@<f"gfYXhn>@S*/pi>9IG(oBd!RE-Fc)mGka6RJimOW*dEP\nr`i2/"OSU*t08]<&kZ;8tH
%CP]>'5TsR:+e[t25e7(BWURGtZ=LK/.`l3Z18gdq49I$#f*K+s7=7NlJIH(XVLYJ[HH;@^d:A_TI4C?ont!!VVOSl1)Q6mjRmNDh
%_du96bEn%e,4C%*W.:g!KZ,DN)KaSNmssZ@aqG]p/0J.dVpuVgRDObN)];%pOA(A6<7WnK*Ophp-@U`8JbXi[2Y]]F?:77>*7=S7
%Lh'-Q*BDG`P6;j^l*Tqr6\K$5b=n2S2cNS_7RC[KM.ik$?=ZqQ!3=RC*79k%7'c%Qad+DXVO1>m^aQ4IGD+EXDR`*+8@U1u-%U>/
%@t^>E'2IS2O^IX-nj-44!td]iPD5PY)0?`],]&6p3he@cW(^@1F;[+Po!K&Wo?CZ8?meL@ThoM0`gpp/fHDH%+C=+J[E?F&ko)8f
%0S57K#j]jCNTj09WKK_af"ju$!]<4#"fP*dN%\l(A8\:Sb'#HnBY:Om!m<tWdm.2OT#%'h#B(=/<g(M_TI_kA"kmhQUN!i$ri:,N
%'Et3F-s_Kd'!)<RMBeie*>7$_WnV(]-*Wj]Y:A9-n1eHg)&Ii.Mp+`D-Rh*Q=!F)iU'N[jNC"MG"I$,.bRE$7U-'oo@$.QVJpl1:
%m3LGCU*ThU<Eo[?L^4)FL5;E2k*rSX?ri_@7!'ck9,&oKOf0VF,bQR$D=fR$XJdU+0k_[U>WMH`A1kH;7'*?u!a;SjdV`@lX=2@a
%>SVQ"M7@"E#):(I-HdAY&GO5X3grrORjl]MM$Q?%4&b])kB6``Q4\$[/2Z!%Q!5rW3$3DWGTjp56Y3Tt`[BGVBGh528M1lh-:XY?
%$g*3daER9nGale+U/Jsn,`N]O$&"0eT%Z-_j@#)SA>IKb9iIu#")FmZ+_lQ*QACoC#"lOSFa:cBlFR>:(uSg<"[5cY+p>`BK4*nJ
%\dU8[&j\+$_)@m&'9R/EV+p&U6c9\t""[/Vp^P"N<CsJc6U^a9.H;]##*T?G]#?D3Lm!Scl*<R&OJqY[.L[q,AqLLH_3E%dW'#n@
%jf^4-9J%NHR2$=)'(?aKNeZ%k9I)*J.K`9R(D/!FK9ssXI;'EQ[Tl'KB_%!#&s;#.8(!-6lO1"Gos/+imL%T,>hdeZ)(8_a+C(t@
%?gRpI1^XskSOro".ge0;7Qi@+c+']MhhZ&HQjY$0U+SlB@L?nDhLb+5Q""J[_:HDGR5"nX`At_R;`[V7D*aq=m`#gr^_#$tP6(lT
%D)#@jZc=2+_:o5?7%=Ya,O!?7bM4NQD!>;O,I/ls,Q\brRB<&h30RN7^`e5r7)hNX!]c>^lH'XYZ.2]PhY\)-(Mphd5E`]VnTVr;
%E%1!]A%qVOeDGg&#dPnAGXuHhBKQF%T>F4i3?jB%7#<Kl&L^>*&_'D1,T8@e>rq'u?CI\,:>N[D!QS48&P>Xi*TIWKk#ZO&AtnlD
%L70MN#S5"Hb0_#\`./'>\L/h$VRoW?$iLe[*l9h#GlZt.iOd73]A>p./ML+[!L`qD5*b@Fm]1lR6PV&Uj=lND!A3lO$tKY(8iI?'
%e?:GEV#/:>3L.)B=4q%-Cq35;$u2kSMZ&CIE\AOiPpKaC&h20AWHo`%j>NW^DNdF,i[h%grWKi!e1dPIlR>.Gil)<-i??3U"ui^?
%\Ue`X5S`fl#]`0u3M&Y?^&_'uf1_/m+K!7tLWVJQVq)5>TOrco+oFfikWBar.'Y0Z.Xn;Bko9ULftJkV;6nIu#k!V.J6Q[&(5BQm
%*ROoeMX8q`MC"XP5\ah86DZ$TV1;[G0abBt3WjNKLf%9SA't@J$Me:)*2K;^QFYa=%`qC-9Fb_A=$cAt[58:;cbce\aOBoX&rB%S
%ZjFc5MIj;)+dCA;kJ!$o+.WMOEW_U96hKU]b@JBo7=?)L%Rs9Un2A3q$>0FW-Ok!(.0G+@8<7k(+f#*KOZf1BBShqTYR$PRk]B4h
%)\"_=\0e7I\ON1k(^$lnN9J2UW[u;Emtc&S2N_,uPG9656;W(c"bt3"*\'L66f^0UlnYkF'F_%l_AN[oC5qI"gkJQJ8XVmsNks7F
%j5H'8;E4Fogg>(2QYs<,!BC^/gdK'aEhh%X1_pl>$npqU]q`t4Lc/S:$S2?&;TJj=`,AUmr$9_-_GgM1O:[O.YbU-;/;ZDQ_IOG#
%_CADCM,C-(dU:0<0\cZ^%2P^s'\))93nc.EjJ]tNe-MF@S])ln26gQDRD)9U9n5]`Jk;9^TE#BjkY)&9U=k!$4Y+Lrj>Oqi3f!G2
%@fprZKjdU@RS^ej#:PMKbL^,gj1'Z55%_ZR#&41&d<-&oV6#biY-JZDkJ.R>SIGdt+[W#.17`^=>8fc)DNel\@_a_;YLH#*/7/EG
%;ASL:Jb(Q*j@<%L.YG#n;*8!p9#X-[8M0'1A4U1OSGP@"@kai)'Bt.Kq#[D1:^(AGE@B\^A_#_dTdk!n(N-c,1g+c,\'6U_Ot<C.
%^t[LcK>ed?KM8EP/2PF\,Fbk:dK"mGRDK+geOaqp,[U.@6DK(F!`P3Q]888,`mg7>51Ok#'/`%LE8ro6><5Q!12X[-)r)nW3Nu_$
%,s`?8h.2f['EA`i(RC<,'=6-:+R*^MBX_^.7:ZB-.@L;P-Bl!]/#u>a7>I6f`)J:-EA]L]lG11?)*HFo0S9@7_S1Na-lJ8^RtFpS
%^&p/K+;7r`\'[l!_@9gMiKT<@!,!,\e"E(qTLh24k8m>5eQeaFm;,@KC/n-_'`F&(p",i"Jj:9?R*e@!*5YfKA-22GB_5oBj>0S`
%6'*RQ/>skX87PR"njF.2O3*S(jA?hUBKR6.e*m[+ON*BG^f&9n,@-jr6;5:?r(bapB-U*I?kQi_&HSJV@4.^cMUPD!+lS%80M)q8
%3+T6-`pGi6q=Yi8j6ROrElfH$Se.-[\<.@<o,^#>M'E4#-h;ikJ\Pl%E'H'fJV40qmFs5f8oEkd6Y[]q%D89)%F8tq\.r*Q(;9Pl
%!Ka7W,h]LL2L(K#KdOE3qF+pZUV=#;Y]Mime)VGWPmK=4k-+!DEq\`p3X$R`DJGddRSc)1i[n=/kr/3H<)&!C"#DX2Gq)s*"W+ZQ
%<)_2JdOq5*1D2)=0NgCAM%]XT^EA`(Y>`&f6&\L&!cD)=In#q5O@WhhR**s@>'Irq=[SB5)&T/P!tYe2-0.Oa^L=R+5:H>!YT[We
%QIjW2ZmIPuBBl!,DVF%f1a8s<bUh(Jb,U&S:hdU/\-do/h(0M`GnJ;L*`9\`9BW\ObS?@S7%F"_6!s2Do9H'OQ)/N1FHAe`COTQ%
%&>&YiRWIJq,OAmM=m?QlI%mp@!)7%*3XW49r%ju1F%5mb#U>rpqNaHCq=S_S[;]>^mI5)qeMWZHTp-3lb3[I+2^Z<6ZiZ_NAO'f>
%1*FZT=VP&o:j=Ok,1K"\_GF6@'6<OaZfDEZCn;K_D:Wrdd:>NE4OrMch5'NQk,&et.i'VbcEF5E9;c7gdO(2.YM9a%EbH@M;%+'>
%.Pc6BNMb-scC$\WX8SjP)Z0TH%n43$eC4dinqH8F$(RkP)bLEMeofb_a<FNdW1hdnqr/o4!'iBK$!@Xi!C-&WO@GnBI"eIZ%1Z&t
%gQ8CF8>(*&SpZ8)K0'D$Q60]%NFb>27LKLA6ptGbcbHMCmXu0Q:;kYXa;cM.%B-oj"s=>F[Iuab$1`^\&Fs`212_S0bTHq4<bXuj
%j@j+'0W6m;X\n!k(n"qd!&*T<7W8fn@AaQ&LQqf(#&--E+nPVf0&8;4#"-Er#V,p+CsrEt@n)tX8J$B>h!AH7LC]YanJW04=_$qD
%La$%73@m%H.K<Q1'Jec*XgX';!!(qE,8l=A>;28Z;cj[UY[#ZTOP$@2=41319k%YlNB2,h:r8qUHg\`rQLTY@ROnE%,6^KN'#Po7
%RAtf%0>sFr=mO<.n\d?FBU[WfH))_UaHYcrJUsou5eHD&E"Xl7iA/Z2)(b'*J;e'J`*5G2(<+9MO%!&62cu;^Y^.LdEEYI$`[4NH
%F%_H(EQ;#rfF!H7OE-VO,&X+\olCfWT#SUH+k9pJ/l@Tn6jaM/NSd^!8#RnukX<!j9^O911fd)a\4B'^@\3g*HE`^R`q,90N$<P?
%bUnH>-X`".P"NGqb='_P5]>'G;Q0-d<<atiE%2;$4Z*_K22-P,REG]%YAf2h`p280U9f9EM&-Sl=PXu57n3u=8#a-;"rP\-f3#M<
%Tmj!MIC!)3"W4hF''o!25as/O3!,^#_a!>qpf9\P>@T*MCh,g#-Q<IRldrL-a8S+Ma2/,E36!eCV<\uPcokC]p-9<\lSfH[VTUOF
%NHI%G/r(VS=rE,H<)tcJC*KkjQ7Oc^"Lhf2"SIpD+H_4LM:Jl)9aDg<.;^PdP<pZgN%J:D.(;6!D/(eMrX?RnZ[gC6_t9020'J#j
%4kH+N`"jMeA[lh_(l&;53_3X7`ZcV;T6<Ci%,jf8F,EYa4"]su+!HdC2NamKM6UL^B:8WaJHg%&C'CRVM7iU-n_OtB-aI<Lhk8S?
%A&b`&\1S]qaK1(&*$nVc@>#7'M'n:^)DTO%0M$1nn9HT#6b\G=:b2t<".chRafOHP[eZ<CVSa@&FB\I[ScFCgoW*"j]\"[;C`t?_
%oob0E.mW'BQO,*WKrNP$Vo`M&\jF7iJSpFdSjuHHE/VOUNbhP#n3/:-RYOUM\Q3<YE75Q!,HARk6fMu")$&PC^NiumDrW8JNE,K,
%190n+'*N[oc'01!FuPeL)F7iRdE5i!S&.K(X<;#NR(uTC*5W:'@*2C.N>#:1,n:#GT!a_MSh-/*K#o@g99j30KX]I''>)'VP6C/`
%R)r:*(!rp1@UYSDXMQnsLgbY$FTPh>L0L**UuaFm2oKAZ:\V(+kV^m#,7"_)3q4O980$(o!hC'KFf^O!(kF[#@!,Nj65ZnI0nZ3s
%NWg,u>P".MfKPnF;Il)LdWosB]Hs,*B.#NjcX6kV"G;:WG:E&u4Nj_@#YTMoc'59*s*gRgG?m6[SHBDQ.gXM34(gfL]!aY?ksb5Y
%0MA+DhC5+^l)hdRC_[=RTZ9m::_[+##*GVS8.fc*N+W(qqe<\%eXCJWKq+Ksm?2`VJA`ru1A?tFce3r'iVa]N%;,[oj3qSr`!/e_
%$Bgf_!*akGE^J2TALUH1h^+kk'UU%?C%h<X7o\lq34/RMZ:CX2*ef*O"3F>A,lWusmIQX?r&)-U@L/6sY:r_g)-GOIMT'G;.e,YZ
%-nc-nTucNN^>1GTqk%:"?@]mf:-abB3_13.Tm0Al$k#[9KU0D5R:of9Q9QP)K6B^@,_cJrDN%l!#)`u,2PV=F"6Y>p]"mp&#44;\
%<>msgL+<k)5XgFs0Q%%=VgOY?'H.gN.&<Z`YDR_.6l@PZ-up%l9IJ<4:`D-N&J^/E#XgKXU;7tL?P(b_"m:.r9SJBqUV^t0UnV!>
%0N+_(N&ofb0g0U=\(cFK**jruD_M\)+df3q]]_`PY,J??*f8M0V5WpM8K%0ll<tg;LCsZKJu7OPTb*T"n6cJ*l&I6pU^]jt@R*Nu
%Bj7W-[i2]GQ@W"/JWOO)8%`$"XV&#fR0`I.mM9a\7Fbr<;<$utl89DH;*uZI]Tn302A)+>1s%(B#QfroKaTdDiuX,p=HaCPR5m!a
%U3sJ*`?3)W?ACh4VpK+H,`L+KdTA=W@T*"0qZ9./:pR`g8D?N49i0]I12R&)3IBCEC8LtKK=nO&E3uU##;kR)d"6;IXr/d+"0G0<
%cN%1J]nGr@/en_\^^(NM^DsaKhFCsg7oq+C16VuX.A"&b<M5AX;@6q]Qj+KDi?6?D;"861%qMY6AhL6C&(gp$7g@EG-jH?&-6j@(
%djB6O'B$Rm:k?N0n8]:,K&rYrM@bFKCdc$MJ^?X_`O$.RAMlgXj!qB7?^eJX9XM_Y+m[Y1;Fa9o-;Sm5P.X%U%8d%RF(=cf:Lb83
%?:]b(&cT%<.(%IVE=*6mM9\D\Tu-+H7&(<g1+u?*a5@_)@AX3G6nJ<(Hjk&s[T1tGUIZOKXDS5p#_4Wu",ALB.*CdB'@,&k]Tj6L
%:V.tDQjDQgU8"jS]$YIk**mQV69BN;Q\96D@0%=+d*:a7K99s0kd;I@a:sn1pcBuEdI>q!D+3f;`__@:34T9F=A`WSi-5ZR$7/8T
%=lgrNW]LR^hp>.A1&AUh<q?:Jd<<JX:lIiDbkN;f/#4X&/nnD%_%'qi#]'D6e;D'M:,%K81tEXsF]7-[$O-'9M+$L>BuDgTcs/K^
%<'"eQJ.\4UJEea'EgcYYku:moK[XXj#L+L9]WXS5!@j!oY;LXk2'lF$eR\r/,_\SR:L+)IpDOqb%oHh2I@@rJdre't$8MgJ)R%:l
%_?/_4g23SRkYdXY-H!L(*P`6Rs6'@&U5E;+C)$K['32\&!^P[=oD9`LfclEKi*ZY(SRp1BM_IEUeK9UEBGK(Y/Qt97/G#VH\p<tY
%J=gP$a$BN[F\?Q,1:U<,)XmAS<6f]Yolh9Q)rtcf"HVt^hP0VP4$mPu!#T69Sn:5bd:?"nVqrYP-&nUacgFVS[9mS"5H7m0n=M)F
%Z3Le9W%#&.RR3(]5_^'9<8mf`is2H2co4FXGnOJ=aYBhAhfMHP;D1V3.$KA4&n2gD8u#uc;X!PrQ8BYdYU2dU'R<,Rjq!'ZpF;#I
%2ABPMeS\',,QMTJ#^Vl;'j)9<CbY-/73jW*8(^I1=d`M*%"Y%,ds7i+b?q$&='4snZ`G`9`[IQ4JH[s%$B;&mPATO:.Cq;P`b4I6
%"?Hp5aX6D2jl[`4S^IY69SHHAc+b+l$Z%TBrL)84.?QQn_&tn]B<qJj$j,?)PA_D111\f:(TEd'U^-N#NM\0bI##W\X_?T10Anf4
%IKoXfIQSaOEmm;$#>5Ik4.%@6G49Oa-?1.SnqK\9j2%K=Pl8ZHgc+):CiJ,\ZDobf(N$"B7Lm%BGg%G<IMUXUK9[S1U.>A&IZ+;3
%#-!HC=9nqu4fjU9d[O3:@cq;3CkjjXY-BM[[Nj4a/$/@CSOO$.-r_b3k['urk-.3EVZ'(oQS<p]V'Gl\![[UsP6FuDdNi$!IGl)+
%>t9s20U,<Ebk7K_c;(rY(4a#(SHXZ(?`7trYK9C_(kY<^bR(PAg#U1PB]$tqmkf=a`GI(h8><EJ>Ic*Ln=7Bt$i>l9q(ElAf_W=Y
%[ZX,/cn%hpYschZkV+S%niA;ZFfZ6%^UTCHF[Tn07?h@&^R^MI/q3R&b!m;Mpfp0lK82sS^`aFLUdJUH<>/O46'CXSXU9X9@<W<:
%ft7CZjXJaGFGpV<.F>#moL'WlME28>I]*5q*4#1](SHB]II.^G@k[le=_c]!0a?_5%<bL'"q;n0_BgWC1d,6PApYNFfSFkJ/X;iP
%em\Z:I:NRZ0Ct\M5ECQ>Ve?NB`2E-!Z68%&?uR6ASck5PH!lmbgj,*Mbj/lX-Vl8aVD(<qX4CDZ9L_F4S_!Y#c@;0NPaETr;g5>K
%_NA_p$k/=AbEY&VGQCRNVK7^^8P+c2,_>V]oH5/YX3+4D0olAg;,V]5T2kN+MY;;\%fafbiSAC6GYXXV=X<)u*\C39Z`_&":(fWH
%,8kT)-0\GFU:!sWG=#`+("o;=[%Ch30\7f'-sBl,ifDAaLj$%/(XEW.+jZP1LGflnjA&Nsq24q>$ES7MKkXd?/!XD0II[6J_+kZ#
%)Gdn`X<M-*4??GJX.r&A[3po^Vh_^!^F-"1UBjM'%<EYW.S\PlnQ5Oc%ulpfpn;=_cpZ&Yr%PT/hgN?4n\:2_Oa"'&ll>;V%Pe`r
%ESb#;E8$<+d\eUYoX68:B@S8e(Re%Kc9Oj$GtkmcdmX!Y^GNbuIV#DW'jc:bRaD(;-<B25g`#LBgX8AE,dPE'>2o3[[L/m#jEQQ+
%#Oru_[N-OR'_uf=IRKh&4MY/F<"@.IiF\'X(%KjT-#t!JU-JiN=.s$B['-l'"skC*@qQ.`?J/rr.53?gT![A&6'ED_Q[($E`G>`3
%Q;[NY=:HQJ<JU]ajdHi=0l"7rkJ!@Dfl_jKBKUPnY[C^4q=-6-ekLMYAYdu\m&%Ie'LS1jY"!Z%MHW:r;[Vt=pgu9VKQuf1AJUZ3
%+[)XAK.4%8nhp<[r<`:fmfqTNL8tG0/.-;@q.^C#o1^Dm[7Q!LV4j'h$^61X)8_\[1E23nordLX%JDUm%Qq][Yn;`e^RgQd6EBqo
%6:dUVp9FsI8e7!n*+Y5#n,gmD*=]IZ,:8t+O#M+[]MDd@SRZ$Q74EImYD'Q8rN<6fgMNNNnLhPf/E<5]n@[Q$MpojY5PamK0DO[q
%aZog!n[H;]i01>tL&(ZBbBM*>:A^*)MnT+d<W4L`r2jGep%\o#ejVbc57Q\)lRn"C#m532q<d'9oG'CDT>h0hcL?n\c<n2RaD116
%M*u_Rrn(9GQf7&T4,d^,^9IuX0^kUBL]-IXQe6fS-Ki#;rkMmOWJQ+Q)8>X!^Ze?Ks8#',bo"2*?<-W!f-U-WbC9=7,HcqW,fi7K
%=WO;]PJZh(VC/R6$p9c0o4e.[>]-F:J,Wr,*r_erh/KiU`D-s)Vn;b=HG8`Ae%>3\s">4?S$"\44JZ<3s89q;!uI5)lM~>
%AI9_PrivateDataEnd

%%EndDocument
 @endspecial eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 -33 a Fb(4)207 b Fa(Stef)-5 b(an)21
b(F)n(or)o(cey)2634 b(Curriculum)21 b(Vit)l(ae)p 0 86
3887 4 v 0 371 a
 0.4 0.1 0.3 setrgbcolor
 0 371 a Fg(T)-8 b(eaching)32 b(Exp)s(erience)830
371 y
 0 setgray
 830 371 a 116 499 a Fi(Graduate)h(T)-8 b(eac)m(hing:)42
b(courses)141 598 y Fe(\016)83 b Fj(Adv)-5 b(anced)27
b(Com)n(binatorics)f(and)i(Graph)f(Theory)-7 b(.)141
698 y Fe(\016)83 b Fj(T)-7 b(op)r(ology)26 b(I,)h(p)r(oin)n(t-set)h
(top)r(ology)-7 b(.)141 797 y Fe(\016)83 b Fj(T)-7 b(op)r(ology)26
b(I)r(I,)i(Algebraic)e(top)r(ology)-7 b(.)141 897 y Fe(\016)83
b Fj(Structured)27 b(Categories.)35 b(\(individual\))141
997 y Fe(\016)83 b Fj(Adv)-5 b(anced)27 b(Linear)g(Algebra.)141
1096 y Fe(\016)83 b Fj(The)27 b(Asso)r(ciahedron:)36
b(top)r(ology)-7 b(,)26 b(com)n(binatorics,)g(and)h(applications.)36
b(\(individual\))116 1196 y Fi(Undergraduate)d(T)-8 b(eac)m(hing:)43
b(courses)141 1296 y Fe(\016)83 b Fj(Ordinary)26 b(Di\013eren)n(tial)h
(Equations.)141 1395 y Fe(\016)83 b Fj(F)-7 b(undamen)n(tals)27
b(of)h(Adv)-5 b(anced)27 b(Mathematics.)141 1495 y Fe(\016)83
b Fj(Com)n(binatorics)26 b(and)h(Graph)g(Theory)-7 b(.)141
1594 y Fe(\016)83 b Fj(Calculus)27 b(I,)h(I)r(I)r(I,)g(and)f(V)-7
b(ector)27 b(Geometry)-7 b(.)141 1694 y Fe(\016)83 b
Fj(Linear)26 b(Algebra,)h(with)h(Mathematica.)0 1903
y
 0.4 0.1 0.3 setrgbcolor
 0 1903 a Fg(Aw)m(a)m(rds)34 b(and)e(Memb)s(erships)1035
1903 y
 0 setgray
 1035 1903 a 141 2037 a Fe(\016)83 b Fj(AMS)28
b(mem)n(b)r(er,)f(2000-presen)n(t.)141 2136 y Fe(\016)83
b Fj(Kappa)26 b(Mu)i(Epsilon)f(Mathematics)g(Honor)g(So)r(ciet)n(y)g
(mem)n(b)r(er)h(1994-1997,)23 b(c)n(hapter)k(presiden)n(t)g(1997.)141
2236 y Fe(\016)83 b Fj(F)-7 b(reshman)27 b(Computer)g(Science)h(Aw)n
(ard,)e(1994.)141 2336 y Fe(\016)83 b Fj(National)27
b(Merit)g(Finalist,)h(1993.)0 2545 y
 0.4 0.1 0.3 setrgbcolor
 0 2545 a Fg(Contributed)34
b(Presentations)1058 2545 y
 0 setgray
 1058 2545 a 141 2659 a Fe(\016)83
b Fj(\(refereed\))27 b Ff(Comp)l(ositions)32 b(of)e(c)l(ofr)l(e)l(e)h
(c)l(o)l(algebr)l(as:)40 b(T)-6 b(r)l(e)l(es)29 b(and)i(p)l(olytop)l
(es.)266 2759 y Fj(FPSA)n(C)c(\(F)-7 b(ormal)27 b(P)n(o)n(w)n(er)e
(Series)i(and)h(Algebraic)e(Com)n(binatorics\),)g(Reykja)n(vik)h(2011.)
141 2858 y Fe(\016)83 b Ff(Pattern)33 b Fd(M)9 b(A)p
Fj(\002)28 b(Math)f(Honor)g(so)r(ciet)n(y)266 2958 y(induction)h
(ceremon)n(y)e(guest)h(sp)r(eak)n(er,)f(St.)38 b(Vincen)n(t)28
b(St.)37 b(Mary)27 b(HS,)h(F)-7 b(eb.)37 b(2011.)141
3058 y Fe(\016)83 b Ff(2-fold)31 b(op)l(er)l(ads,)h(Y)-6
b(oung)29 b(diagr)l(ams,)i(and)f(dendritic)i(gr)l(owth.)266
3157 y Fj(Univ)n(ersit)n(y)26 b(Researc)n(h)g(Symp)r(osium,)i(T)-7
b(ennessee)27 b(State)h(Univ)n(ersit)n(y)-7 b(,)27 b(April)h(2008.)141
3257 y Fe(\016)83 b Ff(Multiplihe)l(dr)l(a:)41 b(p)l(olytop)l(es,)31
b(p)l(asting,)g(and)f(p)l(ar)l(ameterize)l(d)h(enrichment.)266
3357 y Fj(AMS)d(F)-7 b(all)27 b(Southeastern)g(Meeting)h(Murfreesb)r
(oro,)e(No)n(v)n(em)n(b)r(er)g(2007.)141 3456 y Fe(\016)83
b Ff(Convex)30 b(hul)t(l)g(r)l(e)l(alizations)h(of)g(the)f(multiplihe)l
(dr)l(a.)266 3556 y Fj(AMS)e(F)-7 b(all)27 b(Cen)n(tral)g(Section)h
(Meeting,)f(Chicago,)g(Octob)r(er)f(2007.)141 3655 y
Fe(\016)83 b Fj(\(refereed\))p Ff(N-fold)30 b(op)l(er)l(ads:)40
b(br)l(aids,)31 b(Y)-6 b(oung)29 b(diagr)l(ams,)j(and)e(dendritic)h(gr)
l(owth.)266 3755 y Fj(Seminar)c(on)g(Categories)f(and)h(Applications)h
(IV,)266 3855 y(Univ)n(ersitat)f(Autonoma)g(de)h(Barcelona,)d(June)j
(2007.)141 3954 y Fe(\016)83 b Ff(What)30 b(is)g(an)g(op)l(er)l(ad)h
(and)f(how)h(do)l(es)f(it)g(act?)39 b(A)n(lgebr)l(as,)31
b(mo)l(dules,)f(and)g(the)g(multiplihe)l(dr)l(a.)266
4054 y Fj(National)d(Asso)r(c.)36 b(of)28 b(Math.)37
b(F)-7 b(acult)n(y)27 b(conference,)g(T)-7 b(ennessee)27
b(State)h(Univ)n(ersit)n(y)-7 b(,)27 b(Marc)n(h)f(2007.)141
4154 y Fe(\016)83 b Fj(\(refereed\))p Ff(A)29 b(c)l(ate)l(gori\014c)l
(ation)i(of)f(the)g(asso)l(ciahe)l(dr)l(a.)266 4253 y
Fj(In)n(ternational)c(Category)g(Theory)g(Conference)h(CT06,)g(No)n(v)
-5 b(a)27 b(Scotia,)g(June)g(2006.)141 4353 y Fe(\016)83
b Ff(Finite)30 b(typ)l(e)g(invariants,)h(gr)l(op)l(e)f(c)l(ob)l(or)l
(disms,)i(and)e(gr)l(op)l(e)g(c)l(onstr)l(aints)266 4452
y Fj(AMS)e(Sp)r(ecial)f(Session)g(on)h(Knot)f(Theory)f(and)i(Its)f
(Applications,)h(Bo)n(wling)e(Green,)i(Marc)n(h)e(2005.)141
4552 y Fe(\016)83 b Ff(Combinatoric)32 b(n-fold)e(monoidal)i(c)l(ate)l
(gories)f(fr)l(om)f(or)l(der)l(e)l(d)h(semigr)l(oups)266
4652 y Fj(AMS)d(Sp)r(ecial)f(Session)g(on)h(Semigroup)e(Theory)-7
b(,)27 b(V)-7 b(anderbilt,)28 b(Nash)n(ville,)f(Octob)r(er)g(2004.)141
4751 y Fe(\016)83 b Ff(L)l(o)l(op)30 b(sp)l(ac)l(es,)h(enrichment,)g
(and)f(n{c)l(ate)l(gories)266 4851 y Fj(Union)d(College)g(Mathematics)g
(Conference,)g(Sc)n(henectady)-7 b(,)27 b(No)n(v.)37
b(2003.)141 4951 y Fe(\016)83 b Ff(Enrichment)30 b(and)g(Delo)l(oping)h
(of)g(Cate)l(gories)g(with)f(L)l(o)l(op)h(Sp)l(ac)l(e)f(Nerves)266
5050 y Fj(W)-7 b(orkshop)26 b(on)h(Categori\014cation)f(and)h
(Higher-Order)f(Geometry)-7 b(,)266 5150 y(Instituto)28
b(Sup)r(erior)f(T)n(\023)-39 b(ecnico,)26 b(Lisb)r(on,)h(July)h(2003.)
141 5249 y Fe(\016)83 b Ff(Br)l(aids)31 b(and)f(Enrichment)266
5349 y Fj(Lehigh)d(Univ)n(ersit)n(y)g(Geometry)g(and)g(T)-7
b(op)r(ology)26 b(Conference,)h(June)g(2003.)p eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 -33 a Fa(Stef)-5 b(an)21 b(F)n(or)o(cey)2694
b(Curriculum)21 b(Vit)l(ae)207 b Fb(5)p 0 86 3887 4 v
0 371 a
 0.4 0.1 0.3 setrgbcolor
 0 371 a Fg(Semina)m(r)33 b(T)-8 b(alks)570 371
y
 0 setgray
 570 371 a 141 485 a Fe(\016)83 b Ff(Split-fac)l(ets)30
b(of)h(the)f(b)l(alanc)l(e)l(d)g(minimal)h(evolution)f(p)l(olytop)l(e.)
266 585 y Fj(one)d(lecture:)37 b(U.)28 b(Akron)e(Algebra)h(seminar,)g
(April)g(2016.)141 684 y Fe(\016)83 b Ff(Can)30 b(symmetries)g(help)h
(solve)g(genetic)f(mysteries?)266 784 y Fj(t)n(w)n(o)c(lectures:)37
b(U.)28 b(Akron)f(Algebra)f(seminar,)h(No)n(v)n(em)n(b)r(er)f(2015.)141
884 y Fe(\016)83 b Ff(R)l(outes,)29 b(sche)l(dules,)i(and)f(genetic)g
(histories:)40 b(using)30 b(p)l(olytop)l(es)h(to)f(\014nd)f(optimal)i
(solutions.)266 983 y Fj(three)c(lectures:)36 b(U.)28
b(Akron)f(Algebra)g(seminar,)g(Octob)r(er)g(2014.)141
1083 y Fe(\016)83 b Ff(Determinants)29 b(and)h(truth)f(values.)266
1183 y Fj(t)n(w)n(o)d(lectures:)37 b(U.)28 b(Akron)f(Algebra)f
(seminar,)h(Septem)n(b)r(er)h(2013.)141 1282 y Fe(\016)83
b Ff(T)-6 b(ub)l(es)29 b(and)h(T)-6 b(r)l(e)l(es:)39
b(When)30 b(is)g(a)g(p)l(oset)g(a)g(p)l(olytop)l(e?)266
1382 y Fj(t)n(w)n(o)c(lectures:)37 b(U.)28 b(Akron)f(Algebra)f
(seminar,)h(Marc)n(h)g(2013.)141 1481 y Fe(\016)83 b
Ff(A)l(ddition)30 b(and)h(multiplic)l(ation)g(of)f(Y)-6
b(oung)29 b(diagr)l(ams.)266 1581 y Fj(t)n(w)n(o)d(lectures:)37
b(U.)28 b(Akron)f(Algebra)f(seminar,)h(2011.)141 1681
y Fe(\016)83 b Ff(Intr)l(o)l(duction)29 b(to)h(the)g(Hopf)g(algebr)l(a)
h(of)g(p)l(ermutations.)266 1780 y Fj(t)n(w)n(o)26 b(lectures:)37
b(U.)28 b(Akron)f(Algebra)f(seminar,)h(2010.)141 1880
y Fe(\016)83 b Ff(Shap)l(es)30 b(and)g(L)l(attic)l(es.)266
1980 y Fj(T)-7 b(ennessee)27 b(State)h(U.)g(studen)n(t/facult)n(y)f
(researc)n(h)e(seminar,)i(Octob)r(er)g(2009.)141 2079
y Fe(\016)83 b Ff(Positr)l(ons,)30 b(p)l(olytop)l(es,)i(and)e(antip)l
(o)l(des)266 2179 y Fj(T)-7 b(ennessee)27 b(State)h(U.)g(studen)n
(t/facult)n(y)f(researc)n(h)e(seminar,)i(Septem)n(b)r(er)h(2008.)141
2278 y Fe(\016)83 b Ff(What)30 b(is)g(an)g(op)l(er)l(ad,)h(and)g(how)f
(do)l(es)h(it)e(describ)l(e)j(a)e(lo)l(op)h(sp)l(ac)l(e)f(of)h(knots?)
266 2378 y Fj(T)-7 b(ennessee)27 b(State)h(U.)g(studen)n(t/facult)n(y)f
(researc)n(h)e(seminar,)i(Jan)n(uary)f(2007.)141 2478
y Fe(\016)83 b Ff(A)29 b(short)h(intr)l(o)l(duction)g(to)g(Ge)l
(ometric)g(Combinatorics.)266 2577 y Fj(T)-7 b(ennessee)27
b(State)h(U.)g(studen)n(t/facult)n(y)f(researc)n(h)e(seminar,)i(Octob)r
(er)g(2005.)141 2677 y Fe(\016)83 b Ff(Twiste)l(d)30
b(R)n(ibb)l(ons)g(and)g(Cate)l(goric)l(al)i(Conse)l(quenc)l(es)e(of)h
(the)e(Y)-6 b(ang-Baxter)30 b(Equation)266 2777 y Fj(Virginia)c(T)-7
b(ec)n(h)28 b(graduate)e(researc)n(h)f(seminar,)i(Sep.)37
b(2003.)141 2876 y Fe(\016)83 b Ff(Intr)l(o)l(duction)29
b(to)h(T)-6 b(op)l(olo)l(gic)l(al)32 b(Quantum)c(Field)j(The)l(ory)266
2976 y Fj(VT)d(graduate)e(researc)n(h)f(seminar,)i(Marc)n(h)g(2002.)141
3075 y Fe(\016)83 b Ff(T)-6 b(r)l(ain)30 b(T)-6 b(r)l(acks)30
b(and)g(Pr)l(oje)l(ctive)h(L)l(aminations)266 3175 y
Fj(t)n(w)n(o)26 b(lectures)i(for)f(VT)h(graduate)e(researc)n(h)f
(seminar,)i(Marc)n(h)g(2002.)0 3384 y
 0.4 0.1 0.3 setrgbcolor
 0 3384 a Fg(Refereeing)420
3384 y
 0 setgray
 420 3384 a 141 3518 a Fe(\016)83 b Fj(Referee)27
b(for)g Ff(Journal)j(of)g(Combinatorial)j(The)l(ory,)e(Series)f(A)p
Fj(,)e(2013,)e(2016.)141 3617 y Fe(\016)83 b Fj(Referee)27
b(for)g Ff(Sele)l(cta)j(Mathematic)l(a)p Fj(,)g(2012.)141
3717 y Fe(\016)83 b Fj(Referee)27 b(for)g Ff(SIAM)j(Journal)f(on)h
(Discr)l(ete)g(Mathematics)p Fj(,)f(2011.)141 3817 y
Fe(\016)83 b Fj(Referee)27 b(for)g Ff(Mathematic)l(al)32
b(Structur)l(es)c(in)h(Computer)i(Scienc)l(e)p Fj(,)d(2010.)141
3916 y Fe(\016)83 b Fj(Gran)n(t)27 b(prop)r(osal)f(review)h(for)g
Ff(F)-6 b(onds)30 b(queb)l(e)l(c)l(ois)g(de)g(la)h(r)l(e)l(cher)l(che)f
(sur)g(la)g(natur)l(e)f(et)g(les)h(te)l(chnolo)l(gies)p
Fj(,)g(2010.)141 4016 y Fe(\016)83 b Fj(Referee)27 b(for)g
Ff(Journal)j(of)g(Homotopy)h(and)f(R)l(elate)l(d)g(Structur)l(es)p
Fj(,)c(2008.)141 4116 y Fe(\016)83 b Fj(Referee)27 b(for)g
Ff(The)l(ory)k(and)f(Applic)l(ations)i(of)f(Cate)l(gories)p
Fj(,)e(2007.)0 4223 y
 0.4 0.1 0.3 setrgbcolor
 0 4223 a Fg(Activities)371 4223
y
 0 setgray
 371 4223 a 141 4337 a Fe(\016)83 b Fj(Co-Organizer)24
b(of)k(Sp)r(ecial)f(Session)g(on)h(Graphs)e(and)i(P)n(olytop)r(es)e(in)
i(Algebraic)e(Com)n(binatorics,)266 4437 y(F)-7 b(all)27
b(Cen)n(tral)g(Sectional)g(AMS)h(Meeting)g(Octob)r(er)f(20-21,)e(2012.)
141 4536 y Fe(\016)83 b Fj(Organizer)25 b(of)j(Ph)n(ysics)e(and)h
(Mathematics)g(F)-7 b(acult)n(y)28 b(Researc)n(h)e(Seminar,)266
4636 y(T)-7 b(ennessee)27 b(State)h(Univ)n(ersit)n(y)-7
b(,)26 b(2005-2010.)141 4736 y Fe(\016)83 b Fj(F)-7 b(ounder)27
b(and)g(organizer)f(of)h(Mathematics)g(Graduate)g(Studen)n(t)i(Researc)
n(h)d(Seminar,)266 4835 y(Virginia)g(T)-7 b(ec)n(h,)28
b(2003-2004.)141 4935 y Fe(\016)83 b Fj(\\T)-7 b(eac)n(hing)26
b(to)h(Promote)f(Studen)n(ts)i(In)n(tellectual)g(Dev)n(elopmen)n(t")266
5034 y(w)n(orkshop)d(b)n(y)j(Marcia)e(Baxter)g(Magolda)266
5134 y(VT)i(Cen)n(ter)f(for)g(Excellence)f(in)i(Undergraduate)e(T)-7
b(eac)n(hing,)27 b(Ma)n(y)g(2001.)p eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 -33 a Fb(6)207 b Fa(Stef)-5 b(an)21
b(F)n(or)o(cey)2634 b(Curriculum)21 b(Vit)l(ae)p 0 86
3887 4 v 0 371 a
 0.4 0.1 0.3 setrgbcolor
 0 371 a Fg(Advising:)44 b(Thesis)33
b(and)f(Undergraduate)i(Resea)m(rch)1867 371 y
 0 setgray
 1867 371
a 141 499 a Fj(24)p Fd(:)82 b Fj(William)28 b(Sands,)g(MS,)g(U.)g
(Akron)330 598 y Ff(Phylo)l(genetic)k(Infer)l(enc)l(e)e(Using)f(a)i
(Discr)l(ete-Inte)l(ger)e(Line)l(ar)h(Pr)l(o)l(gr)l(amming)g(Mo)l(del)p
Fj(,)g(2017.)141 698 y(23)p Fd(:)82 b Fj(Logan)26 b(Keefe,)i(MS,)g(U.)g
(Akron)330 797 y Ff(New)i(F)-6 b(ac)l(ets)30 b(of)g(the)g(Balanc)l(e)l
(d)h(Minimal)h(Evolution)e(Polytop)l(e)p Fj(,)g(2016.)141
897 y(22)p Fd(:)82 b Fj(Matthew)28 b(Hughes,)f(MS,)h(U.)g(Akron)330
997 y Ff(Pric)l(e)j(Signaling)g(in)e(a)i(Two-Market)g(Duop)l(oly)p
Fj(,)d(2016.)141 1096 y(21)p Fd(:)82 b Fj(Joseph)27 b(Johnson,)g(MS,)g
(U.)h(Akron)330 1196 y Ff(Mo)l(deling)k(Monitoring)f(of)f(A)n(n)f
(Industry)h(In)f(A)g(Game-The)l(or)l(e)l(ctic)j(F)-6
b(r)l(amework)31 b(With)f(Imp)l(erfe)l(ct)g(Information)p
Fj(,)f(2015.)141 1296 y(20)p Fd(:)82 b Fj(An)n(thon)n(y)28
b(Zunis,)f(MS,)h(U.)g(Akron)330 1395 y Ff(A)i(Game)g(The)l(or)l(etic)h
(A)n(nalysis)f(and)h(Simulation)f(of)g(Non-Incumb)l(ent)e(Ele)l(ctions)
p Fj(,)h(2014.)141 1495 y(19)p Fd(:)82 b Fj(P)n(atric)n(k)26
b(Sho)n(w)n(ers,)g(Master's)g(Thesis,)i(U.)g(Akron)330
1594 y Ff(A)n(bstr)l(act)h(Polytop)l(es)j(fr)l(om)e(Neste)l(d)f(Posets)
p Fj(,)f(2013.)141 1694 y(18)p Fd(:)82 b Fj(Lisa)27 b(Berry)-7
b(,)27 b(Master's)f(Thesis,)h(U.)h(Akron)330 1794 y Ff(Painte)l(d)j(tr)
l(e)l(es)e(and)h(pter)l(ahe)l(dr)l(a)p Fj(,)f(2013.)141
1893 y(17)p Fd(:)82 b Fj(Dan)28 b(Cra)n(wford,)e(Master's)g(Thesis,)i
(U.)g(Akron)330 1993 y Ff(Minimizing)k(p)l(ol)t(lution)e(thr)l(ough)g
(semi-antagonistic)h(e)l(quilibrium)g(p)l(oints)p Fj(,)d(2013.)141
2093 y(16)p Fd(:)82 b Fj(Bethan)n(y)27 b(Baran)n(yk,)f(Master's)g
(Thesis,)i(U.)g(Akron)330 2192 y Ff(A)i(Mo)l(del)h(for)f(cho)l(osing)i
(a)e(four-ye)l(ar)g(university)g(or)h(a)f(two-ye)l(ar)g(c)l(ommunity)f
(c)l(ol)t(le)l(ge)330 2292 y(with)i(the)e(pr)l(esenc)l(e)i(of)f(a)g
(government)g(subsidy)p Fj(,)f(2012.)141 2391 y(15)p
Fd(:)82 b Fj(Stephen)28 b(Reisdorf,)g(Master's)e(Thesis,)h(U.)h(Akron)
330 2491 y Ff(Cel)t(lohe)l(dr)l(a)p Fj(,)j(2012.)141
2591 y(14)p Fd(:)82 b Fj(George)26 b(Ob)r(eng,)i(Master's)e(Thesis,)h
(U.)i(Akron)330 2690 y Ff(A)h(game)g(the)l(or)l(etic)l(al)h(mo)l(del)f
(for)h(pr)l(evention)f(of)h(me)l(at)e(c)l(ontamination)p
Fj(,)g(2011.)141 2790 y(13)p Fd(:)82 b Fj(Mic)n(hael)27
b(Knap,)g(Researc)n(h)f(Symp)r(osium)i(Graduate)f(Presen)n(tation)f(1)
2582 2760 y Fc(st)2670 2790 y Fj(place)h(winner,)g(TSU)330
2890 y Ff(Simple)k(statistic)l(al)f(r)l(esults)f(of)i(four)f(network)g
(top)l(olo)l(gies)h(in)f(the)g(disc)l(overy)i(pr)l(oblem)p
Fj(,)c(2010.)141 2989 y(12)p Fd(:)82 b Fj(Kelly)27 b(Jerik,)g(Senior)g
(pro)5 b(ject,)27 b(TSU)330 3089 y Ff(Finding)k(a)f(p)l(olytop)l(e)h
(which)h(mo)l(dels)e(the)g(c)l(onne)l(cte)l(dness)g(of)g(a)g(CW-c)l
(omplex)p Fj(,)f(2010.)141 3188 y(11)p Fd(:)82 b Fj(Chris)27
b(White,)i(Senior)e(pro)5 b(ject,)27 b(TSU)330 3288 y
Ff(A)n(n)i(A)n(nalysis)h(of)h(the)f(Pr)l(o)l(gr)l(amming)g(for)h(Chess)
g(Computers)p Fj(,)d(2010.)141 3388 y(10)p Fd(:)82 b
Fj(F)-7 b(on)28 b(Hun)n(ter,)f(Senior)g(pro)5 b(ject,)27
b(TSU)330 3487 y Ff(Gr)l(ade)l(d)k(A)n(lgebr)l(a)f(b)l(ase)l(d)h(on)f
(Polytop)l(e)h(F)-6 b(ac)l(es)p Fj(,)28 b(2010.)141 3587
y(9)p Fd(:)124 b Fj(Shaine)28 b(W)-7 b(alk)n(er,)26 b(Senior)h(pro)5
b(ject,)27 b(TSU)330 3687 y Ff(Asso)l(ciahe)l(dr)l(a:)41
b(Polytop)l(es)31 b(and)f(L)l(attic)l(es)p Fj(,)e(2009.)141
3786 y(8)p Fd(:)124 b Fj(Derriell)27 b(Spring\014eld,)h(Master's)e
(Thesis,)i(TSU)330 3886 y Ff(A)n(lgebr)l(as)i(b)l(ase)l(d)h(up)l(on)e
(the)h(cyclohe)l(dr)l(on)p Fj(,)g(2009.)141 3985 y(7)p
Fd(:)124 b Fj(K.)28 b(W)-7 b(alk)n(er)26 b(Kelly)-7 b(,)27
b(Master's)g(Thesis,)g(TSU)330 4085 y Ff(L)l(o)l(g)j(Jams:)39
b(Napier's)31 b(lo)l(garithm)g(and)f(its)g(morphs)p Fj(,)f(2008.)141
4185 y(6)p Fd(:)124 b Fj(Go)n(vina)27 b(M.)h(Eyum,)f(Master's)g
(Thesis,)g(TSU)330 4284 y Ff(Pr)l(o)l(ducts)j(of)h(Y)-6
b(oung)28 b(diagr)l(ams)k(in)e(a)g(2-fold)h(monoidal)h(c)l(ate)l(gory)p
Fj(,)c(2007.)141 4384 y(5)p Fd(:)124 b Fj(E.)27 b(Seth)i(So)n(w)n(ers,)
c(Master's)i(Thesis,)g(TSU)330 4484 y Ff(Op)l(er)l(ads)k(in)e(2-fold)j
(monoidal)f(c)l(ate)l(gories)p Fj(,)e(2006.)141 4583
y(4)p Fd(:)124 b Fj(F)-7 b(elita)28 b(N.C.)g(Humes,)g(Master's)f
(Thesis,)g(TSU)330 4683 y Ff(Iter)l(ate)l(d)j(monoidal)i(c)l(ate)l
(gories)e(b)l(ase)l(d)h(on)f(a)g(br)l(aiding)p Fj(,)f(2006.)141
4782 y(3)p Fd(:)124 b Fj(Ahmad)28 b(Kheder,)f(Senior)g(pro)5
b(ject,)27 b(TSU)330 4882 y Ff(Investigating)k(minimal)f(r)l(e)l
(cursive)g(gr)l(owth.)p Fj(,)f(2007.)141 4982 y(2)p Fd(:)124
b Fj(Lauren)27 b(Murph)n(y)-7 b(,)27 b(Senior)g(pro)5
b(ject,)27 b(TSU)330 5081 y Ff(Seifert)k(surfac)l(es,)f(knots)g(and)g
(br)l(aids)p Fj(,)f(2006.)141 5181 y(1)p Fd(:)124 b Fj(Jerome)27
b(Lecoin)n(tre,)f(Senior)h(pro)5 b(ject,)27 b(TSU)360
5281 y Ff(Polytop)l(e)k(structur)l(e)d(of)j(the)f(c)l(omp)l(osihe)l(dr)
l(a)p Fj(,)g(2006.)p eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
